<?xml version="1.0" encoding="utf-8"?>
<jjpack>
  <VERSION>1</VERSION>
  <SDPORT>tkpagsd.partners.extranet.microsoft.com:4044</SDPORT>
  <CHANGES>
    <CHANGE>
      <NameValueCollection>
        <Change>default</Change>
      </NameValueCollection>
      <Files>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>10</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/GuidancePackages/MetaGuidancePackage/Microsoft.Practices.RecipeFramework.MetaGuidancePackage.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>8</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/GuidancePackages/MetaGuidancePackage/Templates/Solutions/GuidancePackageSolution.vstemplate</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PFZTVGVtcGxhdGUgDQoJVmVyc2lvbj0iMi4wIiANCglUeXBlPSJQcm9qZWN0R3JvdXAiDQoJeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vZGV2ZWxvcGVyL3ZzdGVtcGxhdGUvMjAwNSI+DQoJPFRlbXBsYXRlRGF0YT4NCgkJPE5hbWU+R3VpZGFuY2UgUGFja2FnZTwvTmFtZT4NCgkJPERlc2NyaXB0aW9uPkNyZWF0ZXMgYSBzb2x1dGlvbiB0byBkZXZlbG9wIGEgR3VpZGFuY2UgUGFja2FnZTwvRGVzY3JpcHRpb24+DQoJCTxQcm9qZWN0VHlwZT5DU2hhcnA8L1Byb2plY3RUeXBlPg0KCQk8U29ydE9yZGVyPjkwPC9Tb3J0T3JkZXI+DQoJCTxDcmVhdGVOZXdGb2xkZXI+dHJ1ZTwvQ3JlYXRlTmV3Rm9sZGVyPg0KCQk8RGVmYXVsdE5hbWU+R3VpZGFuY2VQYWNrYWdlPC9EZWZhdWx0TmFtZT4NCgkJPFByb3ZpZGVEZWZhdWx0TmFtZT50cnVlPC9Qcm92aWRlRGVmYXVsdE5hbWU+DQoJCTxJY29uPkd1aWRhbmNlUGFja2FnZVNvbHV0aW9uLmljbzwvSWNvbj4NCgk8L1RlbXBsYXRlRGF0YT4NCgk8VGVtcGxhdGVDb250ZW50Pg0KCQk8UHJvamVjdENvbGxlY3Rpb24+DQoJCQk8UHJvamVjdFRlbXBsYXRlTGluayBQcm9qZWN0TmFtZT0iJFBhY2thZ2VDYXB0aW9uJEluc3RhbGxlciI+UHJvamVjdHNcR3VpZGFuY2VQYWNrYWdlSW5zdGFsbGVyXEd1aWRhbmNlUGFja2FnZUluc3RhbGxlci52c3RlbXBsYXRlPC9Qcm9qZWN0VGVtcGxhdGVMaW5rPg0KCQkJPFByb2plY3RUZW1wbGF0ZUxpbmsgUHJvamVjdE5hbWU9IiRQYWNrYWdlQ2FwdGlvbiQiPlByb2plY3RzXEd1aWRhbmNlUGFja2FnZVxHdWlkYW5jZVBhY2thZ2UudnN0ZW1wbGF0ZTwvUHJvamVjdFRlbXBsYXRlTGluaz4NCgkJPC9Qcm9qZWN0Q29sbGVjdGlvbj4NCgk8L1RlbXBsYXRlQ29udGVudD4NCgk8V2l6YXJkRXh0ZW5zaW9uPg0KCQk8QXNzZW1ibHk+TWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLCBWZXJzaW9uPTEuMC41MDUwNS4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2E8L0Fzc2VtYmx5Pg0KCQk8RnVsbENsYXNzTmFtZT5NaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVtcGxhdGVzLlVuZm9sZFRlbXBsYXRlPC9GdWxsQ2xhc3NOYW1lPg0KCTwvV2l6YXJkRXh0ZW5zaW9uPg0KCTxXaXphcmREYXRhPg0KCQk8VGVtcGxhdGUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC10ZW1wbGF0ZSINCiAgICAgICAgICAgICAgU2NoZW1hVmVyc2lvbj0iMS4wIg0KICAgICAgICAgICAgICBSZWNpcGU9IkNyZWF0ZUd1aWRhbmNlUGFja2FnZSI+DQoJCTwvVGVtcGxhdGU+DQoJPC9XaXphcmREYXRhPg0KPC9WU1RlbXBsYXRlPg0K</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>14</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/GuidancePackages/MetaGuidancePackage/Templates/Solutions/Projects/GuidancePackage/GuidancePackage.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSINCiAgICBHdWlkPSIkZ3VpZDEkIiANCiAgICBDYXB0aW9uPSIkUGFja2FnZUNhcHRpb24kIg0KICAgIERlc2NyaXB0aW9uPSIkUGFja2FnZURlc2NyaXB0aW9uJCINCiAgICBCaW5kaW5nUmVjaXBlPSJCaW5kaW5nUmVjaXBlIg0KICAgIFNjaGVtYVZlcnNpb249IjEuMCI+DQoJPFJlY2lwZXM+DQoJCTxSZWNpcGUgTmFtZT0iQmluZGluZ1JlY2lwZSI+DQoJCQk8VHlwZXM+DQoJCQkJPFR5cGVBbGlhcyBOYW1lPSJSZWZDcmVhdG9yIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuQ3JlYXRlVW5ib3VuZFJlZmVyZW5jZUFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIvPg0KCQkJPC9UeXBlcz4NCgkJCTxDYXB0aW9uPkNyZWF0ZXMgdW5ib3VuZCByZWZlcmVuY2VzIHRvIHRoZSBndWlkYW5jZSBwYWNrYWdlPC9DYXB0aW9uPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBOYW1lPSJVbmJvdW5kVDRUZW1wbGF0ZSIgVHlwZT0iUmVmQ3JlYXRvciIgQXNzZXROYW1lPSJHZW5lcmF0ZVJlcGVhdGluZ0NsYXNzVDQiDQoJCQkJCQlSZWZlcmVuY2VUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFzc2V0UmVmZXJlbmNlcy5VbmJvdW5kUmVmZXJlbmNlcy5DU2hhcnBQcm9qZWN0UmVjaXBlUmVmZXJlbmNlLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KCQkJCTxBY3Rpb24gTmFtZT0iQ3JlYXRlU2FtcGxlVW5ib3VuZFRlbXBsYXRlUmVmIiBUeXBlPSJSZWZDcmVhdG9yIiBBc3NldE5hbWU9IlByb2plY3RzXFNhbXBsZUxpYnJhcnlcU2FtcGxlTGlicmFyeS52c3RlbXBsYXRlIg0KCQkJCQkJUmVmZXJlbmNlVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLlJlZmVyZW5jZXMuU29sdXRpb25Gb2xkZXJBUmVmZXJlbmNlLCAkUGFja2FnZU5hbWUkIiAvPg0KCQkJCTxBY3Rpb24gTmFtZT0iQ3JlYXRlU2FtcGxlVW5ib3VuZEl0ZW1UZW1wbGF0ZVJlZiIgVHlwZT0iUmVmQ3JlYXRvciIgQXNzZXROYW1lPSJJdGVtc1xDbGFzcy52c3RlbXBsYXRlIg0KCQkJCQkJUmVmZXJlbmNlVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLlJlZmVyZW5jZXMuQ2xhc3NMaWJyYXJ5UmVmZXJlbmNlLCAkUGFja2FnZU5hbWUkIiAvPg0KCQkJCTxBY3Rpb24gTmFtZT0iQ3JlYXRlVW5ib3VuZEl0ZW1UZW1wbGF0ZVJlZiIgVHlwZT0iUmVmQ3JlYXRvciIgQXNzZXROYW1lPSJBZGRJdGVtVGVtcGxhdGVSZWZlcmVuY2UiDQoJCQkJCQlSZWZlcmVuY2VUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFzc2V0UmVmZXJlbmNlcy5VbmJvdW5kUmVmZXJlbmNlcy5DU2hhcnBQcm9qZWN0UmVjaXBlUmVmZXJlbmNlLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KCQkJCTxBY3Rpb24gTmFtZT0iQ3JlYXRlVW5ib3VuZFByb2plY3RUZW1wbGF0ZVJlZiIgVHlwZT0iUmVmQ3JlYXRvciIgQXNzZXROYW1lPSJBZGRQcm9qZWN0VGVtcGxhdGVSZWZlcmVuY2UiDQoJCQkJCQlSZWZlcmVuY2VUeXBlPSIkUGFja2FnZU5hbWVzcGFjZSQuUmVmZXJlbmNlcy5Tb2x1dGlvbkZvbGRlclJlY2lwZVJlZmVyZW5jZSwgJFBhY2thZ2VOYW1lJCIgLz4NCgkJCQk8QWN0aW9uIE5hbWU9IkNyZWF0ZVVuYm91bmRSZWNpcGVSZWYiIFR5cGU9IlJlZkNyZWF0b3IiIEFzc2V0TmFtZT0iQWRkUmVjaXBlUmVmZXJlbmNlIg0KCQkJCQkJUmVmZXJlbmNlVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLlJlZmVyZW5jZXMuQW55RWxlbWVudFJlZmVyZW5jZSwgJFBhY2thZ2VOYW1lJCIgLz4NCgkJCTwvQWN0aW9ucz4NCgkJPC9SZWNpcGU+DQoJCTxSZWNpcGUgTmFtZT0iQ3JlYXRlU29sdXRpb24iPg0KCQkJPENhcHRpb24+Q29sbGVjdHMgaW5mb3JtYXRpb24gZm9yIHRoZSBuZXcgc2FtcGxlIHNvbHV0aW9uLjwvQ2FwdGlvbj4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlByb2plY3ROYW1lIj4NCgkJCQkJPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuTmFtZXNwYWNlU3RyaW5nQ29udmVydGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ii8+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCQk8QXJndW1lbnQgTmFtZT0iV2ViU2l0ZU5hbWUiPg0KCQkJCQk8Q29udmVydGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQ29udmVydGVycy5OYW1lc3BhY2VTdHJpbmdDb252ZXJ0ZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiLz4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJPC9Bcmd1bWVudHM+DQoJCQk8R2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQkJPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIFNjaGVtYVZlcnNpb249IjEuMCI+DQoJCQkJCTxQYWdlcz4NCgkJCQkJCTxQYWdlPg0KCQkJCQkJCTxUaXRsZT5Jbml0aWFsIHZhbHVlcyBmb3IgdGhlIG5ldyBzb2x1dGlvbjwvVGl0bGU+DQoJCQkJCQkJPEZpZWxkcz4NCgkJCQkJCQkJPEZpZWxkIExhYmVsPSJQcm9qZWN0IE5hbWUiIFZhbHVlTmFtZT0iUHJvamVjdE5hbWUiIC8+DQoJCQkJCQkJCTxGaWVsZCBMYWJlbD0iV2ViU2l0ZSBOYW1lIiBWYWx1ZU5hbWU9IldlYlNpdGVOYW1lIiAvPg0KCQkJCQkJCTwvRmllbGRzPg0KCQkJCQkJPC9QYWdlPg0KCQkJCQk8L1BhZ2VzPg0KCQkJCTwvV2l6YXJkPg0KCQkJPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJPC9SZWNpcGU+DQoJCTxSZWNpcGUgTmFtZT0iR2VuZXJhdGVSZXBlYXRpbmdDbGFzc1Q0IiBCb3VuZD0iZmFsc2UiPg0KCQkJPHhpOmluY2x1ZGUgaHJlZj0iVHlwZUFsaWFzLnhtbCIgeG1sbnM6eGk9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWEluY2x1ZGUiIC8+DQoJCQk8Q2FwdGlvbj5BZGQgY2xhc3Mgd2l0aCBUNCBnZW5lcmF0ZWQgY29udGVudDwvQ2FwdGlvbj4NCgkJCTxIb3N0RGF0YT4NCgkJCQk8SWNvbiBJRD0iNjg5IiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IlByb2plY3QiIC8+DQoJCQk8L0hvc3REYXRhPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQ3VycmVudFByb2plY3QiIFR5cGU9IkVudkRURS5Qcm9qZWN0LCBFbnZEVEUsIFZlcnNpb249OC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhIj4NCgkJCQkJPFZhbHVlUHJvdmlkZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5WYWx1ZVByb3ZpZGVycy5GaXJzdFNlbGVjdGVkUHJvamVjdCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJCTxBcmd1bWVudCBOYW1lPSJDbGFzc05hbWUiPg0KCQkJCQk8Q29udmVydGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQ29udmVydGVycy5Db2RlSWRlbnRpZmllclN0cmluZ0NvbnZlcnRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIvPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlRhcmdldEZpbGUiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJFdmFsdWF0b3IiDQoJCQkJCQkJCQkgRXhwcmVzc2lvbj0iJChDbGFzc05hbWUpLmNzIj4NCgkJCQkJCTxNb25pdG9yQXJndW1lbnQgTmFtZT0iQ2xhc3NOYW1lIiAvPg0KCQkJCQk8L1ZhbHVlUHJvdmlkZXI+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCQk8QXJndW1lbnQgTmFtZT0iVGFyZ2V0TmFtZXNwYWNlIj4NCgkJCQkJPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuTmFtZXNwYWNlU3RyaW5nQ29udmVydGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ii8+DQoJCQkJCTxWYWx1ZVByb3ZpZGVyIFR5cGU9IkV2YWx1YXRvciINCgkJCQkJCQkJCSBFeHByZXNzaW9uPSIkKEN1cnJlbnRQcm9qZWN0LlByb3BlcnRpZXMuSXRlbSgnRGVmYXVsdE5hbWVzcGFjZScpLlZhbHVlKSIgLz4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJCTwhLS0gU2hvdyB0aGF0IFQzIHJlY2VpdmVzIHR5cGVkIHZhbHVlcyBpbiB0aGUgZGljdGlvbmFyeSAtLT4NCgkJCQk8QXJndW1lbnQgTmFtZT0iSXRlcmF0aW9ucyIgVHlwZT0iU3lzdGVtLkludDMyIiAvPg0KCQkJPC9Bcmd1bWVudHM+DQoJCQk8R2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQkJPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIFNjaGVtYVZlcnNpb249IjEuMCI+DQoJCQkJCTxQYWdlcz4NCgkJCQkJCTxQYWdlPg0KCQkJCQkJCTxUaXRsZT5DbGFzcyBpbmZvcm1hdGlvbjwvVGl0bGU+DQoJCQkJCQkJPEZpZWxkcz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iQ2xhc3NOYW1lIiBMYWJlbD0iQ2xhc3MgTmFtZSIgLz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iVGFyZ2V0TmFtZXNwYWNlIiBMYWJlbD0iTmFtZXNwYWNlIiAvPg0KCQkJCQkJCQk8RmllbGQgVmFsdWVOYW1lPSJJdGVyYXRpb25zIiBMYWJlbD0iSXRlcmF0aW9ucyINCgkJCQkJCQkJCUludmFsaWRWYWx1ZU1lc3NhZ2U9Ik11c3QgZW50ZXIgYSB2YWxpZCBpbnRlZ2VyIHZhbHVlIHRvIHVzZSBmb3IgdGhlIG51bWJlciBvZiBpdGVyYXRpb25zLiIgLz4NCgkJCQkJCQk8L0ZpZWxkcz4NCgkJCQkJCTwvUGFnZT4NCgkJCQkJPC9QYWdlcz4NCgkJCQk8L1dpemFyZD4NCgkJCTwvR2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkdlbmVyYXRlQ2xhc3MiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQWN0aW9ucy5UZW1wbGF0ZXMuVGV4dFRlbXBsYXRlQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ig0KCQkJCQkJVGVtcGxhdGU9IlRleHRcUmVwZWF0aW5nLmNzLnQ0IiANCgkJCQkJCUlucHV0VmFsdWU9IkNvbmZpZ3VyZWQgU3RhdGljIFZhbHVlIj4NCgkJCQkJPCEtLSBJbnB1dFZhbHVlIHNob3dzIGEgY29uZmlndXJlZCBhdHRyaWJ1dGUgaW4gVDQgdGVtcGxhdGUgdGhhdCBkb2Vzbid0IG5lZWQgYSBwcm9wZXJ0eSBvbiB0aGUgY2xhc3MgLS0+DQoJCQkJCTxJbnB1dCBOYW1lPSJDbGFzc05hbWUiIFJlY2lwZUFyZ3VtZW50PSJDbGFzc05hbWUiIC8+DQoJCQkJCTxJbnB1dCBOYW1lPSJUYXJnZXROYW1lc3BhY2UiIFJlY2lwZUFyZ3VtZW50PSJUYXJnZXROYW1lc3BhY2UiIC8+DQoJCQkJCTxJbnB1dCBOYW1lPSJJdGVyYXRpb25zIiBSZWNpcGVBcmd1bWVudD0iSXRlcmF0aW9ucyIgLz4NCgkJCQkJPE91dHB1dCBOYW1lPSJDb250ZW50IiAvPg0KCQkJCTwvQWN0aW9uPg0KCQkJCTxBY3Rpb24gTmFtZT0iQWRkQ2xhc3MiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQWN0aW9ucy5BZGRJdGVtRnJvbVN0cmluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSINCgkJCQkJCU9wZW49InRydWUiPg0KCQkJCQk8IS0tU2hvd3MgaG93IHRvIHNwZWNpZnkgYSBwcm9wZXJ0eSBhcyBhIGZpeGVkIHZhbHVlIGluIGNvbmZpZy0tPg0KCQkJCQk8SW5wdXQgTmFtZT0iQ29udGVudCIgQWN0aW9uT3V0cHV0PSJHZW5lcmF0ZUNsYXNzLkNvbnRlbnQiIC8+DQoJCQkJCTxJbnB1dCBOYW1lPSJUYXJnZXRGaWxlTmFtZSIgUmVjaXBlQXJndW1lbnQ9IlRhcmdldEZpbGUiIC8+DQoJCQkJCTxJbnB1dCBOYW1lPSJQcm9qZWN0IiBSZWNpcGVBcmd1bWVudD0iQ3VycmVudFByb2plY3QiIC8+DQoJCQkJPC9BY3Rpb24+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCQk8UmVjaXBlIE5hbWU9Ik5ld0l0ZW1DbGFzcyIgUmVjdXJyZW50PSJ0cnVlIj4NCgkJCTx4aTppbmNsdWRlIGhyZWY9IlR5cGVBbGlhcy54bWwiIHhtbG5zOnhpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hJbmNsdWRlIiAvPg0KCQkJPENhcHRpb24+Q29sbGVjdHMgaW5mb3JtYXRpb24gZnJvbSB0aGUgdXNlcjwvQ2FwdGlvbj4NCgkJCTxEZXNjcmlwdGlvbj4NCgkJCQlUaGlzIHJlY2lwZSBkb2Vzbid0IHBlcmZvcm0gYW55IGFjdGlvbnMsIGJ1dCBzaG93Y2FzZXMgdGhlIGZlYXR1cmVzDQoJCQkJYXZhaWxhYmxlIHRvIGJ1aWxkIGhpZ2hseSBmdW5jdGlvbmFsIHdpemFyZHMgYnkgdGFraW5nIGFkdmFudGFnZSBvZg0KCQkJCXR5cGUgY29udmVydGVycyBhbmQgZWRpdG9ycy4NCgkJCTwvRGVzY3JpcHRpb24+DQoJCQk8SG9zdERhdGE+DQoJCQkJPEljb24gSUQ9IjE0MjkiLz4NCgkJCQk8Q29tbWFuZEJhciBOYW1lPSJQcm9qZWN0IiAvPg0KCQkJPC9Ib3N0RGF0YT4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkRldmVsb3BlciIgLz4NCgkJCQk8IS0tIEV4YW1wbGUgb2YgYXV0b21hdGljIFVJVHlwZUVkaXRvciBwcm92aWRlZCBieSAuTkVULCBhbmQgYSBjdXN0b20gdmFsdWUgcHJvdmlkZXIgLS0+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkRhdGUiIFR5cGU9IlN5c3RlbS5EYXRlVGltZSI+DQoJCQkJCTxWYWx1ZVByb3ZpZGVyIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5WYWx1ZVByb3ZpZGVycy5EYXRlTm93VmFsdWVQcm92aWRlciwgJFBhY2thZ2VOYW1lJCIgLz4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJCTwhLS0gRXhhbXBsZSBvZiBhdXRvbWF0aWMgY29udmVydGVyIHByb3ZpZGVkIGJ5IC5ORVQgLS0+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlBsYXRmb3JtIiBUeXBlPSJTeXN0ZW0uUGxhdGZvcm1JRCIgLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iSXRlcmF0aW9ucyIgVHlwZT0iU3lzdGVtLkludDMyIj4NCgkJCQkJPCEtLSBTaG93cyBob3cgdG8gdXNlIHRoZSBleHByZXNzaW9uIGV2YWx1YXRvciB0byBhc3NpZ24gc2ltcGxlIGRlZmF1bHQgdmFsdWVzLCB3aGljaCBhcmUgdHlwZWQgbmV2ZXJ0aGVsZXNzIC0tPg0KCQkJCQk8IS0tIFRoZSBmdWxsIHR5cGUgb2YgdGhlIGV2YWx1YXRvciBpcyBpbmNsdWRlZCB1c2luZyBYSW5jbHVkZSBmcm9tIGEgcmV1c2FibGUgZmlsZSAtLT4NCgkJCQkJPFZhbHVlUHJvdmlkZXIgVHlwZT0iRXZhbHVhdG9yIiBFeHByZXNzaW9uPSI1IiAvPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQkJPCEtLSBUaGUgZm9sbG93aW5nIHR3byBhcmd1bWVudHMgYXJlIG5vdCBzaG93biB0byB0aGUgdXNlciwgYnV0IGNvbGxhYm9yYXRlIHRvIHJldHJpZXZlIGEgdmFsdWUgLS0+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkN1cnJlbnRQcm9qZWN0IiBUeXBlPSJFbnZEVEUuUHJvamVjdCwgRW52RFRFLCBWZXJzaW9uPTguMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYSI+DQoJCQkJCTxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRmlyc3RTZWxlY3RlZFByb2plY3QsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCQk8QXJndW1lbnQgTmFtZT0iVGFyZ2V0TmFtZXNwYWNlIj4NCgkJCQkJPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuTmFtZXNwYWNlU3RyaW5nQ29udmVydGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ii8+DQoJCQkJCTwhLS0gU2hvd3MgYW4gYXJndW1lbnQgd2l0aCBhIGN1c3RvbSB0eXBlIGRlZmluZWQgaW4tcGxhY2UsIGFuZCBub3QgY29sbGVjdGVkIGJ5IHRoZSB3aXphcmQgLS0+DQoJCQkJCTxWYWx1ZVByb3ZpZGVyIFR5cGU9IkV2YWx1YXRvciIgRXhwcmVzc2lvbj0iJChDdXJyZW50UHJvamVjdC5Qcm9wZXJ0aWVzLkl0ZW0oJ0RlZmF1bHROYW1lc3BhY2UnKS5WYWx1ZSkuR2VuZXJhdGVkIiAvPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlByb2plY3QiIFR5cGU9IkVudkRURS5Qcm9qZWN0LCBFbnZEVEUiIFJlcXVpcmVkPSJmYWxzZSI+DQoJCQkJCTwhLS0gQ29udmVydGVyIGVuc3VyZXMgdGhhdCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHByb2plY3QgaXMgdmFsaWQsIGFuZCBhbHNvIGFsbG93cyBjb252ZXJzaW9uIHRvL2Zyb20gaXQgdG8gdGhlIFByb2plY3QgaW5zdGFuY2UuIC0tPg0KCQkJCQk8Q29udmVydGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQ29udmVydGVycy5Qcm9qZWN0Q29udmVydGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQk8L0FyZ3VtZW50cz4NCgkJCTxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCQk8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2U+DQoJCQkJCQkJPFRpdGxlPkNvbGxlY3QgaW5mb3JtYXRpb24gdXNpbmcgZWRpdG9ycywgY29udmVydGVycyBhbmQgdmFsdWUgcHJvdmlkZXJzLjwvVGl0bGU+DQoJCQkJCQkJPEZpZWxkcz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iRGV2ZWxvcGVyIiBMYWJlbD0iWW91ciBuYW1lIj4NCgkJCQkJCQkJCTxUb29sdGlwPkN1c3RvbSBlZGl0b3IgcHJvdmlkZWQgYnkgdGhlIGd1aWRhbmNlIHBhY2thZ2UsIHRoZSBNZXNzYWdlRWRpdG9yLCBhbHNvIHVzZWQgaW4gdGhlICJTYXkgYSBtZXNzYWdlIiByZWNpcGUuPC9Ub29sdGlwPg0KCQkJCQkJCQkJPEVkaXRvciBUeXBlPSIkUGFja2FnZU5hbWVzcGFjZSQuRWRpdG9ycy5NZXNzYWdlRWRpdG9yLCAkUGFja2FnZU5hbWUkIiAvPg0KCQkJCQkJCQk8L0ZpZWxkPg0KCQkJCQkJCQk8RmllbGQgVmFsdWVOYW1lPSJEYXRlIiBMYWJlbD0iRGF0ZSI+DQoJCQkJCQkJCQk8VG9vbHRpcD5BdXRvbWF0aWMgZWRpdG9yIHByb3ZpZGVkIGJ5IC5ORVQuPC9Ub29sdGlwPg0KCQkJCQkJCQk8L0ZpZWxkPg0KCQkJCQkJCQk8RmllbGQgVmFsdWVOYW1lPSJJdGVyYXRpb25zIiBMYWJlbD0iSXRlcmF0aW9ucyINCgkJCQkJCQkJCUludmFsaWRWYWx1ZU1lc3NhZ2U9Ik11c3QgZW50ZXIgYSB2YWxpZCBpbnRlZ2VyIHZhbHVlIHRvIHVzZSBmb3IgdGhlIG51bWJlciBvZiBpdGVyYXRpb25zLiI+DQoJCQkJCQkJCQk8VG9vbHRpcD5WYWx1ZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHZhbHVlIGVkaXRvciwgd2l0aCBhIGZpeGVkIHZhbHVlIGJ1dCBjb252ZXJ0ZWQgdG8gdGhlIHByb3BlciB0eXBlIGF1dG9tYXRpY2FsbHkuPC9Ub29sdGlwPg0KCQkJCQkJCQk8L0ZpZWxkPg0KCQkJCQkJCQk8RmllbGQgVmFsdWVOYW1lPSJQbGF0Zm9ybSIgTGFiZWw9IlBsYXRmb3JtIj4NCgkJCQkJCQkJCTxUb29sdGlwPkF1dG9tYXRpYyBjb252ZXJ0ZXIgYW5kIHZhbHVlcyBwcm92aWRlZCBieSAuTkVUIHRvIGFsbCBFbnVtIHR5cGVzLjwvVG9vbHRpcD4NCgkJCQkJCQkJPC9GaWVsZD4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iVGFyZ2V0TmFtZXNwYWNlIiBMYWJlbD0iVGFyZ2V0IE5hbWVzcGFjZSI+DQoJCQkJCQkJCQk8VG9vbHRpcD5UaGlzIHZhbHVlIHdhcyBjYWxjdWxhdGVkIHVzaW5nIHRoZSBFeHByZXNzaW9uRXZhbHVhdG9yVmFsdWVQcm92aWRlciwgYW5kIHJlZmVycmluZyB0byBvdGhlciByZWNpcGUgYXJndW1lbnRzIChvbmUgY29udGFpbmluZyB0aGUgY3VycmVudCBwcm9qZWN0IGluIHRoaXMgY2FzZSkuPC9Ub29sdGlwPg0KCQkJCQkJCQk8L0ZpZWxkPg0KCQkJCQkJCQk8RmllbGQgVmFsdWVOYW1lPSJQcm9qZWN0IiBMYWJlbD0iUmVmZXJlbmNlIFByb2plY3QiPg0KCQkJCQkJCQkJPFRvb2x0aXA+U2hvd3MgYSBjb21wbGV4IGVkaXRvciBmb3Igc2VsZWN0aW5nIGEgcHJvamVjdCBpbiB0aGUgY3VycmVudCBzb2x1dGlvbiwgcHJvdmlkZWQgd2l0aCB0aGUgTGlicmFyeS48L1Rvb2x0aXA+DQoJCQkJCQkJCQk8RWRpdG9yIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuRWRpdG9ycy5Tb2x1dGlvblBpY2tlckVkaXRvciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCgkJCQkJCQkJPC9GaWVsZD4NCgkJCQkJCQk8L0ZpZWxkcz4NCgkJCQkJCTwvUGFnZT4NCgkJCQkJPC9QYWdlcz4NCgkJCQk8L1dpemFyZD4NCgkJCTwvR2F0aGVyaW5nU2VydmljZURhdGE+DQoJCTwvUmVjaXBlPg0KCQk8UmVjaXBlIE5hbWU9IkhlbGxvV29ybGRSZWNpcGUiIEJvdW5kPSJ0cnVlIj4NCgkJCTxDYXB0aW9uPlNheSBhIG1lc3NhZ2U8L0NhcHRpb24+DQoJCQk8RGVzY3JpcHRpb24+QWNjZXB0cyBhIG1lc3NhZ2UgYXMgaW5wdXQgYW5kIHNob3dzIGEgbWVzc2FnZSBib3ggd2l0aCBpdC48L0Rlc2NyaXB0aW9uPg0KCQkJPEhvc3REYXRhPg0KCQkJCTxJY29uIElEPSIxMDQ2Ii8+DQoJCQkJPENvbW1hbmRCYXIgTmFtZT0iU29sdXRpb24gRm9sZGVyIi8+DQoJCQkJPENvbW1hbmRCYXIgTmFtZT0iUHJvamVjdCIvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IldlYiBQcm9qZWN0Ii8+DQoJCQkJPENvbW1hbmRCYXIgTmFtZT0iV2ViIEl0ZW0iLz4NCgkJCQk8Q29tbWFuZEJhciBOYW1lPSJXZWIgRm9sZGVyIi8+DQoJCQk8L0hvc3REYXRhPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iTWVzc2FnZSIgLz4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJCTxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KCQkJCQk8UGFnZXM+DQoJCQkJCQk8UGFnZT4NCgkJCQkJCQk8VGl0bGU+Q29sbGVjdCBtZXNzYWdlIHRvIHNob3c8L1RpdGxlPg0KCQkJCQkJCTxMaW5rVGl0bGU+UHJvdmlkZSBhIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIHVzZWQgYnkgdGhlIEhlbGxvV29ybGRBY3Rpb24uPC9MaW5rVGl0bGU+DQoJCQkJCQkJPEhlbHA+WW91IHNob3VsZG4ndCBuZWVkIGEgbG90IG9mIGhlbHAhPC9IZWxwPg0KCQkJCQkJCTxGaWVsZHM+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9Ik1lc3NhZ2UiIExhYmVsPSJNZXNzYWdlIj4NCgkJCQkJCQkJCTxFZGl0b3IgVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLkVkaXRvcnMuTWVzc2FnZUVkaXRvciwgJFBhY2thZ2VOYW1lJCIgLz4NCgkJCQkJCQkJPC9GaWVsZD4NCgkJCQkJCQk8L0ZpZWxkcz4NCgkJCQkJCTwvUGFnZT4NCgkJCQkJPC9QYWdlcz4NCgkJCQk8L1dpemFyZD4NCgkJCTwvR2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkhlbGxvV29ybGQiIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5BY3Rpb25zLkhlbGxvV29ybGRBY3Rpb24sICRQYWNrYWdlTmFtZSQiPg0KCQkJCQk8SW5wdXQgTmFtZT0iSGVsbG9NZXNzYWdlIiBSZWNpcGVBcmd1bWVudD0iTWVzc2FnZSIgLz4NCgkJCQk8L0FjdGlvbj4NCgkJCTwvQWN0aW9ucz4NCgkJPC9SZWNpcGU+DQoJCTxSZWNpcGUgTmFtZT0iQ3VzdG9tV2l6YXJkUGFnZXMiPg0KCQkJPENhcHRpb24+RXhhbXBsZSBvZiBDdXN0b20gV2l6YXJkIFBhZ2VzPC9DYXB0aW9uPg0KCQkJPERlc2NyaXB0aW9uPlRoaXMgcmVjdXJyZW50IHJlY2lwZSBkZW1vbnN0cmF0ZXMgdXNlIG9mIGN1c3RvbSB3aXphcmQgcGFnZXM8L0Rlc2NyaXB0aW9uPg0KCQkJPEhvc3REYXRhPg0KCQkJCTxJY29uIElEPSIxMDQ3Ii8+DQoJCQkJPENvbW1hbmRCYXIgTmFtZT0iU29sdXRpb24gRm9sZGVyIi8+DQoJCQk8L0hvc3REYXRhPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQxIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJBcmd1bWVudDIiIFR5cGU9IlN5c3RlbS5TdHJpbmciIC8+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkFyZ3VtZW50MyIgVHlwZT0iU3lzdGVtLkRyYXdpbmcuRm9udCwgU3lzdGVtLkRyYXdpbmcsIFZlcnNpb249Mi4wLjM2MDAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhIi8+DQoJCQk8L0FyZ3VtZW50cz4NCgkJCTxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCQk8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2UgVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLkN1c3RvbVdpemFyZFBhZ2VzLkN1c3RvbVdpelBhZ2UxLCAkUGFja2FnZU5hbWUkIiBXaWR0aD0iODAwIiBIZWlnaHQ9IjUwMCIgLz4NCgkJCQkJCTxQYWdlIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5DdXN0b21XaXphcmRQYWdlcy5DdXN0b21XaXpQYWdlMiwgJFBhY2thZ2VOYW1lJCIgLz4NCgkJCQkJPC9QYWdlcz4NCgkJCQk8L1dpemFyZD4NCgkJCTwvR2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkhlbGxvV29ybGQiIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5BY3Rpb25zLkhlbGxvV29ybGRBY3Rpb24sICRQYWNrYWdlTmFtZSQiPg0KCQkJCQk8SW5wdXQgTmFtZT0iSGVsbG9NZXNzYWdlIiBSZWNpcGVBcmd1bWVudD0iQXJndW1lbnQxIiAvPg0KCQkJCTwvQWN0aW9uPg0KCQkJCTxBY3Rpb24gTmFtZT0iSGVsbG9Xb3JsZDIiIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5BY3Rpb25zLkhlbGxvV29ybGRBY3Rpb24sICRQYWNrYWdlTmFtZSQiPg0KCQkJCQk8SW5wdXQgTmFtZT0iSGVsbG9NZXNzYWdlIiBSZWNpcGVBcmd1bWVudD0iQXJndW1lbnQyIiAvPg0KCQkJCTwvQWN0aW9uPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgkJPFJlY2lwZSBOYW1lPSJBZGRJdGVtVGVtcGxhdGVSZWZlcmVuY2UiIEJvdW5kPSJmYWxzZSI+DQoJCQk8Q2FwdGlvbj5BZGQgYW4gaXRlbSB0ZW1wbGF0ZSByZWZlcmVuY2UgdG8gYSBQcm9qZWN0PC9DYXB0aW9uPg0KCQkJPEhvc3REYXRhPg0KCQkJCTxJY29uIElEPSI1MjUiIC8+DQoJCQkJPENvbW1hbmRCYXIgTmFtZT0iUHJvamVjdCIgLz4NCgkJCTwvSG9zdERhdGE+DQoJCQk8QXJndW1lbnRzPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJUZW1wbGF0ZUZpbGVuYW1lIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIi8+DQoJCQk8L0FyZ3VtZW50cz4NCgkJCTxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCQk8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2U+DQoJCQkJCQkJPFRpdGxlPk5ldyBUZW1wbGF0ZSBSZWZlcmVuY2U8L1RpdGxlPg0KCQkJCQkJCTxGaWVsZHM+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IlRlbXBsYXRlRmlsZW5hbWUiIExhYmVsPSJUZW1wbGF0ZSBmaWxlbmFtZSI+DQoJCQkJCQkJCQk8RWRpdG9yIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5FZGl0b3JzLkl0ZW1UZW1wbGF0ZUNob29zZXIsICRQYWNrYWdlTmFtZSQiIC8+DQoJCQkJCQkJCTwvRmllbGQ+DQoJCQkJCQkJPC9GaWVsZHM+DQoJCQkJCQk8L1BhZ2U+DQoJCQkJCTwvUGFnZXM+DQoJCQkJPC9XaXphcmQ+DQoJCQk8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBUeXBlPSIkUGFja2FnZU5hbWVzcGFjZSQuQWN0aW9ucy5BZGRUZW1wbGF0ZVJlZmVyZW5jZSwgJFBhY2thZ2VOYW1lJCINCgkJCQkJCU5hbWU9IkFkZEl0ZW1UZW1wbGF0ZVJlZmVyZW5jZSI+DQoJCQkJCTxJbnB1dCBOYW1lPSJUZW1wbGF0ZUZpbGVuYW1lIiBSZWNpcGVBcmd1bWVudD0iVGVtcGxhdGVGaWxlbmFtZSIvPg0KCQkJCTwvQWN0aW9uPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgkJPFJlY2lwZSBOYW1lPSJBZGRQcm9qZWN0VGVtcGxhdGVSZWZlcmVuY2UiIEJvdW5kPSJmYWxzZSI+DQoJCQk8Q2FwdGlvbj5BZGQgYSBwcm9qZWN0IHRlbXBsYXRlIHJlZmVyZW5jZSB0byBhIFNvbHV0aW9uIEZvbGRlciBvciBTb2x1dGlvbjwvQ2FwdGlvbj4NCgkJCTxIb3N0RGF0YT4NCgkJCQk8SWNvbiBJRD0iNjgwIiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IlNvbHV0aW9uIEZvbGRlciIgLz4NCgkJCQk8Q29tbWFuZEJhciBOYW1lPSJTb2x1dGlvbiIgLz4NCgkJCTwvSG9zdERhdGE+DQoJCQk8QXJndW1lbnRzPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJUZW1wbGF0ZUZpbGVuYW1lIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIi8+DQoJCQk8L0FyZ3VtZW50cz4NCgkJCTxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCQk8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2U+DQoJCQkJCQkJPFRpdGxlPk5ldyBUZW1wbGF0ZSBSZWZlcmVuY2U8L1RpdGxlPg0KCQkJCQkJCTxGaWVsZHM+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IlRlbXBsYXRlRmlsZW5hbWUiIExhYmVsPSJUZW1wbGF0ZSBmaWxlbmFtZSI+DQoJCQkJCQkJCQk8RWRpdG9yIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5FZGl0b3JzLlByb2plY3RUZW1wbGF0ZUNob29zZXIsICRQYWNrYWdlTmFtZSQiIC8+DQoJCQkJCQkJCTwvRmllbGQ+DQoJCQkJCQkJPC9GaWVsZHM+DQoJCQkJCQk8L1BhZ2U+DQoJCQkJCTwvUGFnZXM+DQoJCQkJPC9XaXphcmQ+DQoJCQk8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBUeXBlPSIkUGFja2FnZU5hbWVzcGFjZSQuQWN0aW9ucy5BZGRUZW1wbGF0ZVJlZmVyZW5jZSwgJFBhY2thZ2VOYW1lJCINCgkJCQkJCU5hbWU9IkFkZEl0ZW1UZW1wbGF0ZVJlZmVyZW5jZSI+DQoJCQkJCTxJbnB1dCBOYW1lPSJUZW1wbGF0ZUZpbGVuYW1lIiBSZWNpcGVBcmd1bWVudD0iVGVtcGxhdGVGaWxlbmFtZSIvPg0KCQkJCTwvQWN0aW9uPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgkJPFJlY2lwZSBOYW1lPSJSZWNpcGVXaXRoSW5pdGlhbFN0YXRlIj4NCgkJCTxDYXB0aW9uPlJlY2lwZSB0aGF0IGlzIGxvYWRlZCB3aXRoIHByZXNldCB2YWx1ZXMgaW4gdGhlIGludm9raW5nIC52c3RlbXBsYXRlIGZpbGU8L0NhcHRpb24+DQoJCQk8QXJndW1lbnRzPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJTdHJpbmdQYXJhbWV0ZXIiIFR5cGU9IlN5c3RlbS5TdHJpbmciLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iSW50UGFyYW1ldGVyIiBUeXBlPSJTeXN0ZW0uSW50MzIiLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iRG91YmxlUGFyYW1ldGVyIiBUeXBlPSJTeXN0ZW0uRG91YmxlIi8+DQoJCQk8L0FyZ3VtZW50cz4NCgkJCTxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCQk8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2U+DQoJCQkJCQkJPFRpdGxlPldpemFyZCB3aXRoIGluaXRpYWwgc3RhdGU8L1RpdGxlPg0KCQkJCQkJCTxIZWxwPldpemFyZCB2YWx1ZXMgYXJlIHNldCBpbiB0aGUgLnZzdGVtcGxhdGU8L0hlbHA+DQoJCQkJCQkJPEZpZWxkcz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iU3RyaW5nUGFyYW1ldGVyIiBMYWJlbD0iU3RyaW5nIHBhcmFtZXRlciI+DQoJCQkJCQkJCQk8SGVscD5TdHJpbmcgcGFyYW1ldGVyIHdpdGggaW5pdGlhbCBzdGF0ZSBzcGVjaWZpZWQ8L0hlbHA+DQoJCQkJCQkJCTwvRmllbGQ+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IkludFBhcmFtZXRlciIgTGFiZWw9IkludGVnZXIgcGFyYW1ldGVyIj4NCgkJCQkJCQkJCTxIZWxwPkludGVnZXIgcGFyYW1ldGVyIHdpdGggaW5pdGlhbCBzdGF0ZSBzcGVjaWZpZWQ8L0hlbHA+DQoJCQkJCQkJCTwvRmllbGQ+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IkRvdWJsZVBhcmFtZXRlciIgTGFiZWw9IkRvdWJsZSBwYXJhbWV0ZXIiPg0KCQkJCQkJCQkJPEhlbHA+RG91YmxlIHBhcmFtZXRlciB3aXRoIGluaXRpYWwgc3RhdGUgc3BlY2lmaWVkPC9IZWxwPg0KCQkJCQkJCQk8L0ZpZWxkPg0KCQkJCQkJCTwvRmllbGRzPg0KCQkJCQkJPC9QYWdlPg0KCQkJCQk8L1BhZ2VzPg0KCQkJCTwvV2l6YXJkPg0KCQkJPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCTxBY3Rpb25zPg0KCQkJCTxBY3Rpb24gTmFtZT0iSGVsbG9Xb3JsZCIgVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLkFjdGlvbnMuSGVsbG9Xb3JsZEFjdGlvbiwgJFBhY2thZ2VOYW1lJCI+DQoJCQkJCTxJbnB1dCBOYW1lPSJIZWxsb01lc3NhZ2UiIFJlY2lwZUFyZ3VtZW50PSJTdHJpbmdQYXJhbWV0ZXIiIC8+DQoJCQkJPC9BY3Rpb24+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCQk8UmVjaXBlIE5hbWU9IkluaXRpYWxTdGF0ZVNlcmlhbGl6YWJsZUNsYXNzIj4NCgkJCTxDYXB0aW9uPlJlY2lwZSBjYWxsZWQgZnJvbSB0aGUgdW5mb2xkaW5nIG9mIGEgLnZzdGVtcGxhdGUgZmlsZTwvQ2FwdGlvbj4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlNlcmlhbGl6YWJsZUZpZWxkIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIi8+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlNlcmlhbGl6YWJsZVR5cGUiIFR5cGU9IlN5c3RlbS5TdHJpbmciLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iTm9uU2VyaWFsaXphYmxlRmllbGQiIFR5cGU9IlN5c3RlbS5TdHJpbmciLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iTm9uU2VyaWFsaXphYmxlVHlwZSIgVHlwZT0iU3lzdGVtLlN0cmluZyIvPg0KCQkJPC9Bcmd1bWVudHM+DQoJCQk8R2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQkJPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIFNjaGVtYVZlcnNpb249IjEuMCI+DQoJCQkJCTxQYWdlcz4NCgkJCQkJCTxQYWdlPg0KCQkJCQkJCTxUaXRsZT5XaXphcmQgd2l0aCBpbml0aWFsIHN0YXRlIGZyb20gdW5mb2xkaW5nPC9UaXRsZT4NCgkJCQkJCQk8SGVscD5XaXphcmQgdmFsdWVzIGFyZSBzZXQgaW4gdGhlIC52c3RlbXBsYXRlPC9IZWxwPg0KCQkJCQkJCTxGaWVsZHM+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IlNlcmlhbGl6YWJsZUZpZWxkIiBMYWJlbD0iU2VyaWFsaXphYmxlIGZpZWxkIj4NCgkJCQkJCQkJCTxIZWxwPk5hbWUgb2YgYSBzZXJpYWxpemFibGUgZmllbGQgb2YgdGhlIG5ldyBjbGFzczwvSGVscD4NCgkJCQkJCQkJPC9GaWVsZD4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iU2VyaWFsaXphYmxlVHlwZSIgTGFiZWw9IlNlcmlhbGl6YWJsZSB0eXBlIj4NCgkJCQkJCQkJCTxIZWxwPlR5cGUgb2YgdGhlIHByZXZpb3VzIHNlcmlhbGl6YWJsZSBmaWVsZDwvSGVscD4NCgkJCQkJCQkJPC9GaWVsZD4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iTm9uU2VyaWFsaXphYmxlRmllbGQiIExhYmVsPSJOb24gU2VyaWFsaXphYmxlIGZpZWxkIj4NCgkJCQkJCQkJCTxIZWxwPk5hbWUgb2YgYSBub24gc2VyaWFsaXphYmxlIGZpZWxkIG9mIHRoZSBuZXcgY2xhc3M8L0hlbHA+DQoJCQkJCQkJCTwvRmllbGQ+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9Ik5vblNlcmlhbGl6YWJsZVR5cGUiIExhYmVsPSJOb24gU2VyaWFsaXphYmxlIGZpZWxkIj4NCgkJCQkJCQkJCTxIZWxwPlR5cGUgb2YgdGhlIHByZXZpb3VzIG5vbiBzZXJpYWxpemFibGUgZmllbGQ8L0hlbHA+DQoJCQkJCQkJCTwvRmllbGQ+DQoJCQkJCQkJPC9GaWVsZHM+DQoJCQkJCQk8L1BhZ2U+DQoJCQkJCTwvUGFnZXM+DQoJCQkJPC9XaXphcmQ+DQoJCQk8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQk8L1JlY2lwZT4NCgkJPFJlY2lwZSBOYW1lPSJBZGRSZWNpcGVSZWZlcmVuY2UiIEJvdW5kPSJmYWxzZSI+DQoJCQk8Q2FwdGlvbj5BZGQgYSByZWNpcGUgcmVmZXJlbmNlIHRvIGEgc29sdXRpb24gZWxlbWVudDwvQ2FwdGlvbj4NCgkJCTxIb3N0RGF0YT4NCgkJCQk8SWNvbiBJRD0iNTI1IiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IlNvbHV0aW9uIiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IlNvbHV0aW9uIEZvbGRlciIgLz4NCgkJCQk8Q29tbWFuZEJhciBOYW1lPSJQcm9qZWN0IiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IkZvbGRlciIgLz4NCgkJCQk8Q29tbWFuZEJhciBOYW1lPSJJdGVtIiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IldlYiBQcm9qZWN0IiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IldlYiBGb2xkZXIiIC8+DQoJCQkJPENvbW1hbmRCYXIgTmFtZT0iV2ViIEl0ZW0iIC8+DQoJCQk8L0hvc3REYXRhPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iUmVjaXBlTmFtZSIgVHlwZT0iU3lzdGVtLlN0cmluZyI+DQoJCQkJCTxDb252ZXJ0ZXIgVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLkNvbnZlcnRlcnMuUmVjaXBlTmFtZUNvbnZlcnRlciwgJFBhY2thZ2VOYW1lJCIvPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQk8L0FyZ3VtZW50cz4NCgkJCTxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCQk8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2U+DQoJCQkJCQkJPFRpdGxlPk5ldyBUZW1wbGF0ZSBSZWZlcmVuY2U8L1RpdGxlPg0KCQkJCQkJCTxGaWVsZHM+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IlJlY2lwZU5hbWUiIExhYmVsPSJSZWNpcGUiIC8+DQoJCQkJCQkJPC9GaWVsZHM+DQoJCQkJCQk8L1BhZ2U+DQoJCQkJCTwvUGFnZXM+DQoJCQkJPC9XaXphcmQ+DQoJCQk8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBUeXBlPSIkUGFja2FnZU5hbWVzcGFjZSQuQWN0aW9ucy5BZGRSZWNpcGVSZWZlcmVuY2UsICRQYWNrYWdlTmFtZSQiDQoJCQkJCQlOYW1lPSJBZGRSZWNpcGVSZWZlcmVuY2UiPg0KCQkJCQk8SW5wdXQgTmFtZT0iUmVjaXBlTmFtZSIgUmVjaXBlQXJndW1lbnQ9IlJlY2lwZU5hbWUiLz4NCgkJCQk8L0FjdGlvbj4NCgkJCTwvQWN0aW9ucz4NCgkJPC9SZWNpcGU+DQoJCTxSZWNpcGUgTmFtZT0iU2hvd0N1cnJlbnRTZWxlY3Rpb24iPg0KCQkJPENhcHRpb24+U2hvdyBjdXJyZW50IHNlbGVjdGlvbjwvQ2FwdGlvbj4NCgkJCTxIb3N0RGF0YT4NCgkJCQk8SWNvbiBJRD0iMTcyIiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IlNvbHV0aW9uIiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IlNvbHV0aW9uIEZvbGRlciIgLz4NCgkJCQk8Q29tbWFuZEJhciBOYW1lPSJQcm9qZWN0IiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IkZvbGRlciIgLz4NCgkJCQk8Q29tbWFuZEJhciBOYW1lPSJJdGVtIiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IldlYiBQcm9qZWN0IiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IldlYiBGb2xkZXIiIC8+DQoJCQkJPENvbW1hbmRCYXIgTmFtZT0iV2ViIEl0ZW0iIC8+DQoJCQk8L0hvc3REYXRhPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBOYW1lPSJTaG93Q3VycmVudCIgVHlwZT0iJFBhY2thZ2VOYW1lc3BhY2UkLkFjdGlvbnMuU2hvd0N1cnJlbnRTZWxlY3Rpb24sICRQYWNrYWdlTmFtZSQiIC8+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCQk8UmVjaXBlIE5hbWU9IkFkZE1haW5DbGFzcyIgUmVjdXJyZW50PSJmYWxzZSI+DQoJCQk8VHlwZXM+DQoJCQkJPFR5cGVBbGlhcyBOYW1lPSJFdmFsdWF0b3IiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRXhwcmVzc2lvbkV2YWx1YXRvclZhbHVlUHJvdmlkZXIsTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCgkJCTwvVHlwZXM+DQoJCQk8Q2FwdGlvbj5BZGQgY2xhc3Mgd2l0aCBNYWluIG1ldGhvZDwvQ2FwdGlvbj4NCgkJCTxIb3N0RGF0YT4NCgkJCQk8SWNvbiBJRD0iNjMwIiAvPg0KCQkJCTxDb21tYW5kQmFyIE5hbWU9IlByb2plY3QiIC8+DQoJCQk8L0hvc3REYXRhPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQ3VycmVudFByb2plY3QiIFR5cGU9IkVudkRURS5Qcm9qZWN0LCBFbnZEVEUsIFZlcnNpb249OC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhIj4NCgkJCQkJPFZhbHVlUHJvdmlkZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5WYWx1ZVByb3ZpZGVycy5GaXJzdFNlbGVjdGVkUHJvamVjdCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJCTxBcmd1bWVudCBOYW1lPSJDbGFzc05hbWUiPg0KCQkJCQk8Q29udmVydGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQ29udmVydGVycy5Db2RlSWRlbnRpZmllclN0cmluZ0NvbnZlcnRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIvPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlRhcmdldEZpbGUiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJFdmFsdWF0b3IiDQoJCQkJCQkJCQkgRXhwcmVzc2lvbj0iJChDbGFzc05hbWUpLmNzIj4NCgkJCQkJCTxNb25pdG9yQXJndW1lbnQgTmFtZT0iQ2xhc3NOYW1lIiAvPg0KCQkJCQk8L1ZhbHVlUHJvdmlkZXI+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCQk8QXJndW1lbnQgTmFtZT0iVGFyZ2V0TmFtZXNwYWNlIj4NCgkJCQkJPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuTmFtZXNwYWNlU3RyaW5nQ29udmVydGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ii8+DQoJCQkJCTxWYWx1ZVByb3ZpZGVyIFR5cGU9IkV2YWx1YXRvciINCgkJCQkJCQkJCSBFeHByZXNzaW9uPSIkKEN1cnJlbnRQcm9qZWN0LlByb3BlcnRpZXMuSXRlbSgnRGVmYXVsdE5hbWVzcGFjZScpLlZhbHVlKSIgLz4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJCTxBcmd1bWVudCBOYW1lPSJIZWxsb01lc3NhZ2UiPg0KCQkJCQk8Q29udmVydGVyIFR5cGU9IiRQYWNrYWdlTmFtZXNwYWNlJC5Db252ZXJ0ZXJzLkhlbGxvV29ybGRDb252ZXJ0ZXIsICRQYWNrYWdlTmFtZSQiIC8+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJCTxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KCQkJCQk8UGFnZXM+DQoJCQkJCQk8UGFnZT4NCgkJCQkJCQk8VGl0bGU+SGVsbG8gV29ybGQ8L1RpdGxlPg0KCQkJCQkJCTxGaWVsZHM+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IkNsYXNzTmFtZSIgTGFiZWw9IkNsYXNzIE5hbWUiIC8+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IlRhcmdldE5hbWVzcGFjZSIgTGFiZWw9Ik5hbWVzcGFjZSIgLz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iSGVsbG9NZXNzYWdlIiBMYWJlbD0iTWVzc2FnZSIgLz4NCgkJCQkJCQk8L0ZpZWxkcz4NCgkJCQkJCTwvUGFnZT4NCgkJCQkJPC9QYWdlcz4NCgkJCQk8L1dpemFyZD4NCgkJCTwvR2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkdlbmVyYXRlTWFpbkNsYXNzIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuVGVtcGxhdGVzLlRleHRUZW1wbGF0ZUFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSINCgkJCQkJCVRlbXBsYXRlPSJUZXh0XFByb2dyYW0uY3MudDQiPg0KCQkJCQk8SW5wdXQgTmFtZT0iSGVsbG8iIFJlY2lwZUFyZ3VtZW50PSJIZWxsb01lc3NhZ2UiIC8+DQoJCQkJCTxJbnB1dCBOYW1lPSJDbGFzc05hbWUiIFJlY2lwZUFyZ3VtZW50PSJDbGFzc05hbWUiLz4NCgkJCQkJPElucHV0IE5hbWU9IlRhcmdldE5hbWVzcGFjZSIgUmVjaXBlQXJndW1lbnQ9IlRhcmdldE5hbWVzcGFjZSIvPg0KCQkJCQk8T3V0cHV0IE5hbWU9IkNvbnRlbnQiIC8+DQoJCQkJPC9BY3Rpb24+DQoJCQkJPEFjdGlvbiBOYW1lPSJBZGRNYWluQ2xhc3MiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQWN0aW9ucy5BZGRJdGVtRnJvbVN0cmluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSINCgkJCQkJCU9wZW49InRydWUiPg0KCQkJCQk8IS0tU2hvd3MgaG93IHRvIHNwZWNpZnkgYSBwcm9wZXJ0eSBhcyBhIGZpeGVkIHZhbHVlIGluIGNvbmZpZy0tPg0KCQkJCQk8SW5wdXQgTmFtZT0iQ29udGVudCIgQWN0aW9uT3V0cHV0PSJHZW5lcmF0ZU1haW5DbGFzcy5Db250ZW50IiAvPg0KCQkJCQk8SW5wdXQgTmFtZT0iVGFyZ2V0RmlsZU5hbWUiIFJlY2lwZUFyZ3VtZW50PSJUYXJnZXRGaWxlIiAvPg0KCQkJCQk8SW5wdXQgTmFtZT0iUHJvamVjdCIgUmVjaXBlQXJndW1lbnQ9IkN1cnJlbnRQcm9qZWN0IiAvPg0KCQkJCTwvQWN0aW9uPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgk8L1JlY2lwZXM+DQo8L0d1aWRhbmNlUGFja2FnZT4NCg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>11</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/GuidancePackages/Shadowfax/Microsoft.Practices.Shadowfax.GuidancePackage.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>8</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/Practices/Common/ReflectionHelper.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>30</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Common.csproj</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>7</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/GuidancePackageConfig.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>3</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/GuidancePackageConfig.Initializer.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">dXNpbmcgU3lzdGVtOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7DQp1c2luZyBTeXN0ZW0uR2xvYmFsaXphdGlvbjsNCnVzaW5nIFN5c3RlbS5YbWwuU2VyaWFsaXphdGlvbjsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9uczsNCg0KbmFtZXNwYWNlIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkNvbmZpZ3VyYXRpb24NCnsNCgkvLy8gPHN1bW1hcnk+DQoJLy8vIFJvb3Qgb2YgdGhlIGNvbmZpZ3VyYXRpb24gaGllcmFyY2h5IGZvciBndWlkYW5jZSBwYWNrYWdlcy4NCgkvLy8gPC9zdW1tYXJ5Pg0KCXB1YmxpYyBwYXJ0aWFsIGNsYXNzIEd1aWRhbmNlUGFja2FnZQ0KCXsNCgkJLy8vIDxzdW1tYXJ5Pg0KCQkvLy8gTmFtZSBvZiB0aGUgZW1iZWRkZWQgcmVzb3VyY2UgdGhhdCBjb250YWlucyB0aGUgc2NoZW1hIGZvciBjb25maWd1cmF0aW9uIHZhbGlkYXRpb24uDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBjb25zdCBzdHJpbmcgU2NoZW1hUmVzb3VyY2VOYW1lID0gIk1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkNvbmZpZ3VyYXRpb24uR3VpZGFuY2VQYWNrYWdlQ29uZmlnLnhzZCI7DQoNCgkJW05vblNlcmlhbGl6ZWRdDQoJCURpY3Rpb25hcnk8c3RyaW5nLCBSZWNpcGU+IGluZGV4ZWRSZWNpcGVzOw0KDQoJCXByaXZhdGUgRGljdGlvbmFyeTxzdHJpbmcsIFJlY2lwZT4gSW5kZXhlZFJlY2lwZXMNCgkJew0KCQkJZ2V0DQoJCQl7DQoJCQkJaWYgKGluZGV4ZWRSZWNpcGVzID09IG51bGwpDQoJCQkJew0KCQkJCQlpbmRleGVkUmVjaXBlcyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgUmVjaXBlPigpOw0KCQkJCQlpZiAocmVjaXBlc0ZpZWxkICE9IG51bGwpDQoJCQkJCXsNCgkJCQkJCWZvcmVhY2ggKFJlY2lwZSByZWNpcGUgaW4gcmVjaXBlc0ZpZWxkKQ0KCQkJCQkJew0KCQkJCQkJCWluZGV4ZWRSZWNpcGVzLkFkZChyZWNpcGUuTmFtZSwgcmVjaXBlKTsNCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCX0NCg0KCQkJCXJldHVybiBpbmRleGVkUmVjaXBlczsNCgkJCX0NCgkJfQ0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIEFjY2Vzc2VzIGEgcmVjaXBlIGNvbmZpZ3VyYXRpb24gZWxlbWVudCBieSBuYW1lLg0KCQkvLy8gPC9zdW1tYXJ5Pg0KCQkvLy8gPHBhcmFtIG5hbWU9InJlY2lwZU5hbWUiPk5hbWUgb2YgdGhlIHJlY2lwZSB0byByZXRyaWV2ZSBjb25maWd1cmF0aW9uIGZvci48L3BhcmFtPg0KCQkvLy8gPGV4Y2VwdGlvbiBjcmVmPSJLZXlOb3RGb3VuZEV4Y2VwdGlvbiI+VGhlIG5hbWUgb2YgdGhlIHJlY2lwZSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgY29uZmlndXJhdGlvbiBmaWxlLjwvZXhjZXB0aW9uPg0KCQlwdWJsaWMgUmVjaXBlIHRoaXNbc3RyaW5nIHJlY2lwZU5hbWVdDQoJCXsNCgkJCWdldA0KCQkJew0KCQkJCWlmICghSW5kZXhlZFJlY2lwZXMuQ29udGFpbnNLZXkocmVjaXBlTmFtZSkpDQoJCQkJew0KCQkJCQl0aHJvdyBuZXcgQXJndW1lbnRFeGNlcHRpb24oU3RyaW5nLkZvcm1hdCgNCgkJCQkJCUN1bHR1cmVJbmZvLkN1cnJlbnRDdWx0dXJlLA0KCQkJCQkJUHJvcGVydGllcy5SZXNvdXJjZXMuUmVjaXBlX1VuZGVmaW5lZCwNCgkJCQkJCXJlY2lwZU5hbWUsIHRoaXMuR3VpZCkpOw0KCQkJCX0NCgkJCQlyZXR1cm4gSW5kZXhlZFJlY2lwZXNbcmVjaXBlTmFtZV07DQoJCQl9DQoJCX0NCg0KCQkvLy8gPHN1bW1hcnk+DQoJCS8vLyBXaGV0aGVyIHRoZSBwYWNrYWdlIGNvbnRhaW5zIHRoZSBnaXZlbiByZWNpcGUuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBib29sIENvbnRhaW5zKHN0cmluZyByZWNpcGVOYW1lKQ0KCQl7DQoJCQlyZXR1cm4gSW5kZXhlZFJlY2lwZXMuQ29udGFpbnNLZXkocmVjaXBlTmFtZSk7DQoJCX0NCgl9DQoNCgkvLy8gPHJlbWFya3MvPg0KCXB1YmxpYyBwYXJ0aWFsIGNsYXNzIFJlY2lwZQ0KCXsNCgkJW05vblNlcmlhbGl6ZWRdDQoJCURpY3Rpb25hcnk8c3RyaW5nLCBBcmd1bWVudD4gaW5kZXhlZEFyZ3VtZW50czsNCg0KCQkvLy8gPHN1bW1hcnk+DQoJCS8vLyBHZXRzIHRoZSBhcmd1bWVudHMgaW5kZXhlZCBieSBuYW1lLg0KCQkvLy8gPC9zdW1tYXJ5Pg0KCQlbWG1sSWdub3JlXQ0KCQlwdWJsaWMgRGljdGlvbmFyeTxzdHJpbmcsIEFyZ3VtZW50PiBBcmd1bWVudHNCeU5hbWUNCgkJew0KCQkJZ2V0DQoJCQl7DQoJCQkJaWYgKGluZGV4ZWRBcmd1bWVudHMgPT0gbnVsbCkNCgkJCQl7DQoJCQkJCWluZGV4ZWRBcmd1bWVudHMgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIEFyZ3VtZW50PigpOw0KCQkJCQlpZiAoYXJndW1lbnRzRmllbGQgIT0gbnVsbCkNCgkJCQkJew0KCQkJCQkJZm9yZWFjaCAoQXJndW1lbnQgYXJnIGluIGFyZ3VtZW50c0ZpZWxkKQ0KCQkJCQkJew0KCQkJCQkJCWluZGV4ZWRBcmd1bWVudHMuQWRkKGFyZy5OYW1lLCBhcmcpOw0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJfQ0KDQoJCQkJcmV0dXJuIGluZGV4ZWRBcmd1bWVudHM7DQoJCQl9DQoJCX0NCg0KCQlbTm9uU2VyaWFsaXplZF0NCgkJSGFzaHRhYmxlIGluZGV4ZWRBbGlhc2VzOw0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIEdldHMgdGhlIHR5cGUgYWxpYXNlcyBpbmRleGVkIGJ5IG5hbWUuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCVtYbWxJZ25vcmVdDQoJCXB1YmxpYyBJRGljdGlvbmFyeSBUeXBlQWxpYXNlc0J5TmFtZQ0KCQl7DQoJCQlnZXQNCgkJCXsNCgkJCQlpZiAoaW5kZXhlZEFsaWFzZXMgPT0gbnVsbCkNCgkJCQl7DQoJCQkJCWluZGV4ZWRBbGlhc2VzID0gbmV3IEhhc2h0YWJsZSgpOw0KCQkJCQlpZiAodHlwZXNGaWVsZCAhPSBudWxsKQ0KCQkJCQl7DQoJCQkJCQlmb3JlYWNoIChUeXBlQWxpYXMgYWxpYXMgaW4gdHlwZXNGaWVsZCkNCgkJCQkJCXsNCgkJCQkJCQlpbmRleGVkQWxpYXNlcy5BZGQoYWxpYXMuTmFtZSwgYWxpYXMuVHlwZSk7DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQl9DQoNCgkJCQlyZXR1cm4gaW5kZXhlZEFsaWFzZXM7DQoJCQl9DQoJCX0NCgl9DQoNCgkvLy8gPHJlbWFya3MvPg0KCXB1YmxpYyBwYXJ0aWFsIGNsYXNzIFJlY2lwZUFjdGlvbnMNCgl7DQoJCVtOb25TZXJpYWxpemVkXQ0KCQlEaWN0aW9uYXJ5PHN0cmluZywgQWN0aW9uPiBpbmRleGVkQWN0aW9uczsNCg0KCQkvLy8gPHJlbWFya3MvPg0KCQlwdWJsaWMgUmVjaXBlQWN0aW9ucygpDQoJCXsNCgkJCWFjdGlvbkZpZWxkID0gbmV3IEFjdGlvblswXTsNCgkJfQ0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIFJldHJpZXZlcyBhbGwgdGhlIGFjdGlvbnMgaW5kZXhlZCBieSB0aGVpciBuYW1lLg0KCQkvLy8gPC9zdW1tYXJ5Pg0KCQlwdWJsaWMgRGljdGlvbmFyeTxzdHJpbmcsIEFjdGlvbj4gR2V0SW5kZXhlZEFjdGlvbnMoKQ0KCQl7DQoJCQlpZiAoaW5kZXhlZEFjdGlvbnMgPT0gbnVsbCkNCgkJCXsNCgkJCQlpbmRleGVkQWN0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgQWN0aW9uPigpOw0KCQkJCWlmIChhY3Rpb25GaWVsZCAhPSBudWxsKQ0KCQkJCXsNCgkJCQkJZm9yZWFjaCAoQWN0aW9uIGFjdGlvbiBpbiBhY3Rpb25GaWVsZCkNCgkJCQkJew0KCQkJCQkJaW5kZXhlZEFjdGlvbnMuQWRkKGFjdGlvbi5OYW1lLCBhY3Rpb24pOw0KCQkJCQl9DQoJCQkJfQ0KCQkJfQ0KDQoJCQlyZXR1cm4gaW5kZXhlZEFjdGlvbnM7DQoJCX0NCg0KCQkvLy8gPHN1bW1hcnk+DQoJCS8vLyBSZXRyaWV2ZXMgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBhY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gbmFtZS4NCgkJLy8vIDwvc3VtbWFyeT4NCgkJcHVibGljIEFjdGlvbiB0aGlzW3N0cmluZyBhY3Rpb25OYW1lXQ0KCQl7DQoJCQlnZXQgeyByZXR1cm4gR2V0SW5kZXhlZEFjdGlvbnMoKVthY3Rpb25OYW1lXTsgfQ0KCQl9DQoJfQ0KfQ0K</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>4</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/GuidancePackageConfig.Serialization.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>9</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/GuidancePackageConfig.xsd</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>2</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/ManifestConfig.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>2</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/ManifestConfig.Serialization.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>2</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/ManifestConfig.xsd</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjw/eG1sLXN0eWxlc2hlZXQgaHJlZj0iSVBHU2NoZW1hLnhzbHQiIHR5cGU9InRleHQveHNsIj8+DQo8eHM6c2NoZW1hIHRhcmdldE5hbWVzcGFjZT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LW1hbmlmZXN0IiBlbGVtZW50Rm9ybURlZmF1bHQ9InF1YWxpZmllZCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1tYW5pZmVzdCIgeG1sbnM6Z2F4PSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtbWFuaWZlc3QiIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6bXNkYXRhPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnhtbC1tc2RhdGEiPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJSZWNpcGVGcmFtZXdvcmsiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+DQogICAgICAgIE1hbmlmZXN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgaW5zdGFsbGVkIHBhY2thZ2VzLg0KICAgICAgICBTb21lIGF0dHJpYnV0ZSB2YWx1ZXMgd2lsbCBiZSBzcGVjaWZpZWQgaW4gYSBwZXItdXNlciBtYW5pZmVzdC4NCiAgICAgIDwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOmNvbXBsZXhUeXBlPg0KICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJIb3N0cyI+DQogICAgICAgICAgPHhzOmNvbXBsZXhUeXBlPg0KICAgICAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCByZWY9Ikhvc3QiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiLz4NCiAgICAgICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICAgICAgPC94czpjb21wbGV4VHlwZT4NCiAgICAgICAgPC94czplbGVtZW50Pg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJHdWlkYW5jZVBhY2thZ2VzIj4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5cGU+DQogICAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IHJlZj0iR3VpZGFuY2VQYWNrYWdlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIi8+DQogICAgICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgICAgIDwveHM6Y29tcGxleFR5cGU+DQogICAgICAgIDwveHM6ZWxlbWVudD4NCiAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8eHM6YXR0cmlidXRlIG5hbWU9IlNjaGVtYVZlcnNpb24iIHR5cGU9InhzOnN0cmluZyIgdXNlPSJyZXF1aXJlZCIgZml4ZWQ9IjEuMCI+DQogICAgICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgICAgIDx4czpkb2N1bWVudGF0aW9uPg0KICAgICAgICAgICAgRml4ZWQgdmVyc2lvbiBmb3IgdGhlIGZyYW1ld29yayBtYW5pZmVzdCwgd2hpY2ggbXVzdCBiZSB0aGUgc3RyaW5nICIxLjAiDQogICAgICAgICAgPC94czpkb2N1bWVudGF0aW9uPg0KICAgICAgICA8L3hzOmFubm90YXRpb24+DQogICAgICA8L3hzOmF0dHJpYnV0ZT4NCiAgICAgIDx4czphdHRyaWJ1dGUgbmFtZT0iVHJhY2VMZXZlbCIgdHlwZT0iVHJhY2VMZXZlbCIgZGVmYXVsdD0iRXJyb3IiPg0KICAgICAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgICAgICA8eHM6ZG9jdW1lbnRhdGlvbj4NCiAgICAgICAgICAgIEFsbG93cyBzcGVjaWZpY2F0aW9uIG9mIHRoZSB0cmFjZSBsZXZlbCB0byB1c2UgZm9yIHRoZSBmcmFtZXdvcmsgYW5kDQogICAgICAgICAgICBhbGwgcGFja2FnZXMgKGV4Y2VwdCB3aGVuIG92ZXJyaWRlbikuDQogICAgICAgICAgPC94czpkb2N1bWVudGF0aW9uPg0KICAgICAgICA8L3hzOmFubm90YXRpb24+DQogICAgICA8L3hzOmF0dHJpYnV0ZT4NCiAgICA8L3hzOmNvbXBsZXhUeXBlPg0KICAgIDx4czprZXkgbmFtZT0iSG9zdE5hbWVLZXkiPg0KICAgICAgPHhzOmFubm90YXRpb24+DQogICAgICAgIDx4czpkb2N1bWVudGF0aW9uPg0KICAgICAgICAgIFJlY2lwZSBuYW1lcyBtdXN0IGJlIHVuaXF1ZS4NCiAgICAgICAgPC94czpkb2N1bWVudGF0aW9uPg0KICAgICAgPC94czphbm5vdGF0aW9uPg0KICAgICAgPHhzOnNlbGVjdG9yIHhwYXRoPSJnYXg6SG9zdHMvZ2F4Okhvc3QiIC8+DQogICAgICA8eHM6ZmllbGQgeHBhdGg9IkBOYW1lIiAvPg0KICAgIDwveHM6a2V5Pg0KICAgIDx4czp1bmlxdWUgbmFtZT0iUGFja2FnZUd1aWRLZXkiPg0KICAgICAgPHhzOmFubm90YXRpb24+DQogICAgICAgIDx4czpkb2N1bWVudGF0aW9uPg0KICAgICAgICAgIFJlY2lwZSBwYWNrYWdlIG5hbWVzIG11c3QgYmUgdW5pcXVlLg0KICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+DQogICAgICA8L3hzOmFubm90YXRpb24+DQogICAgICA8eHM6c2VsZWN0b3IgeHBhdGg9ImdheDpHdWlkYW5jZXMvZ2F4Okd1aWRhbmNlUGFja2FnZSIgLz4NCiAgICAgIDx4czpmaWVsZCB4cGF0aD0iQEd1aWQiIC8+DQogICAgPC94czp1bmlxdWU+DQogIDwveHM6ZWxlbWVudD4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iR3VpZGFuY2VQYWNrYWdlIj4NCiAgICA8eHM6Y29tcGxleFR5cGU+DQoJCQk8eHM6YXR0cmlidXRlIG5hbWU9Ik5hbWUiIHVzZT0ib3B0aW9uYWwiPg0KCQkJCTx4czphbm5vdGF0aW9uPg0KCQkJCQk8eHM6ZG9jdW1lbnRhdGlvbj4NCgkJCQkJCURlcHJlY2F0ZWQgYXR0cmlidXR0ZSwgdXNlIEd1aWQgdG8gdW5pcXVlbHkgbmFtZSB5b3VyIHBhY2thZ2UNCgkJCQkJPC94czpkb2N1bWVudGF0aW9uPg0KCQkJCTwveHM6YW5ub3RhdGlvbj4NCgkJCTwveHM6YXR0cmlidXRlPg0KCQkJPHhzOmF0dHJpYnV0ZSBuYW1lPSJDYXB0aW9uIiB1c2U9InJlcXVpcmVkIj4NCiAgICAgICAgPHhzOmFubm90YXRpb24+DQogICAgICAgICAgPHhzOmRvY3VtZW50YXRpb24+DQogICAgICAgICAgICBGcmllbmRseSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgcGFja2FnZS4NCiAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+DQogICAgICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICAgICAgPHhzOnNpbXBsZVR5cGU+DQogICAgICAgICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+DQogICAgICAgICAgICA8eHM6bWluTGVuZ3RoIHZhbHVlPSIxIi8+DQogICAgICAgICAgPC94czpyZXN0cmljdGlvbj4NCiAgICAgICAgPC94czpzaW1wbGVUeXBlPg0KICAgICAgPC94czphdHRyaWJ1dGU+DQogICAgICA8eHM6YXR0cmlidXRlIG5hbWU9IkRlc2NyaXB0aW9uIiB0eXBlPSJ4czpzdHJpbmciPg0KICAgICAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgICAgICA8eHM6ZG9jdW1lbnRhdGlvbj4NCiAgICAgICAgICAgIEZ1bGwtbGVuZ3RoIGRlc2NyaXB0aW9uIG9mIHRoZSBwdXJwb3NlIG9mIHRoZSBwYWNrYWdlLCBpdHMgZmVhdHVyZXMgYW5kIHJlcXVpcmVtZW50cy4NCiAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+DQogICAgICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICAgIDwveHM6YXR0cmlidXRlPg0KICAgICAgPHhzOmF0dHJpYnV0ZSBuYW1lPSJWZXJzaW9uIiB1c2U9InJlcXVpcmVkIj4NCiAgICAgICAgPHhzOmFubm90YXRpb24+DQogICAgICAgICAgPHhzOmRvY3VtZW50YXRpb24+DQogICAgICAgICAgICBSZXF1aXJlZCBwYWNrYWdlIHZlcnNpb24gZm9yIHNpZGUgYnkgc2lkZSBwYWNrYWdlIGluc3RhbGxhdGlvbi4gQXMgdGhlDQogICAgICAgICAgICBwYWNrYWdlIHNjaGVtYSBzcGVjaWZpZXMgYSBkZWZhdWx0IHZhbHVlIGZvciB0aGlzIGF0dHJpYnV0ZSwgd2Ugd2lsbA0KICAgICAgICAgICAgYWx3YXlzIGhhdmUgYSB2YWx1ZSBoZXJlLCBoZW5jZSBpdCdzIG1hZGUgcmVxdWlyZWQuDQogICAgICAgICAgPC94czpkb2N1bWVudGF0aW9uPg0KICAgICAgICA8L3hzOmFubm90YXRpb24+DQogICAgICAgIDx4czpzaW1wbGVUeXBlPg0KICAgICAgICAgIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPg0KICAgICAgICAgICAgPHhzOm1pbkxlbmd0aCB2YWx1ZT0iMSIvPg0KICAgICAgICAgIDwveHM6cmVzdHJpY3Rpb24+DQogICAgICAgIDwveHM6c2ltcGxlVHlwZT4NCiAgICAgIDwveHM6YXR0cmlidXRlPg0KICAgICAgPHhzOmF0dHJpYnV0ZSBuYW1lPSJIb3N0IiB0eXBlPSJ4czpzdHJpbmciIGRlZmF1bHQ9IlZpc3VhbFN0dWRpbyI+DQogICAgICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgICAgIDx4czpkb2N1bWVudGF0aW9uPg0KICAgICAgICAgICAgPHN1bW1hcnkgeG1sbnM9IiI+QXJiaXRyYXJ5IG5hbWUgb2YgdGhlIGhvc3QgdGhpcyBwYWNrYWdlIHdpbGwgcnVuIG9uLiA8L3N1bW1hcnk+DQogICAgICAgICAgICA8cmVtYXJrcyB4bWxucz0iIj4NCiAgICAgICAgICAgICAgVGhlIHJlY2lwZSBtYW5hZ2VyLCB1cG9uIGJlaW5nIGxvYWRlZCBvbiBhIGhvc3QsIGdldHMgdGhlIGlkZW50aWZpZXIgZm9yDQogICAgICAgICAgICAgIHRoZSBraW5kIG9mIGhvc3QgaXQncyBiZWluZyBsb2FkZWQgaW50by4gVGhpcyBuYW1lIGlzIHVzZWQgdG8gcmVzb2x2ZQ0KICAgICAgICAgICAgICB0aGUgcGFja2FnZXMgdGhhdCBjYW4gYmUgbG9hZGVkLiBGb3IgZXhhbXBsZSwgdGhlIFZpc3VhbCBTdHVkaW8gaW50ZWdyYXRpb24NCiAgICAgICAgICAgICAgcGFja2FnZSBsb2FkcyB0aGUgbWFuYWdlciB3aXRoIGEgaG9zdCBuYW1lIG9mICJWaXN1YWxTdHVkaW8iLCB3aGljaCBpcw0KICAgICAgICAgICAgICBhbHNvIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgYXR0cmlidXRlIGlmIGl0J3Mgb21pdHRlZC4NCiAgICAgICAgICAgIDwvcmVtYXJrcz4NCiAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+DQogICAgICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICAgIDwveHM6YXR0cmlidXRlPg0KICAgICAgPHhzOmF0dHJpYnV0ZSBuYW1lPSJHdWlkIiB1c2U9InJlcXVpcmVkIj4NCiAgICAgICAgPHhzOmFubm90YXRpb24+DQogICAgICAgICAgPHhzOmRvY3VtZW50YXRpb24+DQogICAgICAgICAgICBBIEdVSUQgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBwYWNrYWdlLiANCgkJCQkJCVRoZSB2YWx1ZSBtdXN0IG5vdCBjb250YWluIGVuY2xvc2luZyBicmFja2V0cyBvciBwYXJlbnRoZXNpcy4NCiAgICAgICAgICAgIEl0IG11c3QgYWxzbyBiZSB1bmlxdWUgYWNyb3NzIGFsbCBpbnN0YWxsZWQgcGFja2FnZXMuDQogICAgICAgICAgPC94czpkb2N1bWVudGF0aW9uPg0KICAgICAgICA8L3hzOmFubm90YXRpb24+DQogICAgICAgIDx4czpzaW1wbGVUeXBlPg0KICAgICAgICAgIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPg0KICAgICAgICAgICAgPHhzOnBhdHRlcm4gdmFsdWU9Il5bMC05YS1mQS1GXXs4fS0oWzAtOWEtZkEtRl17NH0tKXszfVswLTlhLWZBLUZdezEyfSQiIC8+DQogICAgICAgICAgPC94czpyZXN0cmljdGlvbj4NCiAgICAgICAgPC94czpzaW1wbGVUeXBlPg0KICAgICAgPC94czphdHRyaWJ1dGU+DQogICAgICA8eHM6YXR0cmlidXRlIG5hbWU9IkNvbmZpZ3VyYXRpb25GaWxlIiB0eXBlPSJ4czpzdHJpbmciIHVzZT0icmVxdWlyZWQiPg0KICAgICAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgICAgICA8eHM6ZG9jdW1lbnRhdGlvbj4NCiAgICAgICAgICAgIFRoZSBmdWxsIHBhdGggb2YgdGhlIFhNTCBmaWxlIGNvbnRhaW5pbmcgdGhlIHBhY2thZ2UgY29uZmlndXJhdGlvbi4NCiAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+DQogICAgICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICAgIDwveHM6YXR0cmlidXRlPg0KICAgICAgPHhzOmF0dHJpYnV0ZSBuYW1lPSJUaW1lc3RhbXAiIHR5cGU9InhzOnN0cmluZyIgdXNlPSJyZXF1aXJlZCI+DQogICAgICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgICAgIDx4czpkb2N1bWVudGF0aW9uPg0KICAgICAgICAgICAgU3RhbXAgb2YgdGhlIHBhY2thZ2UgY29uZmlndXJhdGlvbiB3aGVuIGluc3RhbGxhdGlvbiBvY2N1cnJlZC4NCiAgICAgICAgICA8L3hzOmRvY3VtZW50YXRpb24+DQogICAgICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICAgIDwveHM6YXR0cmlidXRlPg0KICAgIDwveHM6Y29tcGxleFR5cGU+DQogIDwveHM6ZWxlbWVudD4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iSG9zdCI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj4NCiAgICAgICAgQSBob3N0IHRoYXQgaGFzIGJlZW4gcmVnaXN0ZXJlZCB3aXRoIHRoZSBmcmFtZXdvcmsuDQogICAgICA8L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpjb21wbGV4VHlwZT4NCiAgICAgIDx4czphdHRyaWJ1dGUgbmFtZT0iTmFtZSIgdHlwZT0ieHM6c3RyaW5nIiAvPg0KICAgICAgPHhzOmF0dHJpYnV0ZSBuYW1lPSJJbnN0YWxsZXJUeXBlIiB0eXBlPSJ4czpzdHJpbmciIC8+DQogICAgPC94czpjb21wbGV4VHlwZT4NCiAgPC94czplbGVtZW50Pg0KICA8eHM6c2ltcGxlVHlwZSBuYW1lPSJUcmFjZUxldmVsIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPg0KICAgICAgICBTZWUgLk5FVCBGcmFtZXdvcmsgU3lzdGVtLkRpYWdub3N0aWNzLlRyYWNlTGV2ZWwgZW51bWVyYXRpb24gZG9jdW1lbnRhdGlvbi4NCiAgICAgIDwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkVycm9yIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJJbmZvIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJPZmYiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ildhcm5pbmciIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlZlcmJvc2UiIC8+DQogICAgPC94czpyZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KPC94czpzY2hlbWE+</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>2</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Common/Configuration/SchemaInfo.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/I3JlZ2lvbiBVc2luZyBkaXJlY3RpdmVzDQoNCnVzaW5nIFN5c3RlbTsNCnVzaW5nIFN5c3RlbS5UZXh0Ow0KDQojZW5kcmVnaW9uDQoNCm5hbWVzcGFjZSBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5Db25maWd1cmF0aW9uDQp7DQoJLy8vIDxzdW1tYXJ5Pg0KCS8vLyBFeHBvc2VzIHNjaGVtYSBpbmZvcm1hdGlvbiBmb3IgdGhlIGZyYW1ld29yayBjb25maWd1cmF0aW9uLg0KCS8vLyA8L3N1bW1hcnk+DQoJcHVibGljIHNlYWxlZCBjbGFzcyBTY2hlbWFJbmZvDQoJew0KCQlwcml2YXRlIFNjaGVtYUluZm8oKSB7fQ0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIE5hbWVzcGFjZSBvZiBwYWNrYWdlIGNvbmZpZ3VyYXRpb24gZmlsZXMuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBjb25zdCBzdHJpbmcgUGFja2FnZU5hbWVzcGFjZSA9ICJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSI7DQoNCgkJLy8vIDxzdW1tYXJ5Pg0KCQkvLy8gRGVmYXVsdCBuYW1lc3BhY2UgdXNlZCBpbiBlbGVtZW50cyBhbmQgcXVlcmllcywgd2hpY2ggZXF1YWxzICJnYXgiLg0KCQkvLy8gPC9zdW1tYXJ5Pg0KCQlwdWJsaWMgY29uc3Qgc3RyaW5nIFByZWZpeCA9ICJnYXgiOw0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIE5hbWVzcGFjZSBvZiBtYW5pZmVzdCBmaWxlcy4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIGNvbnN0IHN0cmluZyBNYW5pZmVzdE5hbWVzcGFjZSA9ICJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtbWFuaWZlc3QiOw0KICAgIH0NCg0KICAgIC8vLyA8c3VtbWFyeT4NCiAgICAvLy8gRWxlbWVudCBuYW1lcyB1c2VkIGluIHRoZSBjb25maWd1cmF0aW9uIHNjaGVtYS4NCiAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgIHB1YmxpYyBzZWFsZWQgY2xhc3MgRWxlbWVudE5hbWVzDQogICAgew0KICAgICAgICBwcml2YXRlIEVsZW1lbnROYW1lcygpIHsgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFJvb3QgZWxlbWVudCBvZiB0aGUgY29uZmlndXJhdGlvbiBmb3IgYSBwYWNrYWdlLCBhbmQgdGhlIA0KCQkvLy8gbm9kZSBpbiB0aGUgbWFuaWZlc3Qgc3BlY2lmeWluZyBjb25maWd1cmF0aW9uIGZvciBhIHBhY2thZ2UuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIHB1YmxpYyBjb25zdCBzdHJpbmcgR3VpZGFuY2VQYWNrYWdlID0gIkd1aWRhbmNlUGFja2FnZSI7DQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIERlZmluZXMgYSBob3N0IGJpbmRpbmcgbm9kZS4NCgkJLy8vIDwvc3VtbWFyeT4NCgkJcHVibGljIGNvbnN0IHN0cmluZyBIb3N0ID0gIkhvc3QiOw0KICAgIH0NCg0KICAgIC8vLyA8c3VtbWFyeT4NCiAgICAvLy8gQXR0cmlidXRlIG5hbWVzIHVzZWQgaW4gdGhlIGNvbmZpZ3VyYXRpb24gc2NoZW1hLg0KICAgIC8vLyA8L3N1bW1hcnk+DQogICAgcHVibGljIHNlYWxlZCBjbGFzcyBBdHRyaWJ1dGVOYW1lcw0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSBBdHRyaWJ1dGVOYW1lcygpIHsgfQ0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIFRoZSBuYW1lIG9mIHRoZSBIb3N0DQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBjb25zdCBzdHJpbmcgTmFtZSA9ICJOYW1lIjsNCgkJLy8vIDxzdW1tYXJ5Pg0KCQkvLy8gVmVyc2lvbiBvZiBhbiBlbGVtZW50IG9yIGRvY3VtZW50Lg0KCQkvLy8gPC9zdW1tYXJ5Pg0KCQlwdWJsaWMgY29uc3Qgc3RyaW5nIFZlcnNpb24gPSAiVmVyc2lvbiI7DQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIERpc3BsYXkgbmFtZSBvZiBhIHBhY2thZ2UuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBjb25zdCBzdHJpbmcgQ2FwdGlvbiA9ICJDYXB0aW9uIjsNCgkJLy8vIDxzdW1tYXJ5Pg0KCQkvLy8gRnVsbCBkZXNjcmlwdGlvbiBvZiBhIHBhY2thZ2UuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBjb25zdCBzdHJpbmcgRGVzY3JpcHRpb24gPSAiRGVzY3JpcHRpb24iOw0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBUaW1lc3RhbXAgb2YgdGhlIHBhY2thZ2UgY29uZmlndXJhdGlvbiBmaWxlIGF0IGluc3RhbGxhdGlvbiB0aW1lLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBwdWJsaWMgY29uc3Qgc3RyaW5nIFRpbWVzdGFtcCA9ICJUaW1lc3RhbXAiOw0KICAgICAgICAvLy8gPHN1bW1hcnk+DQoJCS8vLyBMZXZlbCBvZiBpbmZvcm1hdGlvbiB0cmFjaW5nIGZvciBhIHBhY2thZ2Ugb3IgdGhlIGZyYW1ld29yay4NCgkJLy8vIDwvc3VtbWFyeT4NCgkJcHVibGljIGNvbnN0IHN0cmluZyBUcmFjZUxldmVsID0gIlRyYWNlTGV2ZWwiOw0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyBPcHRpb25hbCB1bmlxdWUgaWRlbnRpZmllciBmb3IgYSBwYWNrYWdlIG9uIGEgaG9zdC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIGNvbnN0IHN0cmluZyBHdWlkID0gIkd1aWQiOw0KICAgICAgICAvLy8gPHN1bW1hcnk+DQoJCS8vLyBIb3N0IHdoZXJlIGEgcGFja2FnZSB3aWxsIHJ1biBvbi4NCgkJLy8vIDwvc3VtbWFyeT4NCgkJcHVibGljIGNvbnN0IHN0cmluZyBIb3N0ID0gIkhvc3QiOw0KCQkvLy8gPHN1bW1hcnk+DQoJCS8vLyBMb2NhdGlvbiBvZiB0aGUgY29uZmlndXJhdGlvbiBmaWxlIGZvciBhIHBhY2thZ2UuDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBjb25zdCBzdHJpbmcgQ29uZmlndXJhdGlvbkZpbGUgPSAiQ29uZmlndXJhdGlvbkZpbGUiOw0KCQkvLy8gPHN1bW1hcnk+DQoJCS8vLyBBdHRyaWJ1dGUgb2YgdGhlIDxzZWUgY3JlZj0iRWxlbWVudE5hbWVzLkhvc3QiLz4gbm9kZSB0aGF0IHNwZWNpZmllcyB0aGUgDQoJCS8vLyB0eXBlIHRoYXQgcGVyZm9ybXMgaW5zdGFsbGF0aW9uIG9mIHBhY2thZ2VzIGluIHRoZSBob3N0Lg0KCQkvLy8gPC9zdW1tYXJ5Pg0KCQlwdWJsaWMgY29uc3Qgc3RyaW5nIEluc3RhbGxlclR5cGUgPSAiSW5zdGFsbGVyVHlwZSI7DQogICAgfQ0KfQ0K</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>17</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Framework/GuidancePackage.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>34</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Framework/ManifestInstaller.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>35</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Framework/RecipeManager.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>18</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/Framework/Services/AssetReferenceService.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>3</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/RecipeFramework/PackageManagement/EnableDisablePackages.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>37</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/VisualStudio/Package/CTC/CTCBuilder.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>27</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/VisualStudio/Package/RecipeFrameworkInstaller.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>20</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/VisualStudio/Package/Services/ReferenceRestoreService.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>19</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/VisualStudio/Package/SolutionPackagesContainer.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/I3JlZ2lvbiBVc2luZyBEaXJlY3RpdmVzDQoNCnVzaW5nIFN5c3RlbTsNCnVzaW5nIFN5c3RlbS5UZXh0Ow0KdXNpbmcgU3lzdGVtLklPOw0KdXNpbmcgU3lzdGVtLlhtbDsNCnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9uczsNCnVzaW5nIFN5c3RlbS5EaWFnbm9zdGljczsNCnVzaW5nIFN5c3RlbS5HbG9iYWxpemF0aW9uOw0KdXNpbmcgU3lzdGVtLldpbmRvd3MuRm9ybXM7DQp1c2luZyBTeXN0ZW0uQ29tcG9uZW50TW9kZWw7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCnVzaW5nIFN5c3RlbS5XaW5kb3dzLkZvcm1zLkRlc2lnbjsNCnVzaW5nIFN5c3RlbS5Db21wb25lbnRNb2RlbC5EZXNpZ247DQp1c2luZyBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uOw0KdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLlNwZWNpYWxpemVkOw0KdXNpbmcgU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzOw0KdXNpbmcgU3lzdGVtLlJ1bnRpbWUuU2VyaWFsaXphdGlvbi5Gb3JtYXR0ZXJzLkJpbmFyeTsNCg0KdXNpbmcgTWljcm9zb2Z0LldpbjMyOw0KdXNpbmcgTWljcm9zb2Z0LlZpc3VhbFN0dWRpbzsNCnVzaW5nIE1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uU2hlbGw7DQp1c2luZyBNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlNoZWxsLkludGVyb3A7DQp1c2luZyBNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLk9MRS5JbnRlcm9wOw0KdXNpbmcgRW52RFRFOw0KdXNpbmcgRW52RFRFODA7DQoNCnVzaW5nIE1pY3Jvc29mdC5QcmFjdGljZXMuQ29tbW9uOw0KdXNpbmcgTWljcm9zb2Z0LlByYWN0aWNlcy5Db21wb25lbnRNb2RlbDsNCnVzaW5nIE1pY3Jvc29mdC5QcmFjdGljZXMuQ29tbW9uLlNlcnZpY2VzOw0KdXNpbmcgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeTsNCnVzaW5nIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlNlcnZpY2VzOw0KdXNpbmcgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5FZGl0b3JzOw0KdXNpbmcgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLkNvbW1vbjsNCnVzaW5nIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5TZXJ2aWNlczsNCnVzaW5nIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZW1wbGF0ZXM7DQoNCg0KI2VuZHJlZ2lvbg0KDQpuYW1lc3BhY2UgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvDQp7DQoJW1NlcnZpY2VEZXBlbmRlbmN5KHR5cGVvZihJUmVjaXBlTWFuYWdlclNlcnZpY2UpKV0NCglbU2VydmljZURlcGVuZGVuY3kodHlwZW9mKElWc1NvbHV0aW9uKSldDQogICAgW1NlcnZpY2VEZXBlbmRlbmN5KHR5cGVvZihEVEUpKV0NCglbU2VydmljZURlcGVuZGVuY3kodHlwZW9mKElWc1RlbXBsYXRlc1NlcnZpY2UpKV0NCglpbnRlcm5hbCBzZWFsZWQgY2xhc3MgU29sdXRpb25QYWNrYWdlc0NvbnRhaW5lciA6IE1pY3Jvc29mdC5QcmFjdGljZXMuQ29tcG9uZW50TW9kZWwuU2VydmljZUNvbnRhaW5lciwgSUhvc3RTZXJ2aWNlLCBJVnNTb2x1dGlvbkV2ZW50cywgSVZzU29sdXRpb25FdmVudHM0LCBJUGVyc2lzdGVuY2VTZXJ2aWNlLCBJT2xlQ29tcG9uZW50IA0KCXsNCgkJI3JlZ2lvbiBGaWVsZHMNCg0KCQlJUmVjaXBlTWFuYWdlclNlcnZpY2UgcmVjaXBlTWFuYWdlcjsNCgkJT2xlTWVudUNvbW1hbmQgbWVudUNtZDsNCgkJdWludCBjb21wb25lbnRJRDsNCgkJSU9sZUNvbXBvbmVudE1hbmFnZXIgb2xlQ29tcG9uZW50TWFuYWdlcjsNCg0KCQkjcmVnaW9uIEV2ZW50IGhhbmRsZXJzDQoNCiAgICAgICAgLy8gU2VlIFZTV2hpZGJleSBidWcgIzQ0NTkzMCBvbiB3aHkgd2Uga2VlcCB0aGVzZSByZWZlcmVuY2VzLg0KCQlTb2x1dGlvbkV2ZW50cyBzb2x1dGlvbkV2ZW50czsNCgkJUHJvamVjdEl0ZW1zRXZlbnRzIHByb2plY3RJdGVtc0V2ZW50czsNCiAgICAgICAgUHJvamVjdEl0ZW1zRXZlbnRzIHNvbHV0aW9uSXRlbXNFdmVudHM7DQoNCgkJI2VuZHJlZ2lvbg0KDQoJCSNlbmRyZWdpb24NCg0KCQkjcmVnaW9uIERlZmF1bHQgY29uc3RydWN0b3INCg0KCQlwdWJsaWMgU29sdXRpb25QYWNrYWdlc0NvbnRhaW5lcigpOmJhc2UodHJ1ZSkNCgkJew0KCQkJdGhpcy5vbGVDb21wb25lbnRNYW5hZ2VyID0gbnVsbDsNCgkJCXRoaXMuY29tcG9uZW50SUQgPSAwOw0KICAgICAgICAgICAgdGhpcy5wYWNrYWdlUGVyc2lzdGVuY2VEYXRhID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLFBhY2thZ2VTdGF0ZT4oNyk7DQoJCQl0aGlzLnBhY2thZ2VzVG9QcmVzZXJ2ZSA9IG5ldyBBcnJheUxpc3QoKTsNCiAgICAgICAgICAgIEFkZFNlcnZpY2UodHlwZW9mKElQZXJzaXN0ZW5jZVNlcnZpY2UpLCB0aGlzKTsNCgkJfQ0KDQoJCSNlbmRyZWdpb24NCg0KCQkjcmVnaW9uIE92ZXJyaWRlcw0KDQoJCXByb3RlY3RlZCBvdmVycmlkZSB2b2lkIE9uU2l0ZWQoKQ0KCQl7DQoJCQliYXNlLk9uU2l0ZWQoKTsNCg0KICAgICAgICAgICAgLy9TZXR1cCBEVEUgRXZlbnRzDQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCgkJCQlvbGVDb21wb25lbnRNYW5hZ2VyID0gDQoJCQkJCShJT2xlQ29tcG9uZW50TWFuYWdlcilHZXRTZXJ2aWNlKHR5cGVvZihTT2xlQ29tcG9uZW50TWFuYWdlcikpOw0KCQkJCWlmIChvbGVDb21wb25lbnRNYW5hZ2VyICE9IG51bGwpDQoJCQkJew0KCQkJCQlPTEVDUklORk8gY3JpbmZvID0gbmV3IE9MRUNSSU5GTygpOw0KCQkJCQljcmluZm8uY2JTaXplID0gKHVpbnQpTWFyc2hhbC5TaXplT2YoY3JpbmZvKTsNCgkJCQkJY3JpbmZvLmdyZmNyZiA9ICh1aW50KShfT0xFQ1JGLm9sZWNyZk5lZWRJZGxlVGltZSB8IF9PTEVDUkYub2xlY3JmTmVlZFBlcmlvZGljSWRsZVRpbWUpOw0KCQkJCQljcmluZm8uZ3JmY2FkdmYgPSAodWludCkoX09MRUNBRFZGLm9sZWNhZHZmTW9kYWwgfCBfT0xFQ0FEVkYub2xlY2FkdmZSZWRyYXdPZmYgfCBfT0xFQ0FEVkYub2xlY2FkdmZXYXJuaW5nc09mZik7DQoJCQkJCWNyaW5mby51SWRsZVRpbWVJbnRlcnZhbCA9IDEwMDA7DQoJCQkJCW9sZUNvbXBvbmVudE1hbmFnZXIuRlJlZ2lzdGVyQ29tcG9uZW50KHRoaXMsDQoJCQkJCQluZXcgT0xFQ1JJTkZPW10geyBjcmluZm8gfSwNCgkJCQkJCW91dCB0aGlzLmNvbXBvbmVudElEKTsNCgkJCQl9DQoNCgkJCSAgICAvLyBBZGQgb3VyIGNvbW1hbmQgaGFuZGxlcnMgZm9yIG1lbnUgKGNvbW1hbmRzIG11c3QgZXhpc3QgaW4gdGhlIC5jdGMgZmlsZSkNCgkJCSAgICBPbGVNZW51Q29tbWFuZFNlcnZpY2UgbWNzID0gR2V0U2VydmljZSh0eXBlb2YoSU1lbnVDb21tYW5kU2VydmljZSksdHJ1ZSkgYXMgT2xlTWVudUNvbW1hbmRTZXJ2aWNlOw0KCQkJICAgIGlmIChtY3MgIT0gbnVsbCkNCgkJCSAgICB7DQoJCQkJICAgIENvbW1hbmRJRCBjbWQgPSBuZXcgQ29tbWFuZElEKENUQy5ndWlkUmVjaXBlTWFuYWdlckNtZFNldCwgQ1RDLmljbWRSZWNpcGVNYW5hZ2VyQ29tbWFuZCk7DQoJCQkJICAgIG1lbnVDbWQgPSBuZXcgT2xlTWVudUNvbW1hbmQobmV3IEV2ZW50SGFuZGxlcihPblJlY2lwZU1hbmFnZXJDb21tYW5kKSwgY21kKTsNCgkJCQkgICAgbWVudUNtZC5TdXBwb3J0ZWQgPSB0cnVlOw0KCQkJCSAgICBtZW51Q21kLlZpc2libGUgPSB0cnVlOw0KCQkJCSAgICBtZW51Q21kLkVuYWJsZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICBtZW51Q21kLkJlZm9yZVF1ZXJ5U3RhdHVzICs9IG5ldyBFdmVudEhhbmRsZXIoT25SZWNpcGVNYW5hZ2VyUXVlcnlTdGF0dXMpOw0KCQkJCSAgICBtY3MuQWRkQ29tbWFuZChtZW51Q21kKTsNCgkJCSAgICB9DQoNCgkJCSAgICAvL1NldHVwIHJlY2lwZSBtYW5hZ2VyIGV2ZW50cw0KCQkJICAgIHJlY2lwZU1hbmFnZXIgPSBHZXRTZXJ2aWNlPElSZWNpcGVNYW5hZ2VyU2VydmljZT4odHJ1ZSk7DQoJCQkgICAgcmVjaXBlTWFuYWdlci5FbmFibGVkUGFja2FnZSArPSBuZXcgUGFja2FnZUV2ZW50SGFuZGxlcihPbkVuYWJsZWRQYWNrYWdlKTsNCgkJCSAgICByZWNpcGVNYW5hZ2VyLkRpc2FibGluZ1BhY2thZ2UgKz0gbmV3IENhbmNlbFBhY2thZ2VFdmVudEhhbmRsZXIoT25EaXNhYmxpbmdQYWNrYWdlKTsNCiAgICAgICAgICAgICAgICByZWNpcGVNYW5hZ2VyLkVuYWJsaW5nUGFja2FnZSArPSBuZXcgQ2FuY2VsUGFja2FnZUV2ZW50SGFuZGxlcihPbkVuYWJsaW5nUGFja2FnZSk7DQoNCgkJCQlEVEUgZHRlID0gR2V0U2VydmljZTxEVEU+KHRydWUpOw0KICAgICAgICAgICAgICAgIERURTIgZHRlMiA9IChEVEUyKWR0ZTsNCg0KCQkJCXRoaXMuc29sdXRpb25FdmVudHMgPSBkdGUuRXZlbnRzLlNvbHV0aW9uRXZlbnRzOw0KICAgICAgICAgICAgICAgIHNvbHV0aW9uRXZlbnRzLlByb2plY3RSZW1vdmVkICs9IG5ldyBfZGlzcFNvbHV0aW9uRXZlbnRzX1Byb2plY3RSZW1vdmVkRXZlbnRIYW5kbGVyKE9uUHJvamVjdFJlbW92ZWQpOw0KICAgICAgICAgICAgICAgIHNvbHV0aW9uRXZlbnRzLlByb2plY3RSZW5hbWVkICs9IG5ldyBfZGlzcFNvbHV0aW9uRXZlbnRzX1Byb2plY3RSZW5hbWVkRXZlbnRIYW5kbGVyKE9uUHJvamVjdFJlbmFtZWQpOw0KICAgICAgICAgICAgICAgIHNvbHV0aW9uRXZlbnRzLlByb2plY3RBZGRlZCArPSBuZXcgX2Rpc3BTb2x1dGlvbkV2ZW50c19Qcm9qZWN0QWRkZWRFdmVudEhhbmRsZXIoT25Qcm9qZWN0QWRkZWQpOw0KDQoJCQkJdGhpcy5wcm9qZWN0SXRlbXNFdmVudHMgPSAoKEV2ZW50czIpZHRlMi5FdmVudHMpLlByb2plY3RJdGVtc0V2ZW50czsNCiAgICAgICAgICAgICAgICBwcm9qZWN0SXRlbXNFdmVudHMuSXRlbVJlbmFtZWQgKz0gbmV3IF9kaXNwUHJvamVjdEl0ZW1zRXZlbnRzX0l0ZW1SZW5hbWVkRXZlbnRIYW5kbGVyKE9uUHJvamVjdEl0ZW1SZW5hbWVkKTsNCiAgICAgICAgICAgICAgICBwcm9qZWN0SXRlbXNFdmVudHMuSXRlbVJlbW92ZWQgKz0gbmV3IF9kaXNwUHJvamVjdEl0ZW1zRXZlbnRzX0l0ZW1SZW1vdmVkRXZlbnRIYW5kbGVyKE9uUHJvamVjdEl0ZW1SZW1vdmVkKTsNCg0KICAgICAgICAgICAgICAgIHRoaXMuc29sdXRpb25JdGVtc0V2ZW50cyA9IGR0ZS5FdmVudHMuU29sdXRpb25JdGVtc0V2ZW50czsNCiAgICAgICAgICAgICAgICBzb2x1dGlvbkl0ZW1zRXZlbnRzLkl0ZW1SZW1vdmVkICs9IG5ldyBfZGlzcFByb2plY3RJdGVtc0V2ZW50c19JdGVtUmVtb3ZlZEV2ZW50SGFuZGxlcihPblByb2plY3RJdGVtUmVtb3ZlZCk7DQogICAgICAgICAgICAgICAgc29sdXRpb25JdGVtc0V2ZW50cy5JdGVtUmVuYW1lZCArPSBuZXcgX2Rpc3BQcm9qZWN0SXRlbXNFdmVudHNfSXRlbVJlbmFtZWRFdmVudEhhbmRsZXIoT25Qcm9qZWN0SXRlbVJlbmFtZWQpOyANCg0KCQkJfQ0KCQkJY2F0Y2ggKEV4Y2VwdGlvbiBleCkNCgkJCXsNCgkJCQlUcmFjZS5UcmFjZUVycm9yKGV4LlRvU3RyaW5nKCkpOw0KCQkJCXRocm93IG5ldyBSZWNpcGVGcmFtZXdvcmtFeGNlcHRpb24oDQoJCQkJCVByb3BlcnRpZXMuUmVzb3VyY2VzLlBhY2thZ2VfRmFpbGVkVG9Mb2FkLCBleCk7DQoJCQl9DQogICAgICAgIH0NCg0KICAgICAgICB2b2lkIE9uUmVjaXBlTWFuYWdlclF1ZXJ5U3RhdHVzKG9iamVjdCBzZW5kZXIsIEV2ZW50QXJncyBlKQ0KICAgICAgICB7DQogICAgICAgICAgICBEVEUgZHRlID0gR2V0U2VydmljZTxEVEU+KHRydWUpOw0KICAgICAgICAgICAgbWVudUNtZC5WaXNpYmxlID0gZHRlLlNvbHV0aW9uLklzT3BlbjsNCiAgICAgICAgfQ0KDQoJCXByb3RlY3RlZCBvdmVycmlkZSB2b2lkIERpc3Bvc2UoYm9vbCBkaXNwb3NpbmcpDQoJCXsNCgkJCWlmIChwYWNrYWdlc1RvUHJlc2VydmUgIT0gbnVsbCkNCgkJCXsNCgkJCQlwYWNrYWdlc1RvUHJlc2VydmUuQ2xlYXIoKTsNCgkJCQlwYWNrYWdlc1RvUHJlc2VydmUgPSBudWxsOw0KCQkJfQ0KICAgICAgICAgICAgaWYgKHBhY2thZ2VQZXJzaXN0ZW5jZURhdGEgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAvLyBMZXQncyByZW1vdmUgdGhlIGJhZyBvZiBzdGF0ZSB0b28uDQogICAgICAgICAgICAgICAgcGFja2FnZVBlcnNpc3RlbmNlRGF0YS5DbGVhcigpOw0KICAgICAgICAgICAgICAgIHBhY2thZ2VQZXJzaXN0ZW5jZURhdGEgPSBudWxsOw0KICAgICAgICAgICAgfQ0KCQkJaWYgKHJlY2lwZU1hbmFnZXIgIT0gbnVsbCkNCgkJCXsNCgkJCQlyZWNpcGVNYW5hZ2VyLkVuYWJsZWRQYWNrYWdlIC09IG5ldyBQYWNrYWdlRXZlbnRIYW5kbGVyKE9uRW5hYmxlZFBhY2thZ2UpOw0KICAgICAgICAgICAgICAgIHJlY2lwZU1hbmFnZXIuRW5hYmxpbmdQYWNrYWdlIC09IG5ldyBDYW5jZWxQYWNrYWdlRXZlbnRIYW5kbGVyKE9uRW5hYmxpbmdQYWNrYWdlKTsNCgkJCQlyZWNpcGVNYW5hZ2VyLkRpc2FibGluZ1BhY2thZ2UgLT0gbmV3IENhbmNlbFBhY2thZ2VFdmVudEhhbmRsZXIoT25EaXNhYmxpbmdQYWNrYWdlKTsNCgkJCQlyZWNpcGVNYW5hZ2VyID0gbnVsbDsNCgkJCX0NCiAgICAgICAgICAgIC8vIFRoZSBEVEUgb2JqZWN0IGlzIGludmFsaWQgd2hlbiBleGl0aW5nIFZTLg0KICAgICAgICAgICAgLy8gQW55IGFjY2VzcyB0byBpdCB3aWxsIHRocm93IGFuIEFWIGV4Y2VwdGlvbg0KICAgICAgICAgICAgLy9pZiAoc29sdXRpb25FdmVudHMgIT0gbnVsbCkNCiAgICAgICAgICAgIC8vew0KICAgICAgICAgICAgLy8gICAgc29sdXRpb25FdmVudHMuUHJvamVjdFJlbW92ZWQgLT0gbmV3IF9kaXNwU29sdXRpb25FdmVudHNfUHJvamVjdFJlbW92ZWRFdmVudEhhbmRsZXIoT25Qcm9qZWN0UmVtb3ZlZCk7DQogICAgICAgICAgICAvLyAgICBzb2x1dGlvbkV2ZW50cy5Qcm9qZWN0UmVuYW1lZCAtPSBuZXcgX2Rpc3BTb2x1dGlvbkV2ZW50c19Qcm9qZWN0UmVuYW1lZEV2ZW50SGFuZGxlcihPblByb2plY3RSZW5hbWVkKTsNCiAgICAgICAgICAgIC8vICAgIHRoaXMuc29sdXRpb25FdmVudHMgPSBudWxsOw0KICAgICAgICAgICAgLy99DQogICAgICAgICAgICAvL2lmICggcHJvamVjdEl0ZW1zRXZlbnRzICE9IG51bGwgKQ0KICAgICAgICAgICAgLy97DQogICAgICAgICAgICAvLyAgICBwcm9qZWN0SXRlbXNFdmVudHMuSXRlbVJlbW92ZWQgLT0gbmV3IF9kaXNwUHJvamVjdEl0ZW1zRXZlbnRzX0l0ZW1SZW1vdmVkRXZlbnRIYW5kbGVyKE9uUHJvamVjdEl0ZW1SZW1vdmVkKTsNCiAgICAgICAgICAgIC8vICAgIHByb2plY3RJdGVtc0V2ZW50cy5JdGVtUmVuYW1lZCAtPSBuZXcgX2Rpc3BQcm9qZWN0SXRlbXNFdmVudHNfSXRlbVJlbmFtZWRFdmVudEhhbmRsZXIoT25Qcm9qZWN0SXRlbVJlbmFtZWQpOw0KICAgICAgICAgICAgLy8gICAgdGhpcy5wcm9qZWN0SXRlbXNFdmVudHMgPSBudWxsOw0KICAgICAgICAgICAgLy99DQogICAgICAgICAgICAvL2lmIChzb2x1dGlvbkl0ZW1zRXZlbnRzICE9IG51bGwpDQogICAgICAgICAgICAvL3sNCiAgICAgICAgICAgIC8vICAgIHNvbHV0aW9uSXRlbXNFdmVudHMuSXRlbVJlbW92ZWQgLT0gbmV3IF9kaXNwUHJvamVjdEl0ZW1zRXZlbnRzX0l0ZW1SZW1vdmVkRXZlbnRIYW5kbGVyKE9uUHJvamVjdEl0ZW1SZW1vdmVkKTsNCiAgICAgICAgICAgIC8vICAgIHNvbHV0aW9uSXRlbXNFdmVudHMuSXRlbVJlbmFtZWQgLT0gbmV3IF9kaXNwUHJvamVjdEl0ZW1zRXZlbnRzX0l0ZW1SZW5hbWVkRXZlbnRIYW5kbGVyKE9uUHJvamVjdEl0ZW1SZW5hbWVkKTsNCiAgICAgICAgICAgIC8vICAgIHRoaXMuc29sdXRpb25JdGVtc0V2ZW50cyA9IG51bGw7DQogICAgICAgICAgICAvL30NCiAgICAgICAgICAgIC8vaWYgKG1lbnVDbWQgIT0gbnVsbCkNCiAgICAgICAgICAgIC8vew0KICAgICAgICAgICAgLy8gICAgbWVudUNtZC5CZWZvcmVRdWVyeVN0YXR1cyAtPSBuZXcgRXZlbnRIYW5kbGVyKE9uUmVjaXBlTWFuYWdlclF1ZXJ5U3RhdHVzKTsNCiAgICAgICAgICAgIC8vICAgIE9sZU1lbnVDb21tYW5kU2VydmljZSBtY3MgPSBHZXRTZXJ2aWNlKHR5cGVvZihJTWVudUNvbW1hbmRTZXJ2aWNlKSwgZmFsc2UpIGFzIE9sZU1lbnVDb21tYW5kU2VydmljZTsNCiAgICAgICAgICAgIC8vICAgIGlmIChtY3MgIT0gbnVsbCkNCiAgICAgICAgICAgIC8vICAgIHsNCiAgICAgICAgICAgIC8vICAgICAgICBtY3MuUmVtb3ZlQ29tbWFuZChtZW51Q21kKTsNCiAgICAgICAgICAgIC8vICAgIH0NCiAgICAgICAgICAgIC8vICAgIG1lbnVDbWQgPSBudWxsOw0KICAgICAgICAgICAgLy99DQoNCgkJCWlmIChvbGVDb21wb25lbnRNYW5hZ2VyICE9IG51bGwpDQoJCQl7DQoJCQkJb2xlQ29tcG9uZW50TWFuYWdlci5GUmV2b2tlQ29tcG9uZW50KHRoaXMuY29tcG9uZW50SUQpOw0KCQkJCXRoaXMub2xlQ29tcG9uZW50TWFuYWdlciA9IG51bGw7DQoJCQkJdGhpcy5jb21wb25lbnRJRCA9IDA7DQoJCQl9DQoJCQliYXNlLkRpc3Bvc2UoZGlzcG9zaW5nKTsJDQoJCX0NCg0KCQkjZW5kcmVnaW9uDQoJCQ0KCQkjcmVnaW9uIFN0YW5kYXJkIChOb24tZ3VpZGFuY2VwYWNrYWdlKSBDb21tYW5kIEhhbmRsZXJzDQoNCgkJaW50ZXJuYWwgY2xhc3MgQ1RDDQoJCXsNCgkJCXB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgR3VpZCBndWlkUmVjaXBlTWFuYWdlclBrZyA9IHR5cGVvZihSZWNpcGVNYW5hZ2VyUGFja2FnZSkuR1VJRDsNCg0KCQkJcHVibGljIHN0YXRpYyByZWFkb25seSBHdWlkIGd1aWRSZWNpcGVNYW5hZ2VyQ21kU2V0ID0gbmV3IEd1aWQoIns5NjExOTU4NC04QzRCLTQ5MTAtOTIxMS03MUQ0OEZBNTlGQUZ9Iik7DQoJCQlwdWJsaWMgY29uc3QgaW50IGljbWRSZWNpcGVNYW5hZ2VyQ29tbWFuZCA9IDB4MTAwOw0KDQoJCX07DQoNCgkJcHJpdmF0ZSB2b2lkIE9uUmVjaXBlTWFuYWdlckNvbW1hbmQob2JqZWN0IHNlbmRlciwgRXZlbnRBcmdzIGV2ZW50QXJncykNCgkJew0KICAgICAgICAgICAgdHJ5DQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgSVVJU2VydmljZSB1aVNlcnZpY2UgPSBHZXRTZXJ2aWNlPElVSVNlcnZpY2U+KCk7DQogICAgICAgICAgICAgICAgSVJlY2lwZU1hbmFnZXJTZXJ2aWNlIG1hbmFnZXIgPSBHZXRTZXJ2aWNlPElSZWNpcGVNYW5hZ2VyU2VydmljZT4oKTsNCiAgICAgICAgICAgICAgICBpZiAobWFuYWdlciA9PSBudWxsKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgVHJhY2UuVHJhY2VFcnJvcigNCiAgICAgICAgICAgICAgICAgICAgICAgIFByb3BlcnRpZXMuUmVzb3VyY2VzLlBhY2thZ2VfQ2FudEdldE1hbmFnZXJTZXJ2aWNlKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHVpU2VydmljZSAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICB1aVNlcnZpY2UuU2hvd0Vycm9yKFByb3BlcnRpZXMuUmVzb3VyY2VzLlBhY2thZ2VfQ2FudEdldE1hbmFnZXJTZXJ2aWNlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIEVudkRURS5EVEUgdnMgPSBHZXRTZXJ2aWNlPEVudkRURS5EVEU+KCk7DQogICAgICAgICAgICAgICAgaWYgKHZzICE9IG51bGwgJiYgdnMuU29sdXRpb24gIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIG9iamVjdCBjdXJyZW50U2VsZWN0aW9uID0gbnVsbDsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZzLlNlbGVjdGVkSXRlbXMuQ291bnQgIT0gMCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0ZWRJdGVtIGl0ZW0gPSB2cy5TZWxlY3RlZEl0ZW1zLkl0ZW0oMSk7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGFyZ2V0Lg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uUHJvamVjdCAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZWxlY3Rpb24gPSBpdGVtLlByb2plY3Q7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLlByb2plY3RJdGVtICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNlbGVjdGlvbiA9IGl0ZW0uUHJvamVjdEl0ZW07DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNlbGVjdGlvbiA9IHZzLlNvbHV0aW9uOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHVzaW5nKFBhY2thZ2VNYW5hZ2VtZW50LlBhY2thZ2VNYW5hZ2VyIGZvcm0gPSBuZXcgUGFja2FnZU1hbmFnZW1lbnQuUGFja2FnZU1hbmFnZXIoDQogICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VyIGFzIFN5c3RlbS5JU2VydmljZVByb3ZpZGVyLCBjdXJyZW50U2VsZWN0aW9uKSkNCgkJCQkJew0KCQkJCQkJaWYgKHVpU2VydmljZSA9PSBudWxsKQ0KCQkJCQkJew0KCQkJCQkJCWZvcm0uU2hvd0RpYWxvZygpOw0KCQkJCQkJfQ0KCQkJCQkJZWxzZQ0KCQkJCQkJew0KCQkJCQkJCXVpU2VydmljZS5TaG93RGlhbG9nKGZvcm0pOw0KCQkJCQkJfQ0KCQkJCQl9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmICh1aVNlcnZpY2UgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgdWlTZXJ2aWNlLlNob3dNZXNzYWdlKFByb3BlcnRpZXMuUmVzb3VyY2VzLlBhY2thZ2VfTm9Tb2x1dGlvbk9wZW5lZCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCAoRXhjZXB0aW9uIGUpDQogICAgICAgICAgICB7DQoJCQkJRXJyb3JIZWxwZXIuU2hvdyhHZXRTZXJ2aWNlPElVSVNlcnZpY2U+KCksIGUpOw0KICAgICAgICAgICAgfQ0KCQl9DQoNCgkJI2VuZHJlZ2lvbg0KDQoJCSNyZWdpb24gSVZzU29sdXRpb25FdmVudHMgbWVtYmVycw0KDQoJCWludCBJVnNTb2x1dGlvbkV2ZW50cy5PbkFmdGVyQ2xvc2VTb2x1dGlvbihvYmplY3QgcFVua1Jlc2VydmVkKQ0KCQl7DQoJCQl0cnkNCgkJCXsNCgkJCQltZW51Q21kLkVuYWJsZWQgPSBmYWxzZTsNCgkJCQltZW51Q21kLlZpc2libGUgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICBwYWNrYWdlUGVyc2lzdGVuY2VEYXRhLkNsZWFyKCk7DQoJCQkJcGFja2FnZXNUb1ByZXNlcnZlLkNsZWFyKCk7DQoJCQkJcmV0dXJuIFZTQ29uc3RhbnRzLlNfT0s7DQoJCQl9DQoJCQljYXRjaCAoRXhjZXB0aW9uIGUpDQoJCQl7DQoJCQkJRXJyb3JIZWxwZXIuU2hvdyhHZXRTZXJ2aWNlPElVSVNlcnZpY2U+KCksIGUpOw0KCQkJCXJldHVybiBWU0NvbnN0YW50cy5FX0ZBSUw7DQoJCQl9DQoJCX0NCg0KCQlpbnQgSVZzU29sdXRpb25FdmVudHMuT25BZnRlckxvYWRQcm9qZWN0KElWc0hpZXJhcmNoeSBwU3R1YkhpZXJhcmNoeSwgSVZzSGllcmFyY2h5IHBSZWFsSGllcmFyY2h5KQ0KCQl7DQogICAgICAgICAgICByZXR1cm4gVlNDb25zdGFudHMuRV9OT1RJTVBMOw0KICAgICAgICB9DQoNCgkJaW50IElWc1NvbHV0aW9uRXZlbnRzLk9uQWZ0ZXJPcGVuUHJvamVjdChJVnNIaWVyYXJjaHkgcEhpZXJhcmNoeSwgaW50IGZBZGRlZCkNCgkJew0KICAgICAgICAgICAgcmV0dXJuIFZTQ29uc3RhbnRzLkVfTk9USU1QTDsNCiAgICAgICAgfQ0KDQoJCWludCBJVnNTb2x1dGlvbkV2ZW50cy5PbkFmdGVyT3BlblNvbHV0aW9uKG9iamVjdCBwVW5rUmVzZXJ2ZWQsIGludCBmTmV3U29sdXRpb24pDQoJCXsNCgkJCW1lbnVDbWQuRW5hYmxlZCA9IHRydWU7DQoJCQltZW51Q21kLlZpc2libGUgPSB0cnVlOw0KCQkJSVJlY2lwZU1hbmFnZXJTZXJ2aWNlIHJlY2lwZU1hbmFnZXIgPSBHZXRTZXJ2aWNlPElSZWNpcGVNYW5hZ2VyU2VydmljZT4odHJ1ZSk7DQoJCQkvL0FmdGVyIHRoZSBzb2x1dGlvbiBoYXZlIGJlZW4gbG9hZGVkLCBub3cgbGV0J3MgZW5hYmxlIGVhY2ggcGFja2FnZQ0KICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIHBhY2thZ2VOYW1lIGluIHBhY2thZ2VQZXJzaXN0ZW5jZURhdGEuS2V5cykNCgkJCXsNCgkJCQl0cnkNCgkJCQl7DQoJCQkJCWlmIChyZWNpcGVNYW5hZ2VyLkdldFBhY2thZ2UocGFja2FnZU5hbWUpID09IG51bGwpDQoJCQkJCXsNCgkJCQkJCXJlY2lwZU1hbmFnZXIuRW5hYmxlUGFja2FnZShwYWNrYWdlTmFtZSk7DQoJCQkJCX0NCgkJCQl9DQoJCQkJY2F0Y2ggKEV4Y2VwdGlvbiBleCkNCgkJCQl7DQoJCQkJCURpYWxvZ1Jlc3VsdCByZXN1bHQgPSBFcnJvckhlbHBlci5TaG93KHRoaXMsIGV4LCBTdHJpbmcuRm9ybWF0KEN1bHR1cmVJbmZvLkN1cnJlbnRVSUN1bHR1cmUsDQoJCQkJCQkJCVByb3BlcnRpZXMuUmVzb3VyY2VzLlNvbHV0aW9uUGFja2FnZXNDb250YWluZXJfQ2Fubm90TG9hZFBhY2thZ2UsDQoJCQkJCQkJCXBhY2thZ2VOYW1lKSwgTWVzc2FnZUJveEJ1dHRvbnMuWWVzTm8pOw0KCQkJCQlpZiAocmVzdWx0ID09IERpYWxvZ1Jlc3VsdC5ZZXMpDQoJCQkJCXsNCgkJCQkJCXRyeQ0KCQkJCQkJew0KCQkJCQkJCWlmIChyZWNpcGVNYW5hZ2VyLkdldFBhY2thZ2UocGFja2FnZU5hbWUpICE9IG51bGwpDQoJCQkJCQkJew0KCQkJCQkJCQlyZWNpcGVNYW5hZ2VyLkRpc2FibGVQYWNrYWdlKHBhY2thZ2VOYW1lKTsNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCQlmaW5hbGx5DQoJCQkJCQl7DQoJCQkJCQkJSVBlcnNpc3RlbmNlU2VydmljZSBwZXJzaXN0ID0gR2V0U2VydmljZTxJUGVyc2lzdGVuY2VTZXJ2aWNlPigpOw0KCQkJCQkJCWlmIChwZXJzaXN0ICE9IG51bGwpDQoJCQkJCQkJew0KCQkJCQkJCQlwZXJzaXN0LlJlbW92ZVJlZmVyZW5jZXMocGFja2FnZU5hbWUpOw0KCQkJCQkJCX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrYWdlUGVyc2lzdGVuY2VEYXRhLlJlbW92ZShwYWNrYWdlTmFtZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoJCQkJCX0NCgkJCQl9DQoJCQl9DQoJCQlpZiAoVW5mb2xkVGVtcGxhdGUuVW5mb2xkaW5nVGVtcGxhdGVzLkNvdW50ID09IDApDQoJCQl7DQoJCQkJUmVmZXJlbmNlUmVzdG9yZVNlcnZpY2UgcmVzdG9yZVNlcnZpY2UgPSBudWxsOw0KCQkJCXRyeQ0KCQkJCXsNCgkJCQkJcmVzdG9yZVNlcnZpY2UgPSBuZXcgUmVmZXJlbmNlUmVzdG9yZVNlcnZpY2UoKTsNCgkJCQkJQWRkKHJlc3RvcmVTZXJ2aWNlKTsNCgkJCQkJcmVzdG9yZVNlcnZpY2UuUGVyZm9ybVZhbGlkYXRpb24oKTsNCgkJCQl9DQoJCQkJZmluYWxseQ0KCQkJCXsNCgkJCQkJaWYgKHJlc3RvcmVTZXJ2aWNlICE9IG51bGwpDQoJCQkJCXsNCgkJCQkJCVJlbW92ZShyZXN0b3JlU2VydmljZSk7DQoJCQkJCX0NCgkJCQl9DQoJCQl9DQoNCgkJCXJldHVybiBWU0NvbnN0YW50cy5TX09LOw0KCQl9DQoNCgkJaW50IElWc1NvbHV0aW9uRXZlbnRzLk9uQmVmb3JlQ2xvc2VQcm9qZWN0KElWc0hpZXJhcmNoeSBwSGllcmFyY2h5LCBpbnQgZlJlbW92ZWQpDQoJCXsNCgkJCXJldHVybiBWU0NvbnN0YW50cy5FX05PVElNUEw7DQoJCX0NCg0KCQlpbnQgSVZzU29sdXRpb25FdmVudHMuT25CZWZvcmVDbG9zZVNvbHV0aW9uKG9iamVjdCBwVW5rUmVzZXJ2ZWQpDQoJCXsNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vVW5sb2FkIGV2ZXJ5IHNpbmdsZSBwYWNrYWdlDQogICAgICAgICAgICAgICAgSVJlY2lwZU1hbmFnZXJTZXJ2aWNlIHJlY2lwZU1hbmFnZXIgPSBHZXRTZXJ2aWNlPElSZWNpcGVNYW5hZ2VyU2VydmljZT4odHJ1ZSk7DQogICAgICAgICAgICAgICAgSUNvbnRhaW5lciBwYWNrYWdlcyA9IChJQ29udGFpbmVyKXJlY2lwZU1hbmFnZXI7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoSUNvbXBvbmVudCBjb21wb25lbnQgaW4gcGFja2FnZXMuQ29tcG9uZW50cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQgaXMgR3VpZGFuY2VQYWNrYWdlKQ0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICByZWNpcGVNYW5hZ2VyLkRpc2FibGVQYWNrYWdlKChHdWlkYW5jZVBhY2thZ2UpY29tcG9uZW50KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gVlNDb25zdGFudHMuU19PSzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZSkNCiAgICAgICAgICAgIHsNCgkJCQlFcnJvckhlbHBlci5TaG93KEdldFNlcnZpY2U8SVVJU2VydmljZT4oKSwgZSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIFZTQ29uc3RhbnRzLkVfRkFJTDsNCiAgICAgICAgICAgIH0NCgkJfQ0KDQoJCWludCBJVnNTb2x1dGlvbkV2ZW50cy5PbkJlZm9yZVVubG9hZFByb2plY3QoSVZzSGllcmFyY2h5IHBSZWFsSGllcmFyY2h5LCBJVnNIaWVyYXJjaHkgcFN0dWJIaWVyYXJjaHkpDQoJCXsNCgkJCXJldHVybiBWU0NvbnN0YW50cy5FX05PVElNUEw7DQoJCX0NCg0KCQlpbnQgSVZzU29sdXRpb25FdmVudHMuT25RdWVyeUNsb3NlUHJvamVjdChJVnNIaWVyYXJjaHkgcEhpZXJhcmNoeSwgaW50IGZSZW1vdmluZywgcmVmIGludCBwZkNhbmNlbCkNCgkJew0KCQkJcmV0dXJuIFZTQ29uc3RhbnRzLkVfTk9USU1QTDsNCgkJfQ0KDQoJCWludCBJVnNTb2x1dGlvbkV2ZW50cy5PblF1ZXJ5Q2xvc2VTb2x1dGlvbihvYmplY3QgcFVua1Jlc2VydmVkLCByZWYgaW50IHBmQ2FuY2VsKQ0KCQl7DQoJCQlyZXR1cm4gVlNDb25zdGFudHMuRV9OT1RJTVBMOw0KCQl9DQoNCgkJaW50IElWc1NvbHV0aW9uRXZlbnRzLk9uUXVlcnlVbmxvYWRQcm9qZWN0KElWc0hpZXJhcmNoeSBwUmVhbEhpZXJhcmNoeSwgcmVmIGludCBwZkNhbmNlbCkNCgkJew0KCQkJcmV0dXJuIFZTQ29uc3RhbnRzLkVfTk9USU1QTDsNCgkJfQ0KDQoNCgkJI2VuZHJlZ2lvbg0KDQogICAgICAgICNyZWdpb24gSVZzU29sdXRpb25FdmVudHM0IE1lbWJlcnMNCg0KICAgICAgICBpbnQgSVZzU29sdXRpb25FdmVudHM0Lk9uQWZ0ZXJBc3luY2hPcGVuUHJvamVjdChJVnNIaWVyYXJjaHkgcEhpZXJhcmNoeSwgaW50IGZBZGRlZCkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIFZTQ29uc3RhbnRzLkVfTk9USU1QTDsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCBJVnNTb2x1dGlvbkV2ZW50czQuT25BZnRlckNoYW5nZVByb2plY3RQYXJlbnQoSVZzSGllcmFyY2h5IHBIaWVyYXJjaHkpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vSGFuZGxlIERyYWcgYW5kIERyb3AgZXZlbnQNCiAgICAgICAgICAgIGlmIChwSGllcmFyY2h5ID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFZTQ29uc3RhbnRzLkVfSU5WQUxJREFSRzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG9iamVjdCBoaWVyYXJjaHlPYmplY3QgPSBudWxsOw0KICAgICAgICAgICAgcEhpZXJhcmNoeS5HZXRQcm9wZXJ0eShEdGVIZWxwZXIuX19WU0lURU1JRC5ST09ULA0KICAgICAgICAgICAgICAgIChpbnQpX19WU0hQUk9QSUQuVlNIUFJPUElEX0V4dE9iamVjdCwNCiAgICAgICAgICAgICAgICBvdXQgaGllcmFyY2h5T2JqZWN0KTsNCiAgICAgICAgICAgIGlmIChoaWVyYXJjaHlPYmplY3QgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBpZiAoaGllcmFyY2h5T2JqZWN0IGlzIFByb2plY3QpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBPblByb2plY3RSZW5hbWVkKGhpZXJhcmNoeU9iamVjdCBhcyBQcm9qZWN0KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoaGllcmFyY2h5T2JqZWN0IGlzIFByb2plY3RJdGVtKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgT25Qcm9qZWN0SXRlbVJlbmFtZWQoaGllcmFyY2h5T2JqZWN0IGFzIFByb2plY3RJdGVtKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICByZXR1cm4gVlNDb25zdGFudHMuU19PSzsNCiAgICAgICAgfQ0KDQogICAgICAgIGludCBJVnNTb2x1dGlvbkV2ZW50czQuT25BZnRlclJlbmFtZVByb2plY3QoSVZzSGllcmFyY2h5IHBIaWVyYXJjaHkpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vIFRoaXMgb25lIGlzIGhhbmRsZWQgYnkgdGhlIGV2ZW50IGluIERURS5FdmVudHMNCiAgICAgICAgICAgIHJldHVybiBWU0NvbnN0YW50cy5FX05PVElNUEw7DQogICAgICAgIH0NCg0KICAgICAgICBpbnQgSVZzU29sdXRpb25FdmVudHM0Lk9uUXVlcnlDaGFuZ2VQcm9qZWN0UGFyZW50KElWc0hpZXJhcmNoeSBwSGllcmFyY2h5LCBJVnNIaWVyYXJjaHkgcE5ld1BhcmVudEhpZXIsIHJlZiBpbnQgcGZDYW5jZWwpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiBWU0NvbnN0YW50cy5FX05PVElNUEw7DQogICAgICAgIH0NCg0KICAgICAgICAjZW5kcmVnaW9uDQoNCgkJI3JlZ2lvbiBJUmVjaXBlTWFuYWdlclNlcnZpY2UgZXZlbnRzDQoNCiAgICAgICAgdm9pZCBPbkVuYWJsaW5nUGFja2FnZShvYmplY3Qgc2VuZGVyLCBDYW5jZWxQYWNrYWdlRXZlbnRBcmdzIGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIE9ubHkgYWxsb3cgZXhlY3V0aW9uIG9mIHRoZSBiaW5kaW5nIHJlY2lwZSBpZiB0aGUgcGFja2FnZSBpcyBub3QgYWxyZWFkeSBhdHRhY2hlZCwNCgkJCQkvLyBvciBpZiB0aGUgdmVyc2lvbiBvZiB0aGUgcGFja2FnZSBkaWZmZXJzIGZyb20gdGhlIGluc3RhbGxlZCBvbmUNCiAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgb25seSBoYXBwZW4gaWYgdGhlcmUgd2FzIG5vIHBhY2thZ2UtcmVsYXRlZCBwZXJzaXN0ZWQgc3RhdGUgaW4gdGhlIC5zdW8gZmlsZSBpbiB0aGUgYmVnaW5uaW5nLg0KICAgICAgICAgICAgICAgIC8vIFNlZSBSZWNpcGVNYW5hZ2VyUGFja2FnZS5jcywgT25Mb2FkT3B0aW9ucyBtZXRob2QsIGFyb3VuZCBsaW5lIDIzNy4gDQogICAgICAgICAgICAgICAgUGFja2FnZVN0YXRlIHBhY2thZ2VTdGF0ZSA9IEdldFBhY2thZ2VTdGF0ZShlLlBhY2thZ2UuQ29uZmlndXJhdGlvbi5HdWlkKTsNCgkJCQlib29sIGRpZmZlcmVudFZlcnNpb24gPSAocGFja2FnZVN0YXRlLlZlcnNpb24uTGVuZ3RoID4gMCkgJiYgKHBhY2thZ2VTdGF0ZS5WZXJzaW9uICE9IGUuUGFja2FnZS5Db25maWd1cmF0aW9uLlZlcnNpb24pOw0KDQoJCQkJaWYgKGRpZmZlcmVudFZlcnNpb24pDQoJCQkJew0KCQkJCQlNZXNzYWdlQm94LlNob3coc3RyaW5nLkZvcm1hdChDdWx0dXJlSW5mby5DdXJyZW50Q3VsdHVyZSwNCgkJCQkJCVByb3BlcnRpZXMuUmVzb3VyY2VzLlNvbHV0aW9uUGFja2FnZXNDb250YWluZXJfUGFja2FnZVZlcnNpb25EaWZmZXJzLA0KCQkJCQkJZS5QYWNrYWdlLkNvbmZpZ3VyYXRpb24uQ2FwdGlvbiksDQoJCQkJCQlQcm9wZXJ0aWVzLlJlc291cmNlcy5Tb2x1dGlvblBhY2thZ2VzQ29udGFpbmVyX1BhY2thZ2VWZXJzaW9uRGlmZmVyc1RpdGxlLA0KCQkJCQkJTWVzc2FnZUJveEJ1dHRvbnMuT0ssIE1lc3NhZ2VCb3hJY29uLkluZm9ybWF0aW9uKTsNCgkJCQl9DQoNCiAgICAgICAgICAgICAgICBlLkV4ZWN1dGVCaW5kaW5nUmVjaXBlID0gIXBhY2thZ2VTdGF0ZS5CaW5kaW5nUmVjaXBlUnVuIHx8IGRpZmZlcmVudFZlcnNpb247DQoJCQkJaWYgKGUuRXhlY3V0ZUJpbmRpbmdSZWNpcGUpDQoJCQkJew0KCQkJCQlJQXNzZXRSZWZlcmVuY2VTZXJ2aWNlIHJlZmVyZW5jZVNlcnZpY2UgPSBlLlBhY2thZ2UuR2V0U2VydmljZTxJQXNzZXRSZWZlcmVuY2VTZXJ2aWNlPih0cnVlKTsNCgkJCQkJaWYgKHJlZmVyZW5jZVNlcnZpY2UgIT0gbnVsbCkNCgkJCQkJew0KCQkJCQkJZm9yZWFjaCAoSUFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSBpbiByZWZlcmVuY2VTZXJ2aWNlLkdldEFsbCgpKQ0KCQkJCQkJew0KCQkJCQkJCXJlZmVyZW5jZVNlcnZpY2UuUmVtb3ZlKHJlZmVyZW5jZSk7DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQl9DQogICAgICAgICAgICAgICAgLy9BZGQgdGhlIElBcmd1bWVudEdhdGhlcmluZ1NlcnZpY2Ugc2VydmljZQ0KICAgICAgICAgICAgICAgIGUuUGFja2FnZS5BZGRTZXJ2aWNlKHR5cGVvZihJVmFsdWVHYXRoZXJpbmdTZXJ2aWNlKSwgbmV3IFdpemFyZEZyYW1ld29yay5XaXphcmRHYXRoZXJpbmdTZXJ2aWNlKCkpOw0KICAgICAgICAgICAgICAgIC8vIFNlcnZpY2Ugd2lsbCBiZSBkaXNwb3NlZCBpZiBpdCBmYWlscyB0byBsb2FkLg0KICAgICAgICAgICAgICAgIGUuUGFja2FnZS5BZGRTZXJ2aWNlKHR5cGVvZihJT3V0cHV0V2luZG93U2VydmljZSksIG5ldyBPdXRwdXRXaW5kb3dTZXJ2aWNlKA0KICAgICAgICAgICAgICAgICAgICBlLlBhY2thZ2UuQ29uZmlndXJhdGlvbi5DYXB0aW9uLCBlLlBhY2thZ2UuVHJhY2VTd2l0Y2gpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZXgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgRXJyb3JIZWxwZXIuU2hvdyhHZXRTZXJ2aWNlPElVSVNlcnZpY2U+KCksIGV4KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQoJCXZvaWQgT25FbmFibGVkUGFja2FnZShvYmplY3Qgc2VuZGVyLCBQYWNrYWdlRXZlbnRBcmdzIGUpDQoJCXsNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFZzR3VpZGFuY2VQYWNrYWdlIHZzUGFja2FnZSA9IG5ldyBWc0d1aWRhbmNlUGFja2FnZShlLlBhY2thZ2UpOw0KICAgICAgICAgICAgICAgIEFkZCh2c1BhY2thZ2UsIGUuUGFja2FnZS5Db25maWd1cmF0aW9uLkd1aWQpOw0KICAgICAgICAgICAgICAgIFBhY2thZ2VTdGF0ZSBwYWNrYWdlU3RhdGUgPSBHZXRQYWNrYWdlU3RhdGUoZS5QYWNrYWdlLkNvbmZpZ3VyYXRpb24uR3VpZCk7DQogICAgICAgICAgICAgICAgcGFja2FnZVN0YXRlLkJpbmRpbmdSZWNpcGVSdW4gPSB0cnVlOw0KCQkJCXBhY2thZ2VTdGF0ZS5WZXJzaW9uID0gZS5QYWNrYWdlLkNvbmZpZ3VyYXRpb24uVmVyc2lvbjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoKEV4Y2VwdGlvbiBleCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBFcnJvckhlbHBlci5TaG93KEdldFNlcnZpY2U8SVVJU2VydmljZT4oKSwgZXgpOw0KICAgICAgICAgICAgfQ0KCQl9DQoNCgkJdm9pZCBPbkRpc2FibGluZ1BhY2thZ2Uob2JqZWN0IHNlbmRlciwgQ2FuY2VsUGFja2FnZUV2ZW50QXJncyBlKQ0KCQl7DQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBWc0d1aWRhbmNlUGFja2FnZSB2c1BhY2thZ2UgPSAoVnNHdWlkYW5jZVBhY2thZ2UpdGhpcy5Db21wb25lbnRzW2UuUGFja2FnZS5Db25maWd1cmF0aW9uLkd1aWRdOw0KICAgICAgICAgICAgICAgIGlmICh2c1BhY2thZ2UgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIFJlbW92ZSh2c1BhY2thZ2UpOw0KICAgICAgICAgICAgICAgICAgICBJUGVyc2lzdGVuY2VTZXJ2aWNlIHBlcnNpc3QgPSBHZXRTZXJ2aWNlPElQZXJzaXN0ZW5jZVNlcnZpY2U+KCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChwZXJzaXN0ICE9IG51bGwpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3QuQ2xlYXJTdGF0ZShlLlBhY2thZ2UuQ29uZmlndXJhdGlvbi5HdWlkKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB2c1BhY2thZ2UuRGlzcG9zZSgpOw0KICAgICAgICAgICAgICAgICAgICB2c1BhY2thZ2UgPSBudWxsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZXgpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgRXJyb3JIZWxwZXIuU2hvdyhHZXRTZXJ2aWNlPElVSVNlcnZpY2U+KCksIGV4KTsNCiAgICAgICAgICAgIH0NCgkJfQ0KDQoJCSNlbmRyZWdpb24NCg0KCQkjcmVnaW9uIElIb3N0U2VydmljZSBNZW1iZXJzDQoNCgkJLy8vIDxzdW1tYXJ5Pg0KCQkvLy8gUmV0dXJucyB0aGUgc3RyaW5nICJWaXN1YWxTdHVkaW8iIHdoaWNoIGlzIHRoZSBuYW1lIG9mIHRoZSANCgkJLy8vIGhvc3QgaW1wbGVtZW50ZWQgYnkgdGhpcyBjbGFzcy4NCgkJLy8vIDwvc3VtbWFyeT4NCgkJcHVibGljIHN0cmluZyBIb3N0TmFtZQ0KCQl7DQoJCQlnZXQgeyByZXR1cm4gIlZpc3VhbFN0dWRpbyI7IH0NCgkJfQ0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIFJldHJpZXZlcyB0aGUgdGVtcGxhdGVzIGV4cG9zZWQgYnkgYSBWUyBwYWNrYWdlLg0KCQkvLy8gPC9zdW1tYXJ5Pg0KCQlwdWJsaWMgSUFzc2V0RGVzY3JpcHRpb25bXSBHZXRIb3N0QXNzZXRzKHN0cmluZyBwYWNrYWdlUGF0aCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuQ29uZmlndXJhdGlvbi5HdWlkYW5jZVBhY2thZ2UgcGFja2FnZUNvbmZpZ3VyYXRpb24pDQoJCXsNCiAgICAgICAgICAgIElWc1RlbXBsYXRlc1NlcnZpY2UgdGVtcGxhdGVzU2VydmljZSA9IEdldFNlcnZpY2U8SVZzVGVtcGxhdGVzU2VydmljZT4odHJ1ZSk7DQogICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVzU2VydmljZS5HZXRIb3N0QXNzZXRzKHBhY2thZ2VQYXRoKTsNCgkJfQ0KDQoJCS8vLyA8c3VtbWFyeT4NCgkJLy8vIFNlbGVjdHMgdGhlIHRhcmdldCBvZiBhbiA8c2VlIGNyZWY9IklCb3VuZEFzc2V0UmVmZXJlbmNlIi8+LCB1c3VhbGx5IA0KCQkvLy8gZG9uZSBwcmlvciB0byBleGVjdXRpb24uDQoJCS8vLyA8L3N1bW1hcnk+DQoJCXB1YmxpYyBib29sIFNlbGVjdFRhcmdldChvYmplY3QgdGFyZ2V0KQ0KCQl7DQoJCQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRhcmdldCBhcyBTb2x1dGlvbjsNCgkJCVByb2plY3QgcHJvamVjdCA9IHRhcmdldCBhcyBQcm9qZWN0Ow0KCQkJUHJvamVjdEl0ZW0gaXRlbSA9IHRhcmdldCBhcyBQcm9qZWN0SXRlbTsNCgkJCVNvbHV0aW9uRm9sZGVyIGZvbGRlciA9IHRhcmdldCBhcyBTb2x1dGlvbkZvbGRlcjsNCg0KICAgICAgICAgICAgaWYgKHNvbHV0aW9uICE9IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIER0ZUhlbHBlci5TZWxlY3RTb2x1dGlvbihzb2x1dGlvbi5EVEUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAocHJvamVjdCAhPSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHN0cmluZyBwYXRoID0gRHRlSGVscGVyLkJ1aWxkUGF0aChwcm9qZWN0KTsNCgkJCQlVSUhpZXJhcmNoeUl0ZW0gdWlJdGVtID0gRHRlSGVscGVyLlNlbGVjdEl0ZW0ocHJvamVjdC5EVEUsIHBhdGgpOw0KCQkJCWlmICh1aUl0ZW0gIT0gbnVsbCkNCgkJCQkJcmV0dXJuIHRydWU7DQoJCQkJZWxzZQ0KCQkJCQlyZXR1cm4gRHRlSGVscGVyLlNlbGVjdEl0ZW0ocHJvamVjdC5EVEUsIHRhcmdldCkgIT0gbnVsbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBzdHJpbmcgcGF0aCA9IER0ZUhlbHBlci5CdWlsZFBhdGgoaXRlbSk7DQoJCQkJVUlIaWVyYXJjaHlJdGVtIHVpSXRlbSA9IER0ZUhlbHBlci5TZWxlY3RJdGVtKGl0ZW0uRFRFLCBwYXRoKTsNCgkJCQlpZiAodWlJdGVtICE9IG51bGwpDQoJCQkJCXJldHVybiB0cnVlOw0KCQkJCWVsc2UNCgkJCQkJcmV0dXJuIER0ZUhlbHBlci5TZWxlY3RJdGVtKGl0ZW0uRFRFLCB0YXJnZXQpICE9IG51bGw7DQoJCQl9DQoJCQllbHNlIGlmIChmb2xkZXIgIT0gbnVsbCkNCgkJCXsNCgkJCQlzdHJpbmcgcGF0aCA9IER0ZUhlbHBlci5CdWlsZFBhdGgoZm9sZGVyLlBhcmVudCk7DQoJCQkJVUlIaWVyYXJjaHlJdGVtIHVpSXRlbSA9IER0ZUhlbHBlci5TZWxlY3RJdGVtKGZvbGRlci5QYXJlbnQuRFRFLCBwYXRoKTsNCgkJCQlpZiAodWlJdGVtICE9IG51bGwpDQoJCQkJCXJldHVybiB0cnVlOw0KCQkJCWVsc2UNCgkJCQkJcmV0dXJuIER0ZUhlbHBlci5TZWxlY3RJdGVtKGZvbGRlci5QYXJlbnQuRFRFLCBmb2xkZXIuUGFyZW50KSAhPSBudWxsOw0KCQkJfSANCgkJCXJldHVybiBmYWxzZTsNCgkJfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIFBlcmZvcm1zIHNlbGVjdGlvbiBvZiBhIHRhcmdldCBmb3IgdGhlIGdpdmVuIHJlZmVyZW5jZS4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgcHVibGljIGJvb2wgU2VsZWN0VGFyZ2V0KElXaW4zMldpbmRvdyBvd25lcldpbmRvdywgSVVuYm91bmRBc3NldFJlZmVyZW5jZSBmb3JSZWZlcmVuY2UpDQogICAgICAgIHsNCiAgICAgICAgICAgIERURSBkdGUgPSBHZXRTZXJ2aWNlPERURT4odHJ1ZSk7DQogICAgICAgICAgICBTb2x1dGlvblBpY2tlckZvcm0gcGlja2VyID0gbmV3IFNvbHV0aW9uUGlja2VyRm9ybShkdGUsIGZvclJlZmVyZW5jZSk7DQogICAgICAgICAgICBEaWFsb2dSZXN1bHQgcmVzdWx0ID0gcGlja2VyLlNob3dEaWFsb2cob3duZXJXaW5kb3cpOw0KICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBEaWFsb2dSZXN1bHQuT0spDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFNlbGVjdFRhcmdldChwaWNrZXIuU2VsZWN0ZWRUYXJnZXQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQoJCSNlbmRyZWdpb24NCg0KCQkjcmVnaW9uIERURSBFdmVudCBIYW5kbGVycw0KDQoJCXByaXZhdGUgdm9pZCBPblJlZmVyZW5jZVJlbW92ZWQob2JqZWN0IHRhcmdldCkNCgkJew0KCQkJdHJ5DQoJCQl7DQoJCQkJZm9yZWFjaCAob2JqZWN0IG9iaiBpbiB0aGlzLkNvbXBvbmVudHMpDQoJCQkJew0KCQkJCQlpZiAob2JqIGlzIFZzR3VpZGFuY2VQYWNrYWdlKQ0KCQkJCQl7DQoJCQkJCQlQcmFjdGljZXMuQ29tcG9uZW50TW9kZWwuU2VydmljZUNvbnRhaW5lciB2c1BhY2thZ2UgPSAoUHJhY3RpY2VzLkNvbXBvbmVudE1vZGVsLlNlcnZpY2VDb250YWluZXIpb2JqOw0KCQkJCQkJSUFzc2V0UmVmZXJlbmNlU2VydmljZSByZWZlcmVuY2VTZXJ2aWNlID0gdnNQYWNrYWdlLkdldFNlcnZpY2U8SUFzc2V0UmVmZXJlbmNlU2VydmljZT4odHJ1ZSk7DQoJCQkJCQlpZiAocmVmZXJlbmNlU2VydmljZSA9PSBudWxsKQ0KCQkJCQkJew0KCQkJCQkJCWNvbnRpbnVlOw0KCQkJCQkJfQ0KCQkJCQkJSUFzc2V0UmVmZXJlbmNlW10gcmVmZXJlbmNlcyA9IHJlZmVyZW5jZVNlcnZpY2UuRmluZCh0eXBlb2YoSW5kZXhlckJvdW5kVGFyZ2V0KSwgdGFyZ2V0KTsNCgkJCQkJCWlmIChyZWZlcmVuY2VzICE9IG51bGwpDQoJCQkJCQl7DQoJCQkJCQkJZm9yZWFjaCAoSUFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSBpbiByZWZlcmVuY2VzKQ0KCQkJCQkJCXsNCgkJCQkJCQkJcmVmZXJlbmNlU2VydmljZS5SZW1vdmUocmVmZXJlbmNlKTsNCgkJCQkJCQkJcmVmZXJlbmNlLkRpc3Bvc2UoKTsNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQl9DQoJCQl9DQoJCQljYXRjaCAoRXhjZXB0aW9uIGUpDQoJCQl7DQoJCQkJRXJyb3JIZWxwZXIuU2hvdyhHZXRTZXJ2aWNlPElVSVNlcnZpY2U+KCksIGUpOw0KCQkJfQ0KCQl9DQoNCgkJcHJpdmF0ZSB2b2lkIE9uUmVmZXJlbmNlUmVuYW1lZChvYmplY3QgdGFyZ2V0KQ0KCQl7DQoJCQl0cnkNCgkJCXsNCgkJCQlmb3JlYWNoIChvYmplY3Qgb2JqIGluIHRoaXMuQ29tcG9uZW50cykNCgkJCQl7DQoJCQkJCWlmIChvYmogaXMgVnNHdWlkYW5jZVBhY2thZ2UpDQoJCQkJCXsNCgkJCQkJCVByYWN0aWNlcy5Db21wb25lbnRNb2RlbC5TZXJ2aWNlQ29udGFpbmVyIHZzUGFja2FnZSA9IChQcmFjdGljZXMuQ29tcG9uZW50TW9kZWwuU2VydmljZUNvbnRhaW5lcilvYmo7DQoJCQkJCQlJQXNzZXRSZWZlcmVuY2VTZXJ2aWNlIHJlZmVyZW5jZVNlcnZpY2UgPSB2c1BhY2thZ2UuR2V0U2VydmljZTxJQXNzZXRSZWZlcmVuY2VTZXJ2aWNlPih0cnVlKTsNCgkJCQkJCWlmIChyZWZlcmVuY2VTZXJ2aWNlID09IG51bGwpDQoJCQkJCQl7DQoJCQkJCQkJY29udGludWU7DQoJCQkJCQl9DQoJCQkJCQlJQXNzZXRSZWZlcmVuY2VbXSByZWZlcmVuY2VzID0gcmVmZXJlbmNlU2VydmljZS5GaW5kKHR5cGVvZihJbmRleGVyQm91bmRUYXJnZXQpLCB0YXJnZXQpOw0KCQkJCQkJaWYgKHJlZmVyZW5jZXMgIT0gbnVsbCkNCgkJCQkJCXsNCgkJCQkJCQlmb3JlYWNoIChJQXNzZXRSZWZlcmVuY2UgcmVmZXJlbmNlIGluIHJlZmVyZW5jZXMpDQoJCQkJCQkJew0KCQkJCQkJCQlpZiAocmVmZXJlbmNlIGlzIElCb3VuZEFzc2V0UmVmZXJlbmNlKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQlJRGljdGlvbmFyeSBzdGF0ZSA9IHJlZmVyZW5jZVNlcnZpY2UuUmVtb3ZlKHJlZmVyZW5jZSk7DQoJCQkJCQkJCQlpZiAocmVmZXJlbmNlIGlzIFZzQm91bmRSZWZlcmVuY2UpDQoJCQkJCQkJCQl7DQoJCQkJCQkJCQkJKChWc0JvdW5kUmVmZXJlbmNlKXJlZmVyZW5jZSkuU2V0VGFyZ2V0KHRhcmdldCk7DQoJCQkJCQkJCQl9DQoJCQkJCQkJCQllbHNlIGlmIChyZWZlcmVuY2UgaXMgQm91bmRUZW1wbGF0ZVJlZmVyZW5jZSkNCgkJCQkJCQkJCXsNCgkJCQkJCQkJCQkoKEJvdW5kVGVtcGxhdGVSZWZlcmVuY2UpcmVmZXJlbmNlKS5Cb3VuZFJlZmVyZW5jZS5TZXRUYXJnZXQodGFyZ2V0KTsNCgkJCQkJCQkJCX0NCgkJCQkJCQkJCXJlZmVyZW5jZVNlcnZpY2UuQWRkKHJlZmVyZW5jZSwgc3RhdGUpOw0KCQkJCQkJCQl9DQoNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQl9DQoJCQl9DQoJCQljYXRjaCAoRXhjZXB0aW9uIGUpDQoJCQl7DQoJCQkJRXJyb3JIZWxwZXIuU2hvdyhHZXRTZXJ2aWNlPElVSVNlcnZpY2U+KCksIGUpOw0KCQkJfQ0KCQl9DQoNCiAgICAgICAgdm9pZCBSZW1vdmVQcm9qZWN0UmVmZXJlbmNlcyhQcm9qZWN0IHByb2plY3QpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vQ2hlY2sgcmVmZXJlbmNlcyBpbiB0aGUgaXRlbXMgb2YgdGhlIHByb2plY3QgZmlyc3QgYW4gZGVsZXRlIHRob3NlDQogICAgICAgICAgICB0cnkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChvYmplY3Qgb2JqIGluIHRoaXMuQ29tcG9uZW50cykNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIGlmIChvYmogaXMgVnNHdWlkYW5jZVBhY2thZ2UpDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFByYWN0aWNlcy5Db21wb25lbnRNb2RlbC5TZXJ2aWNlQ29udGFpbmVyIHZzUGFja2FnZSA9IChQcmFjdGljZXMuQ29tcG9uZW50TW9kZWwuU2VydmljZUNvbnRhaW5lcilvYmo7DQogICAgICAgICAgICAgICAgICAgICAgICBJQXNzZXRSZWZlcmVuY2VTZXJ2aWNlIHJlZmVyZW5jZVNlcnZpY2UgPSB2c1BhY2thZ2UuR2V0U2VydmljZTxJQXNzZXRSZWZlcmVuY2VTZXJ2aWNlPih0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWZlcmVuY2VTZXJ2aWNlID09IG51bGwpDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBJQXNzZXRSZWZlcmVuY2VbXSByZWZlcmVuY2VzID0gcmVmZXJlbmNlU2VydmljZS5GaW5kKHR5cGVvZihJbmRleGVyQm91bmRBc3NldFBhcmVudCksIHByb2plY3QpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZmVyZW5jZXMgIT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoIChJQXNzZXRSZWZlcmVuY2UgcmVmZXJlbmNlIGluIHJlZmVyZW5jZXMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VTZXJ2aWNlLlJlbW92ZShyZWZlcmVuY2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2UuRGlzcG9zZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIChFeGNlcHRpb24gZSkNCiAgICAgICAgICAgIHsNCgkJCQlFcnJvckhlbHBlci5TaG93KEdldFNlcnZpY2U8SVVJU2VydmljZT4oKSwgZSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB2b2lkIFVwZGF0ZVByb2plY3RSZWZlcmVuY2VzKFByb2plY3QgcHJvamVjdCkNCiAgICAgICAgew0KICAgICAgICAgICAgLy9DaGVjayByZWZlcmVuY2VzIGluIHRoZSBpdGVtcyBvZiB0aGUgcHJvamVjdCB1cGRhdGUgdGhvc2UNCiAgICAgICAgICAgIHRyeQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKG9iamVjdCBvYmogaW4gdGhpcy5Db21wb25lbnRzKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiBpcyBWc0d1aWRhbmNlUGFja2FnZSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgUHJhY3RpY2VzLkNvbXBvbmVudE1vZGVsLlNlcnZpY2VDb250YWluZXIgdnNQYWNrYWdlID0gKFByYWN0aWNlcy5Db21wb25lbnRNb2RlbC5TZXJ2aWNlQ29udGFpbmVyKW9iajsNCiAgICAgICAgICAgICAgICAgICAgICAgIElBc3NldFJlZmVyZW5jZVNlcnZpY2UgcmVmZXJlbmNlU2VydmljZSA9IHZzUGFja2FnZS5HZXRTZXJ2aWNlPElBc3NldFJlZmVyZW5jZVNlcnZpY2U+KHRydWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZmVyZW5jZVNlcnZpY2UgPT0gbnVsbCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIElBc3NldFJlZmVyZW5jZVtdIHJlZmVyZW5jZXMgPSByZWZlcmVuY2VTZXJ2aWNlLkZpbmQodHlwZW9mKEluZGV4ZXJCb3VuZEFzc2V0UGFyZW50KSwgcHJvamVjdCk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVmZXJlbmNlcyAhPSBudWxsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKElCb3VuZEFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSBpbiByZWZlcmVuY2VzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IHRhcmdldCA9IHJlZmVyZW5jZS5UYXJnZXQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEaWN0aW9uYXJ5IHN0YXRlID0gcmVmZXJlbmNlU2VydmljZS5SZW1vdmUocmVmZXJlbmNlKTsNCgkJCQkJCQkJaWYgKHJlZmVyZW5jZSBpcyBWc0JvdW5kUmVmZXJlbmNlKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkoKFZzQm91bmRSZWZlcmVuY2UpcmVmZXJlbmNlKS5TZXRUYXJnZXQodGFyZ2V0KTsNCgkJCQkJCQkJfQ0KCQkJCQkJCQllbHNlIGlmIChyZWZlcmVuY2UgaXMgQm91bmRUZW1wbGF0ZVJlZmVyZW5jZSkNCgkJCQkJCQkJew0KCQkJCQkJCQkJKChCb3VuZFRlbXBsYXRlUmVmZXJlbmNlKXJlZmVyZW5jZSkuQm91bmRSZWZlcmVuY2UuU2V0VGFyZ2V0KHRhcmdldCk7DQoJCQkJCQkJCX0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlU2VydmljZS5BZGQocmVmZXJlbmNlLCBzdGF0ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2F0Y2ggKEV4Y2VwdGlvbiBlKQ0KICAgICAgICAgICAgew0KCQkJCUVycm9ySGVscGVyLlNob3coR2V0U2VydmljZTxJVUlTZXJ2aWNlPigpLCBlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQoJCWludGVybmFsIHZvaWQgUmVmcmVzaFJlZmVyZW5jZXMoKQ0KCQl7DQoJCQlmb3JlYWNoIChvYmplY3Qgb2JqIGluIHRoaXMuQ29tcG9uZW50cykNCgkJCXsNCgkJCQlpZiAob2JqIGlzIFZzR3VpZGFuY2VQYWNrYWdlKQ0KCQkJCXsNCgkJCQkJUHJhY3RpY2VzLkNvbXBvbmVudE1vZGVsLlNlcnZpY2VDb250YWluZXIgdnNQYWNrYWdlID0gKFByYWN0aWNlcy5Db21wb25lbnRNb2RlbC5TZXJ2aWNlQ29udGFpbmVyKW9iajsNCgkJCQkJSUFzc2V0UmVmZXJlbmNlU2VydmljZSByZWZlcmVuY2VTZXJ2aWNlID0gdnNQYWNrYWdlLkdldFNlcnZpY2U8SUFzc2V0UmVmZXJlbmNlU2VydmljZT4odHJ1ZSk7DQoJCQkJCUlDb25maWd1cmF0aW9uU2VydmljZSBjb25maWdzZXJ2aWNlID0gdnNQYWNrYWdlLkdldFNlcnZpY2U8SUNvbmZpZ3VyYXRpb25TZXJ2aWNlPih0cnVlKTsNCgkJCQkJaWYgKHJlZmVyZW5jZVNlcnZpY2UgPT0gbnVsbCkNCgkJCQkJew0KCQkJCQkJY29udGludWU7DQoJCQkJCX0NCgkJCQkJaW50IG5SZWZzID0gMDsNCgkJCQkJZm9yZWFjaCAoSUFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSBpbiByZWZlcmVuY2VTZXJ2aWNlLkdldEFsbCgpKQ0KCQkJCQl7DQoJCQkJCQlpZiAocmVmZXJlbmNlIGlzIElCb3VuZEFzc2V0UmVmZXJlbmNlKQ0KCQkJCQkJew0KCQkJCQkJCWlmICgoKElCb3VuZEFzc2V0UmVmZXJlbmNlKXJlZmVyZW5jZSkuVGFyZ2V0ICE9IG51bGwpDQoJCQkJCQkJew0KCQkJCQkJCQluUmVmcysrOw0KCQkJCQkJCQlvYmplY3QgdGFyZ2V0ID0gKChJQm91bmRBc3NldFJlZmVyZW5jZSlyZWZlcmVuY2UpLlRhcmdldDsNCgkJCQkJCQkJSURpY3Rpb25hcnkgc3RhdGUgPSByZWZlcmVuY2VTZXJ2aWNlLlJlbW92ZShyZWZlcmVuY2UpOw0KCQkJCQkJCQlpZiAocmVmZXJlbmNlIGlzIFZzQm91bmRSZWZlcmVuY2UpDQoJCQkJCQkJCXsNCgkJCQkJCQkJCSgoVnNCb3VuZFJlZmVyZW5jZSlyZWZlcmVuY2UpLlNldFRhcmdldCh0YXJnZXQpOw0KCQkJCQkJCQl9DQoJCQkJCQkJCWVsc2UgaWYgKHJlZmVyZW5jZSBpcyBCb3VuZFRlbXBsYXRlUmVmZXJlbmNlKQ0KCQkJCQkJCQl7DQoJCQkJCQkJCQkoKEJvdW5kVGVtcGxhdGVSZWZlcmVuY2UpcmVmZXJlbmNlKS5Cb3VuZFJlZmVyZW5jZS5TZXRUYXJnZXQodGFyZ2V0KTsNCgkJCQkJCQkJfQ0KCQkJCQkJCQlyZWZlcmVuY2VTZXJ2aWNlLkFkZChyZWZlcmVuY2UsIHN0YXRlKTsNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQkJaWYgKG5SZWZzID09IDApDQoJCQkJCXsNCgkJCQkJCUlQZXJzaXN0ZW5jZVNlcnZpY2UgcGVyc2lzdGVuY2UgPSBHZXRTZXJ2aWNlPElQZXJzaXN0ZW5jZVNlcnZpY2U+KHRydWUpOw0KCQkJCQkJcGVyc2lzdGVuY2UuU2F2ZVJlZmVyZW5jZXMoY29uZmlnc2VydmljZS5DdXJyZW50UGFja2FnZS5HdWlkLCByZWZlcmVuY2VTZXJ2aWNlLkdldEFsbCgpKTsNCgkJCQkJfQ0KCQkJCX0NCgkJCX0NCgkJfQ0KDQoJCXZvaWQgT25Qcm9qZWN0SXRlbVJlbW92ZWQoUHJvamVjdEl0ZW0gcHJvamVjdEl0ZW0pDQoJCXsNCgkJCXRyeQ0KCQkJew0KCQkJCWlmIChwcm9qZWN0SXRlbS5PYmplY3QgIT0gbnVsbCAmJiBwcm9qZWN0SXRlbS5PYmplY3QgaXMgUHJvamVjdCkNCgkJCQl7DQoJCQkJCVJlbW92ZVByb2plY3RSZWZlcmVuY2VzKChQcm9qZWN0KXByb2plY3RJdGVtLk9iamVjdCk7DQoJCQkJfQ0KCQkJCS8vIFByb2Nlc3MgdGhlIGNoaWxkcyBlbGVtZW50cywgZS5nOiBGb3JtMS5EZXNpZ25lci5jcw0KCQkJCVByb2plY3RJdGVtcyBjaGlsZEl0ZW1zID0gcHJvamVjdEl0ZW0uUHJvamVjdEl0ZW1zOw0KCQkJCWlmIChjaGlsZEl0ZW1zICE9IG51bGwpDQoJCQkJew0KCQkJCQlmb3JlYWNoIChQcm9qZWN0SXRlbSBzdWJJdGVtIGluIGNoaWxkSXRlbXMpDQoJCQkJCXsNCgkJCQkJCU9uUHJvamVjdEl0ZW1SZW1vdmVkKHN1Ykl0ZW0pOw0KCQkJCQl9DQoJCQkJfQ0KCQkJfQ0KCQkJY2F0Y2goRXhjZXB0aW9uIGV4KQ0KCQkJew0KCQkJCS8vIFRoaXMgaXMgbWVhbnQgdG8gY2F0Y2ggIlByb2plY3QgdW5hdmFpbGFibGUiIGV4Y2VwdGlvbg0KCQkJCVRyYWNlLlRyYWNlRXJyb3IoZXguVG9TdHJpbmcoKSk7DQoJCQl9DQoJCQlmaW5hbGx5DQoJCQl7DQoJCQkJT25SZWZlcmVuY2VSZW1vdmVkKHByb2plY3RJdGVtKTsNCgkJCX0NCgkJfQ0KDQogICAgICAgIHZvaWQgT25Qcm9qZWN0SXRlbVJlbmFtZWQoUHJvamVjdEl0ZW0gcHJvamVjdEl0ZW0sIHN0cmluZyBvbGRuYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBPblByb2plY3RJdGVtUmVuYW1lZChwcm9qZWN0SXRlbSk7DQogICAgICAgIH0NCg0KCQl2b2lkIE9uUHJvamVjdEl0ZW1SZW5hbWVkKFByb2plY3RJdGVtIHByb2plY3RJdGVtKQ0KCQl7DQoJCQlPblJlZmVyZW5jZVJlbmFtZWQocHJvamVjdEl0ZW0pOw0KICAgICAgICAgICAgaWYgKHByb2plY3RJdGVtLk9iamVjdCAhPSBudWxsICYmIHByb2plY3RJdGVtLk9iamVjdCBpcyBQcm9qZWN0KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIFVwZGF0ZVByb2plY3RSZWZlcmVuY2VzKChQcm9qZWN0KXByb2plY3RJdGVtLk9iamVjdCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBQcm9jZXNzIHRoZSBjaGlsZHMgZWxlbWVudHMsIGUuZzogRm9ybTEuRGVzaWduZXIuY3MNCiAgICAgICAgICAgIFByb2plY3RJdGVtcyBjaGlsZEl0ZW1zID0gcHJvamVjdEl0ZW0uUHJvamVjdEl0ZW1zOw0KICAgICAgICAgICAgaWYgKGNoaWxkSXRlbXMgIT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChQcm9qZWN0SXRlbSBzdWJJdGVtIGluIGNoaWxkSXRlbXMpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBPblByb2plY3RJdGVtUmVuYW1lZChzdWJJdGVtKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoJCX0NCg0KCQl2b2lkIE9uUHJvamVjdFJlbW92ZWQoUHJvamVjdCBwcm9qZWN0KQ0KCQl7DQoJCQl0cnkNCgkJCXsNCgkJCQlSZW1vdmVQcm9qZWN0UmVmZXJlbmNlcyhwcm9qZWN0KTsNCgkJCX0NCgkJCWNhdGNoIChFeGNlcHRpb24gZXgpDQoJCQl7DQoJCQkJLy8gVGhpcyBpcyBtZWFudCB0byBjYXRjaCAiUHJvamVjdCB1bmF2YWlsYWJsZSIgZXhjZXB0aW9uDQoJCQkJVHJhY2UuVHJhY2VFcnJvcihleC5Ub1N0cmluZygpKTsNCgkJCX0NCgkJCWZpbmFsbHkNCgkJCXsNCgkgICAgICAgICAgICBPblJlZmVyZW5jZVJlbW92ZWQocHJvamVjdCk7DQoJCQl9DQoJCX0NCg0KICAgICAgICB2b2lkIE9uUHJvamVjdFJlbmFtZWQoUHJvamVjdCBwcm9qZWN0LCBzdHJpbmcgb2xkbmFtZSkNCiAgICAgICAgew0KICAgICAgICAgICAgT25Qcm9qZWN0UmVuYW1lZChwcm9qZWN0KTsNCiAgICAgICAgfQ0KDQoJCXZvaWQgT25Qcm9qZWN0UmVuYW1lZChQcm9qZWN0IHByb2plY3QpDQoJCXsNCgkJCU9uUmVmZXJlbmNlUmVuYW1lZChwcm9qZWN0KTsNCiAgICAgICAgICAgIFVwZGF0ZVByb2plY3RSZWZlcmVuY2VzKHByb2plY3QpOw0KICAgICAgICB9DQoNCiAgICAgICAgdm9pZCBPblByb2plY3RBZGRlZChQcm9qZWN0IFByb2plY3QpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vVHJhY2UuV3JpdGVMaW5lKFByb2plY3QuTmFtZSk7DQogICAgICAgIH0NCg0KCQl2b2lkIE9uQXNzZXRSZW1vdmVkKG9iamVjdCBhc3NldCkNCgkJew0KCQkJaWYgKGFzc2V0IGlzIFByb2plY3QpDQoJCQl7DQoJCQkJT25Qcm9qZWN0UmVtb3ZlZCgoUHJvamVjdClhc3NldCk7DQoJCQl9DQoJCQllbHNlIGlmIChhc3NldCBpcyBQcm9qZWN0SXRlbSkNCgkJCXsNCgkJCQlPblByb2plY3RJdGVtUmVtb3ZlZCgoUHJvamVjdEl0ZW0pYXNzZXQpOw0KCQkJfQ0KCQl9DQoNCgkJdm9pZCBPbkFzc2V0UmVuYW1lZChvYmplY3QgYXNzZXQpDQoJCXsNCgkJCWlmIChhc3NldCBpcyBQcm9qZWN0KQ0KCQkJew0KCQkJCU9uUHJvamVjdFJlbmFtZWQoKFByb2plY3QpYXNzZXQpOw0KCQkJfQ0KCQkJZWxzZSBpZiAoYXNzZXQgaXMgUHJvamVjdEl0ZW0pDQoJCQl7DQoJCQkJT25Qcm9qZWN0SXRlbVJlbmFtZWQoKFByb2plY3RJdGVtKWFzc2V0KTsNCgkJCX0NCgkJfQ0KICAgICAgICANCiAgICAgICAgI2VuZHJlZ2lvbg0KDQogICAgICAgICNyZWdpb24gSVBlcnNpc3RlbmNlU2VydmljZSBNZW1iZXJzDQoNCiAgICAgICAgRGljdGlvbmFyeTxzdHJpbmcsUGFja2FnZVN0YXRlPiBwYWNrYWdlUGVyc2lzdGVuY2VEYXRhOw0KCQlBcnJheUxpc3QgcGFja2FnZXNUb1ByZXNlcnZlOw0KDQogICAgICAgIHByaXZhdGUgSURpY3Rpb25hcnkgQ29weURpY3Rpb25hcnkoSURpY3Rpb25hcnkgc3RhdGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIC8vIFRoZSBvbmx5IHJlYWwgd2F5IG9mIGdldHRpbmcgYSBmdWxsIGNvcHkgb2YgdGhlIGVudGlyZSBzdGF0ZSBpcyB0byBzZXJpYWxpemUgaXQuDQogICAgICAgICAgICAvLyBXZSBrbm93IGl0J3Mgc2VyaWFsaXphYmxlIGJlY2F1c2Ugb3RoZXJ3aXNlIGl0IHdpbGwgbmV2ZXIgbWFrZSBpdCBpbnRvIHRoZSANCiAgICAgICAgICAgIC8vIHBlcnNpc3RlZCBmb3JtYXQuDQogICAgICAgICAgICBNZW1vcnlTdHJlYW0gbWVtID0gbmV3IE1lbW9yeVN0cmVhbSgpOw0KICAgICAgICAgICAgQmluYXJ5Rm9ybWF0dGVyIGZvcm1hdHRlciA9IG5ldyBCaW5hcnlGb3JtYXR0ZXIoKTsNCiAgICAgICAgICAgIGZvcm1hdHRlci5TZXJpYWxpemUobWVtLCBzdGF0ZSk7DQogICAgICAgICAgICBtZW0uUG9zaXRpb24gPSAwOw0KICAgICAgICAgICAgcmV0dXJuIChJRGljdGlvbmFyeSlmb3JtYXR0ZXIuRGVzZXJpYWxpemUobWVtKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElEaWN0aW9uYXJ5IElQZXJzaXN0ZW5jZVNlcnZpY2UuTG9hZFN0YXRlKHN0cmluZyBwYWNrYWdlTmFtZSwgSUFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHBhY2thZ2VOYW1lID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbigicGFja2FnZU5hbWUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChyZWZlcmVuY2UgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKCJyZWZlcmVuY2UiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFBhY2thZ2VTdGF0ZSBzdGF0ZSA9IEdldFBhY2thZ2VTdGF0ZShwYWNrYWdlTmFtZSk7DQogICAgICAgICAgICBpZiAoIXN0YXRlLlN0YXRlcy5Db250YWlucyhyZWZlcmVuY2UuS2V5KSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIGRpY3Rpb25hcnkuDQogICAgICAgICAgICByZXR1cm4gQ29weURpY3Rpb25hcnkoKElEaWN0aW9uYXJ5KXN0YXRlLlN0YXRlc1tyZWZlcmVuY2UuS2V5XSk7DQogICAgICAgIH0NCg0KICAgICAgICBJRGljdGlvbmFyeSBJUGVyc2lzdGVuY2VTZXJ2aWNlLlJlbW92ZVN0YXRlKHN0cmluZyBwYWNrYWdlTmFtZSwgSUFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSkNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHBhY2thZ2VOYW1lID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbigicGFja2FnZU5hbWUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChyZWZlcmVuY2UgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKCJyZWZlcmVuY2UiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIFBhY2thZ2VTdGF0ZSBzdGF0ZSA9IEdldFBhY2thZ2VTdGF0ZShwYWNrYWdlTmFtZSk7DQogICAgICAgICAgICBpZiAoIXN0YXRlLlN0YXRlcy5Db250YWlucyhyZWZlcmVuY2UuS2V5KSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIElEaWN0aW9uYXJ5IHN0YXRlZGF0YSA9IChJRGljdGlvbmFyeSlzdGF0ZS5TdGF0ZXNbcmVmZXJlbmNlLktleV07DQogICAgICAgICAgICBzdGF0ZS5TdGF0ZXMuUmVtb3ZlKHJlZmVyZW5jZS5LZXkpOw0KICAgICAgICAgICAgLy8gRG9uJ3QgY29weSBhcyB3ZSBkb24ndCBjYXJlIGFib3V0IGl0IGFueW1vcmUuDQogICAgICAgICAgICByZXR1cm4gc3RhdGVkYXRhOw0KICAgICAgICB9DQoNCiAgICAgICAgdm9pZCBJUGVyc2lzdGVuY2VTZXJ2aWNlLkNsZWFyU3RhdGUoc3RyaW5nIHBhY2thZ2VOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBwYWNrYWdlUGVyc2lzdGVuY2VEYXRhLlJlbW92ZShwYWNrYWdlTmFtZSk7DQogICAgICAgIH0NCg0KICAgICAgICBQYWNrYWdlU3RhdGUgR2V0UGFja2FnZVN0YXRlKHN0cmluZyBwYWNrYWdlTmFtZSkNCiAgICAgICAgew0KICAgICAgICAgICAgUGFja2FnZVN0YXRlIHBhY2thZ2VzdGF0ZSA9IG51bGw7DQogICAgICAgICAgICBpZiAoIXBhY2thZ2VQZXJzaXN0ZW5jZURhdGEuQ29udGFpbnNLZXkocGFja2FnZU5hbWUpKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHBhY2thZ2VzdGF0ZSA9IG5ldyBQYWNrYWdlU3RhdGUoKTsNCiAgICAgICAgICAgICAgICBwYWNrYWdlUGVyc2lzdGVuY2VEYXRhW3BhY2thZ2VOYW1lXSA9IHBhY2thZ2VzdGF0ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBwYWNrYWdlc3RhdGUgPSBwYWNrYWdlUGVyc2lzdGVuY2VEYXRhW3BhY2thZ2VOYW1lXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiBwYWNrYWdlc3RhdGU7DQogICAgICAgIH0NCg0KICAgICAgICB2b2lkIElQZXJzaXN0ZW5jZVNlcnZpY2UuU2F2ZVN0YXRlKHN0cmluZyBwYWNrYWdlTmFtZSwgSUFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSwgSURpY3Rpb25hcnkgc3RhdGUpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmIChwYWNrYWdlTmFtZSA9PSBudWxsKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcmd1bWVudE51bGxFeGNlcHRpb24oInBhY2thZ2VOYW1lIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAocmVmZXJlbmNlID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbigicmVmZXJlbmNlIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoc3RhdGUgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKCJzdGF0ZSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUGFja2FnZVN0YXRlIHBhY2thZ2VzdGF0ZSA9IEdldFBhY2thZ2VTdGF0ZShwYWNrYWdlTmFtZSk7DQogICAgICAgICAgICAvLyBDb3B5IHRoZSBkaWN0aW9uYXJ5Lg0KICAgICAgICAgICAgcGFja2FnZXN0YXRlLlN0YXRlc1tyZWZlcmVuY2UuS2V5XSA9IENvcHlEaWN0aW9uYXJ5KHN0YXRlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIElBc3NldFJlZmVyZW5jZVtdIElQZXJzaXN0ZW5jZVNlcnZpY2UuTG9hZFJlZmVyZW5jZXMoc3RyaW5nIHBhY2thZ2VOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAocGFja2FnZU5hbWUgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKCJwYWNrYWdlTmFtZSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUGFja2FnZVN0YXRlIHN0YXRlID0gR2V0UGFja2FnZVN0YXRlKHBhY2thZ2VOYW1lKTsNCiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5SZWZlcmVuY2VzOw0KICAgICAgICB9DQoNCiAgICAgICAgdm9pZCBJUGVyc2lzdGVuY2VTZXJ2aWNlLlJlbW92ZVJlZmVyZW5jZXMoc3RyaW5nIHBhY2thZ2VOYW1lKQ0KICAgICAgICB7DQogICAgICAgICAgICBpZiAocGFja2FnZU5hbWUgPT0gbnVsbCkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnROdWxsRXhjZXB0aW9uKCJwYWNrYWdlTmFtZSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCFwYWNrYWdlUGVyc2lzdGVuY2VEYXRhLkNvbnRhaW5zS2V5KHBhY2thZ2VOYW1lKSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBHZXRQYWNrYWdlU3RhdGUocGFja2FnZU5hbWUpLlJlZmVyZW5jZXMgPSBuZXcgSUFzc2V0UmVmZXJlbmNlWzBdOw0KICAgICAgICB9DQoNCiAgICAgICAgdm9pZCBJUGVyc2lzdGVuY2VTZXJ2aWNlLlNhdmVSZWZlcmVuY2VzKHN0cmluZyBwYWNrYWdlTmFtZSwgSUFzc2V0UmVmZXJlbmNlW10gcmVmZXJlbmNlcykNCiAgICAgICAgew0KICAgICAgICAgICAgaWYgKHBhY2thZ2VOYW1lID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbigicGFja2FnZU5hbWUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChyZWZlcmVuY2VzID09IG51bGwpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50TnVsbEV4Y2VwdGlvbigicmVmZXJlbmNlcyIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgUGFja2FnZVN0YXRlIHN0YXRlID0gR2V0UGFja2FnZVN0YXRlKHBhY2thZ2VOYW1lKTsNCiAgICAgICAgICAgIHN0YXRlLlJlZmVyZW5jZXMgPSByZWZlcmVuY2VzOw0KICAgICAgICB9DQoNCiAgICAgICAgI2VuZHJlZ2lvbg0KDQogICAgICAgICNyZWdpb24gUGFja2FnZVN0YXRlIGNsYXNzDQoNCiAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAvLy8gSG9sZHMgdGhlIHN0YXRlIG9mIGVhY2ggcGFja2FnZSBpbiB0aGUgaW4tbWVtb3J5IHBlcnNpc3RlbmNlIGRhdGEuIA0KICAgICAgICAvLy8gVGhpcyBpcyB0aGUgcmVwcmVzZW50YXRpb24gdXNlZCBhdCBydW50aW1lLCBvbmNlIGRlc2VyaWFsaXphdGlvbiANCiAgICAgICAgLy8vIGhhcyBiZWVuIHBlcmZvcm1lZC4NCiAgICAgICAgLy8vIDwvc3VtbWFyeT4NCiAgICAgICAgW1NlcmlhbGl6YWJsZV0NCiAgICAgICAgcHJpdmF0ZSBjbGFzcyBQYWNrYWdlU3RhdGUNCiAgICAgICAgew0KICAgICAgICAgICAgLy8vIDxzdW1tYXJ5Pg0KICAgICAgICAgICAgLy8vIEZsYWcgdGhhdCBzcGVjaWZpZXMgd2hldGhlciBhIHNvbHV0aW9uIHVzZXIgb3B0aW9ucyBmaWxlICguc3VvKSBjb250YWluZWQgcGFja2FnZS1yZWxhdGVkIA0KICAgICAgICAgICAgLy8vIGluZm9ybWF0aW9uIHdoZW4gdGhlIHNvbHV0aW9uIHdhcyBmaXJzdCBvcGVuZWQuIFRoaXMgd2lsbCBzaWduYWwgdGhhdCBhbGwgcGFja2FnZXMgbXVzdCANCiAgICAgICAgICAgIC8vLyBiZSByZS1ib3VuZCAoYnkgZXhlY3V0aW5nIHRoZWlyIGJpbmRpbmcgcmVjaXBlcykgYXMgcGFydCBvZiB0aGUgU29sdXRpb25QYWNrYWdlc0NvbnRhaW5lci5PbkVuYWJsaW5nUGFja2FnZSANCiAgICAgICAgICAgIC8vLyBldmVudCBoYW5kbGVyLCBhbmQgdGhhdCBhbnkgYm91bmQgcmVmZXJlbmNlcyBmcm9tIHRlbXBsYXRlcyBzaG91bGQgYmUgcmVzdG9yZWQsIGFzIHBhcnQgb2YgdGhlIA0KICAgICAgICAgICAgLy8vIElWc1NvbHV0aW9uRXZlbnRzLk9uQWZ0ZXJPcGVuU29sdXRpb24gZXZlbnQgaW4gU29sdXRpb25QYWNrYWdlc0NvbnRhaW5lciAoYXJvdW5kIGxpbmUgNDAwKS4NCiAgICAgICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgICAgICBwdWJsaWMgYm9vbCBCaW5kaW5nUmVjaXBlUnVuID0gZmFsc2U7DQoNCgkJCS8vLyA8c3VtbWFyeT4NCgkJCS8vLyBWZXJzaW9uIHN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUgdmVyc2lvbiB1c2VkIGZvciB0aGUgcGFja2FnZSB3aGVuIGl0IHdhcyBhdHRhY2hlZCB0byB0aGUgY3VycmVudA0KCQkJLy8vIHNvbHV0aW9uIGZpbGUuIEl0IGlzIHVzZWQgdG8gY2hlY2sgZGlmZmVyZW5jaWVzIGluIHZlcnNpb24gd2hlbiB0aGUgdXNlciBvcGVucyB0aGUgc29sdXRpb24gYWdhaW4uDQoJCQkvLy8gPC9zdW1tYXJ5Pg0KCQkJcHVibGljIHN0cmluZyBWZXJzaW9uID0gc3RyaW5nLkVtcHR5Ow0KICAgICAgICAgICAgcHVibGljIElEaWN0aW9uYXJ5IFN0YXRlcyA9IG5ldyBIYXNodGFibGUoKTsNCgkJCXB1YmxpYyBJQXNzZXRSZWZlcmVuY2VbXSBSZWZlcmVuY2VzID0gbmV3IElBc3NldFJlZmVyZW5jZVswXTsNCiAgICAgICAgfQ0KDQogICAgICAgICNlbmRyZWdpb24gUGFja2FnZVN0YXRlIGNsYXNzDQoNCiAgICAgICAgI3JlZ2lvbiBQYWNrYWdlIFN0YXRlIExvYWQvU2F2ZQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vIEhvbGRzIHNlcmlhbGl6YXRpb24gaW5mb3JtYXRpb24gZm9yIGEgcGFja2FnZSwgc3VjaCBhcw0KICAgICAgICAvLy8gdGhlIHJlZmVyZW5jZXMgYW5kIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgY2xhc3MgaXMgDQogICAgICAgIC8vLyBub3RoaW5nIG1vcmUgdGhhbiBhIGJ1Y2tldCBvZiBiaW5hcnkgZGF0YSBmb3IgdGhlIHBhY2thZ2UsIA0KICAgICAgICAvLy8gd2hpY2ggdWx0aW1hdGVseSB3aWxsIGJlIGRlc2VyaWFsaXplZCBpbnRvIGEgUGFja2FnZVN0YXRlIGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbU2VyaWFsaXphYmxlXQ0KICAgICAgICBwcml2YXRlIGNsYXNzIFBhY2thZ2VEYXRhDQogICAgICAgIHsNCiAgICAgICAgICAgIHB1YmxpYyBQYWNrYWdlRGF0YShzdHJpbmcgbmFtZSwgYnl0ZVtdIGRhdGEpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsNCiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwcml2YXRlIHN0cmluZyBuYW1lOw0KDQogICAgICAgICAgICBwdWJsaWMgc3RyaW5nIE5hbWUNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBnZXQgeyByZXR1cm4gbmFtZTsgfQ0KICAgICAgICAgICAgICAgIHNldCB7IG5hbWUgPSB2YWx1ZTsgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwcml2YXRlIGJ5dGVbXSBkYXRhOw0KDQogICAgICAgICAgICBwdWJsaWMgYnl0ZVtdIERhdGENCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBnZXQgeyByZXR1cm4gZGF0YTsgfQ0KICAgICAgICAgICAgICAgIHNldCB7IGRhdGEgPSB2YWx1ZTsgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgaW50ZXJuYWwgdm9pZCBMb2FkUGFja2FnZXNEYXRhKFN5c3RlbS5JTy5TdHJlYW0gc3RyZWFtKQ0KICAgICAgICB7DQoJCQlwYWNrYWdlc1RvUHJlc2VydmUgPSBuZXcgQXJyYXlMaXN0KCk7DQoJCQlpZiAoc3RyZWFtLkxlbmd0aCA9PSAwKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgZW1wdHkgZGF0YSBzbyB0aGF0IG90aGVyIG1ldGhvZHMgZG9uJ3QgZmFpbC4NCiAgICAgICAgICAgICAgICBwYWNrYWdlUGVyc2lzdGVuY2VEYXRhID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLFBhY2thZ2VTdGF0ZT4oKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBBcnJheUxpc3Qgc2VyaWFsaXplZGF0YSA9IChBcnJheUxpc3QpKG5ldyBCaW5hcnlGb3JtYXR0ZXIoKS5EZXNlcmlhbGl6ZShzdHJlYW0pKTsNCgkJCXBhY2thZ2VQZXJzaXN0ZW5jZURhdGEgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIFBhY2thZ2VTdGF0ZT4oc2VyaWFsaXplZGF0YS5Db3VudCk7DQogICAgICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgdG9wLW1vc3QgcmVzb2x1dGlvbiBzZXJ2aWNlIHRoYXQgbGl2ZXMgaW4gdGhlIG1hbmFnZXIuDQogICAgICAgICAgICBvYmplY3QgbWFuYWdlciA9IEdldFNlcnZpY2U8SVJlY2lwZU1hbmFnZXJTZXJ2aWNlPigpOw0KICAgICAgICAgICAgLy8gVGhlIG1hbmFnZXIgaXMgdGhlIHNlcnZpY2UgcHJvdmlkZXIgaXRzZWxmIHRoYXQgaG9zdHMgdGhlIHJlc29sdXRpb24gc2VydmljZS4NCiAgICAgICAgICAgIElUeXBlUmVzb2x1dGlvblNlcnZpY2UgbWFpbnJlc29sdXRpb24gPSAoSVR5cGVSZXNvbHV0aW9uU2VydmljZSkNCiAgICAgICAgICAgICAgICBTZXJ2aWNlSGVscGVyLkdldFNlcnZpY2UoKFN5c3RlbS5JU2VydmljZVByb3ZpZGVyKW1hbmFnZXIsDQogICAgICAgICAgICAgICAgICAgIHR5cGVvZihJVHlwZVJlc29sdXRpb25TZXJ2aWNlKSwgdGhpcyk7DQoNCiAgICAgICAgICAgIGZvcmVhY2ggKFBhY2thZ2VEYXRhIGNkYXRhIGluIHNlcmlhbGl6ZWRhdGEpDQogICAgICAgICAgICB7DQoJCQkJWG1sUmVhZGVyIGNyZWFkZXIgPSBudWxsOw0KCQkJCXRyeQ0KCQkJCXsNCgkJCQkJLy8gUmV0cmlldmUgcGFja2FnZSBiYXNlIHBhdGguDQoJCQkJCWNyZWFkZXIgPSBSZWNpcGVNYW5hZ2VyLkdldENvbmZpZ3VyYXRpb25SZWFkZXIoY2RhdGEuTmFtZSk7DQoJCQkJCXN0cmluZyBjb25maWdmaWxlID0gbmV3IFVyaShjcmVhZGVyLkJhc2VVUkkpLkxvY2FsUGF0aDsNCgkJCQkJY3JlYWRlci5DbG9zZSgpOw0KCQkJCQl1c2luZyAoVHlwZVJlc29sdXRpb25SZXNvbHZlciByZXNvbHZlciA9IG5ldyBUeXBlUmVzb2x1dGlvblJlc29sdmVyKA0KCQkJCQkJbmV3IFR5cGVSZXNvbHV0aW9uU2VydmljZShQYXRoLkdldERpcmVjdG9yeU5hbWUoY29uZmlnZmlsZSksIG1haW5yZXNvbHV0aW9uKSkpDQoJCQkJCXsNCgkJCQkJCU1lbW9yeVN0cmVhbSBtZW0gPSBuZXcgTWVtb3J5U3RyZWFtKGNkYXRhLkRhdGEpOw0KCQkJCQkJdHJ5DQoJCQkJCQl7DQoJCQkJCQkJcGFja2FnZVBlcnNpc3RlbmNlRGF0YVtjZGF0YS5OYW1lXSA9DQoJCQkJCQkJCShQYWNrYWdlU3RhdGUpKG5ldyBCaW5hcnlGb3JtYXR0ZXIoKS5EZXNlcmlhbGl6ZShtZW0pKTsNCgkJCQkJCX0NCgkJCQkJCWNhdGNoIChFeGNlcHRpb24gZSkNCgkJCQkJCXsNCgkJCQkJCQl0aHJvdyBuZXcgU2VyaWFsaXphdGlvbkV4Y2VwdGlvbigNCgkJCQkJCQkJc3RyaW5nLkZvcm1hdChDdWx0dXJlSW5mby5DdXJyZW50Q3VsdHVyZSwgDQoJCQkJCQkJCQlQcm9wZXJ0aWVzLlJlc291cmNlcy5Tb2x1dGlvblBhY2thZ2VzQ29udGFpbmVyX1NlcmlhbGl6YXRpb25FcnJvciwgDQoJCQkJCQkJCQljZGF0YS5OYW1lKSwNCgkJCQkJCQkJZSk7DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQl9DQoJCQkJLy8gV2hlbiB0aGUgcGFja2FnZSB3YXMgdW5pbnN0YWxsZWQgYnkgdGhlIHVzZXIsIG9yIGl0IHdhcyBhbiBlcnJvciBsb2FkaW5nIHRoZSB4bWwNCgkJCQkvLyBhc2sgaWYgc2hvdWxkIHdlIHJlbW92ZSB0aGUgZGF0YSBmcm9tIHRoZSBzdW8gZmlsZQ0KCQkJCWNhdGNoIChFeGNlcHRpb24gZXgpDQoJCQkJew0KCQkJCQlEaWFsb2dSZXN1bHQgcmVzdWx0ID0gRXJyb3JIZWxwZXIuU2hvdyh0aGlzLCBleCwgc3RyaW5nLkZvcm1hdChDdWx0dXJlSW5mby5DdXJyZW50VUlDdWx0dXJlLA0KCQkJCQkJCQlQcm9wZXJ0aWVzLlJlc291cmNlcy5Tb2x1dGlvblBhY2thZ2VzQ29udGFpbmVyX1BhY2thZ2VSZW1vdmVQZXJzaXN0ZW5jZSwNCgkJCQkJCQkJZXguTWVzc2FnZSksIE1lc3NhZ2VCb3hCdXR0b25zLlllc05vKTsNCgkJCQkJaWYgKHJlc3VsdCA9PSBEaWFsb2dSZXN1bHQuTm8pDQoJCQkJCXsNCgkJCQkJCXBhY2thZ2VzVG9QcmVzZXJ2ZS5BZGQoY2RhdGEpOw0KCQkJCQl9DQoJCQkJCWlmIChjcmVhZGVyICE9IG51bGwpDQoJCQkJCXsNCgkJCQkJCWNyZWFkZXIuQ2xvc2UoKTsNCgkJCQkJfQ0KCQkJCX0NCgkJCX0NCiAgICAgICAgfQ0KDQogICAgICAgIGludGVybmFsIHZvaWQgU2F2ZVBhY2thZ2VzRGF0YShTeXN0ZW0uSU8uU3RyZWFtIHN0cmVhbSkNCiAgICAgICAgew0KICAgICAgICAgICAgb2JqZWN0IGhvc3RzZXJ2aWNlID0gR2V0U2VydmljZSh0eXBlb2YoSUhvc3RTZXJ2aWNlKSk7DQogICAgICAgICAgICBEZWJ1Zy5Bc3NlcnQoaG9zdHNlcnZpY2UgaXMgU29sdXRpb25QYWNrYWdlc0NvbnRhaW5lciwgIldyb25nIGltcGxlbWVudGF0aW9uIG9mIElIb3N0U2VydmljZSBmb3VuZCIpOw0KCQkJUmVmcmVzaFJlZmVyZW5jZXMoKTsNCiAgICAgICAgICAgIEFycmF5TGlzdCBkYXRhID0gbmV3IEFycmF5TGlzdChwYWNrYWdlUGVyc2lzdGVuY2VEYXRhLkNvdW50ICsNCgkJCQlwYWNrYWdlc1RvUHJlc2VydmUuQ291bnQpOw0KICAgICAgICAgICAgZm9yZWFjaCAoS2V5VmFsdWVQYWlyPHN0cmluZyxQYWNrYWdlU3RhdGU+IGVudHJ5IGluIHBhY2thZ2VQZXJzaXN0ZW5jZURhdGEpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgTWVtb3J5U3RyZWFtIG1lbSA9IG5ldyBNZW1vcnlTdHJlYW0oKTsNCiAgICAgICAgICAgICAgICBuZXcgQmluYXJ5Rm9ybWF0dGVyKCkuU2VyaWFsaXplKG1lbSwgZW50cnkuVmFsdWUpOw0KICAgICAgICAgICAgICAgIGRhdGEuQWRkKG5ldyBQYWNrYWdlRGF0YSgoc3RyaW5nKWVudHJ5LktleSwgbWVtLlRvQXJyYXkoKSkpOw0KICAgICAgICAgICAgfQ0KCQkJZm9yZWFjaCAoUGFja2FnZURhdGEgY2RhdGEgaW4gcGFja2FnZXNUb1ByZXNlcnZlKQ0KCQkJew0KCQkJCWRhdGEuQWRkKGNkYXRhKTsNCgkJCX0NCg0KICAgICAgICAgICAgbmV3IEJpbmFyeUZvcm1hdHRlcigpLlNlcmlhbGl6ZShzdHJlYW0sIGRhdGEpOw0KICAgICAgICB9DQoNCiAgICAgICAgI2VuZHJlZ2lvbg0KDQoJCSNyZWdpb24gSU9sZUNvbXBvbmVudCBNZW1iZXJzDQoNCgkJaW50IElPbGVDb21wb25lbnQuRkNvbnRpbnVlTWVzc2FnZUxvb3AodWludCB1UmVhc29uLCBJbnRQdHIgcHZMb29wRGF0YSwgTVNHW10gcE1zZ1BlZWtlZCkNCgkJew0KCQkJcmV0dXJuIFZTQ29uc3RhbnRzRXguRkFMU0U7DQoJCX0NCg0KCQlJRW51bWVyYXRvcjxLZXlWYWx1ZVBhaXI8c3RyaW5nLFBhY2thZ2VTdGF0ZT4+IHBhY2thZ2VFbnVtZXJhdG9yID0gbnVsbDsNCgkJSUVudW1lcmF0b3IgcmVmZXJlbmNlRW51bWVyYXRvciA9IG51bGw7DQoNCgkJcHJpdmF0ZSBib29sIENoZWNrUmVmZXJlbmNlKHN0cmluZyBwYWNrYWdlTmFtZSxJQm91bmRBc3NldFJlZmVyZW5jZSByZWZlcmVuY2UpDQoJCXsNCgkJCW9iamVjdCBhY3R1YWxUYXJnZXQgPSByZWZlcmVuY2UuVGFyZ2V0Ow0KCQkJc3RyaW5nIHNlcmlhbGl6ZWREYXRhID0gcmVmZXJlbmNlLlN1YlBhdGg7DQoJCQlvYmplY3QgdGVzdGVkVGFyZ2V0ID0gcmVmZXJlbmNlLlN0cmF0ZWd5LkxvY2F0ZVRhcmdldCh0aGlzLCBzZXJpYWxpemVkRGF0YSk7DQoJCQlpZiAodGVzdGVkVGFyZ2V0ICE9IGFjdHVhbFRhcmdldCkNCgkJCXsNCgkJCQlEVEUgZHRlID0gR2V0U2VydmljZTxEVEU+KCk7DQoJCQkJdHJ5DQoJCQkJew0KCQkJCQlkdGUuU3RhdHVzQmFyLlRleHQgPSBTdHJpbmcuRm9ybWF0KEN1bHR1cmVJbmZvLkN1cnJlbnRDdWx0dXJlLA0KCQkJCQkJUHJvcGVydGllcy5SZXNvdXJjZXMuU29sdXRpb25QYWNrYWdlc0NvbnRhaW5lcl9VcGRhdGluZ1JlZmVyZW5jZSwNCgkJCQkJCXJlZmVyZW5jZS5TdWJQYXRoLA0KCQkJCQkJcGFja2FnZU5hbWUpOw0KCQkJCQlzdHJpbmcgbmV3U2VyaWFsaXphdGlvbkRhdGEgPSBzdHJpbmcuRW1wdHk7DQoJCQkJCXRyeQ0KCQkJCQl7DQoJCQkJCQluZXdTZXJpYWxpemF0aW9uRGF0YSA9IHJlZmVyZW5jZS5TdHJhdGVneS5HZXRTZXJpYWxpemF0aW9uRGF0YShhY3R1YWxUYXJnZXQpOw0KCQkJCQl9DQoJCQkJCWNhdGNoDQoJCQkJCXsNCgkJCQkJCS8vIFRoaXMgd2lsbCBjYXRjaCAiUHJvamVjdCB1bmF2YWlsaWJsZSBleGNlcHRpb24NCgkJCQkJCW5ld1NlcmlhbGl6YXRpb25EYXRhID0gc3RyaW5nLkVtcHR5Ow0KCQkJCQl9DQoJCQkJCWlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShuZXdTZXJpYWxpemF0aW9uRGF0YSkpDQoJCQkJCXsNCgkJCQkJCU9uQXNzZXRSZW1vdmVkKGFjdHVhbFRhcmdldCk7DQoJCQkJCX0NCgkJCQkJZWxzZQ0KCQkJCQl7DQoJCQkJCQlPbkFzc2V0UmVuYW1lZChhY3R1YWxUYXJnZXQpOw0KCQkJCQl9DQoJCQkJfQ0KCQkJCWZpbmFsbHkNCgkJCQl7DQoJCQkJCWR0ZS5TdGF0dXNCYXIuQ2xlYXIoKTsNCgkJCQkJcmVmZXJlbmNlID0gbnVsbDsNCgkJCQkJcmVmZXJlbmNlRW51bWVyYXRvciA9IG51bGw7DQoJCQkJCXBhY2thZ2VFbnVtZXJhdG9yID0gbnVsbDsNCgkJCQl9DQoJCQkJcmV0dXJuIHRydWU7DQoJCQl9DQoJCQlyZXR1cm4gZmFsc2U7DQoJCX0NCg0KCQlwcml2YXRlIGludCBSZWZlcmVuY2VMb29wKHN0cmluZyBwYWNrYWdlTmFtZSkNCgkJew0KCQkJaWYgKHJlZmVyZW5jZUVudW1lcmF0b3IgPT0gbnVsbCkNCgkJCXsNCgkJCQlyZXR1cm4gVlNDb25zdGFudHNFeC5GQUxTRTsNCgkJCX0NCgkJCXdoaWxlIChyZWZlcmVuY2VFbnVtZXJhdG9yLk1vdmVOZXh0KCkpDQoJCQl7DQoJCQkJaWYgKHJlZmVyZW5jZUVudW1lcmF0b3IuQ3VycmVudCBpcyBJQm91bmRBc3NldFJlZmVyZW5jZSkNCgkJCQl7DQoJCQkJCUlCb3VuZEFzc2V0UmVmZXJlbmNlIHJlZmVyZW5jZSA9IHJlZmVyZW5jZUVudW1lcmF0b3IuQ3VycmVudCBhcyBJQm91bmRBc3NldFJlZmVyZW5jZTsNCgkJCQkJaWYgKHJlZmVyZW5jZSAhPSBudWxsICYmIENoZWNrUmVmZXJlbmNlKHBhY2thZ2VOYW1lLHJlZmVyZW5jZSkpDQoJCQkJCXsNCgkJCQkJCXJlZmVyZW5jZUVudW1lcmF0b3IgPSBudWxsOw0KCQkJCQkJcGFja2FnZUVudW1lcmF0b3IgPSBudWxsOw0KCQkJCQkJcmV0dXJuIFZTQ29uc3RhbnRzRXguVFJVRTsNCgkJCQkJfQ0KCQkJCX0NCgkJCQlpZiAob2xlQ29tcG9uZW50TWFuYWdlci5GQ29udGludWVJZGxlKCkgPT0gVlNDb25zdGFudHNFeC5GQUxTRSkNCgkJCQl7DQoJCQkJCXJldHVybiBWU0NvbnN0YW50c0V4LlRSVUU7DQoJCQkJfQ0KCQkJfQ0KCQkJcmVmZXJlbmNlRW51bWVyYXRvciA9IG51bGw7DQoJCQlyZXR1cm4gVlNDb25zdGFudHNFeC5GQUxTRTsNCgkJfQ0KDQoJCWludCBJT2xlQ29tcG9uZW50LkZEb0lkbGUodWludCBfZ3JmaWRsZWYpDQoJCXsNCgkJCV9PTEVJRExFRiBncmZpZGxlZiA9IChfT0xFSURMRUYpX2dyZmlkbGVmOw0KCQkJaWYgKHJlZmVyZW5jZUVudW1lcmF0b3IgIT0gbnVsbCAmJiBwYWNrYWdlRW51bWVyYXRvciE9bnVsbCkNCgkJCXsNCgkJCQlpZiAoUmVmZXJlbmNlTG9vcChwYWNrYWdlRW51bWVyYXRvci5DdXJyZW50LktleSkgPT0gVlNDb25zdGFudHNFeC5UUlVFKQ0KCQkJCXsNCgkJCQkJcmV0dXJuIFZTQ29uc3RhbnRzRXguVFJVRTsNCgkJCQl9DQoJCQl9DQoJCQlpZiAocGFja2FnZUVudW1lcmF0b3IgPT0gbnVsbCkNCgkJCXsNCgkJCQlwYWNrYWdlRW51bWVyYXRvciA9IHRoaXMucGFja2FnZVBlcnNpc3RlbmNlRGF0YS5HZXRFbnVtZXJhdG9yKCk7DQoJCQl9DQoJCQl3aGlsZSAoIHBhY2thZ2VFbnVtZXJhdG9yLk1vdmVOZXh0KCkpDQoJCQl7DQoJCQkJcmVmZXJlbmNlRW51bWVyYXRvciA9IA0KCQkJCQlwYWNrYWdlRW51bWVyYXRvci5DdXJyZW50LlZhbHVlLlJlZmVyZW5jZXMuR2V0RW51bWVyYXRvcigpOw0KCQkJCWlmIChSZWZlcmVuY2VMb29wKHBhY2thZ2VFbnVtZXJhdG9yLkN1cnJlbnQuS2V5KSA9PSBWU0NvbnN0YW50c0V4LlRSVUUgfHwgb2xlQ29tcG9uZW50TWFuYWdlci5GQ29udGludWVJZGxlKCkgPT0gVlNDb25zdGFudHNFeC5GQUxTRSkNCgkJCQl7DQoJCQkJCXJldHVybiBWU0NvbnN0YW50c0V4LlRSVUU7DQoJCQkJfQ0KCQkJfQ0KCQkJcmVmZXJlbmNlRW51bWVyYXRvciA9IG51bGw7DQoJCQlwYWNrYWdlRW51bWVyYXRvciA9IG51bGw7DQoJCQlyZXR1cm4gVlNDb25zdGFudHNFeC5GQUxTRTsNCgkJfQ0KDQoJCWludCBJT2xlQ29tcG9uZW50LkZQcmVUcmFuc2xhdGVNZXNzYWdlKE1TR1tdIHBNc2cpDQoJCXsNCgkJCXJldHVybiBWU0NvbnN0YW50c0V4LkZBTFNFOw0KCQl9DQoNCgkJaW50IElPbGVDb21wb25lbnQuRlF1ZXJ5VGVybWluYXRlKGludCBmUHJvbXB0VXNlcikNCgkJew0KCQkJcmV0dXJuIFZTQ29uc3RhbnRzRXguVFJVRTsNCgkJfQ0KDQoJCWludCBJT2xlQ29tcG9uZW50LkZSZXNlcnZlZDEodWludCBkd1Jlc2VydmVkLCB1aW50IG1lc3NhZ2UsIEludFB0ciB3UGFyYW0sIEludFB0ciBsUGFyYW0pDQoJCXsNCgkJCXJldHVybiBWU0NvbnN0YW50c0V4LlRSVUU7DQoJCX0NCg0KCQlJbnRQdHIgSU9sZUNvbXBvbmVudC5Id25kR2V0V2luZG93KHVpbnQgZHdXaGljaCwgdWludCBkd1Jlc2VydmVkKQ0KCQl7DQoJCQlyZXR1cm4gSW50UHRyLlplcm87DQoJCX0NCg0KCQl2b2lkIElPbGVDb21wb25lbnQuT25BY3RpdmF0aW9uQ2hhbmdlKElPbGVDb21wb25lbnQgcGljLCBpbnQgZlNhbWVDb21wb25lbnQsIE9MRUNSSU5GT1tdIHBjcmluZm8sIGludCBmSG9zdElzQWN0aXZhdGluZywgT0xFQ0hPU1RJTkZPW10gcGNob3N0aW5mbywgdWludCBkd1Jlc2VydmVkKQ0KCQl7DQoJCX0NCg0KCQl2b2lkIElPbGVDb21wb25lbnQuT25BcHBBY3RpdmF0ZShpbnQgZkFjdGl2ZSwgdWludCBkd090aGVyVGhyZWFkSUQpDQoJCXsNCgkJfQ0KDQoJCXZvaWQgSU9sZUNvbXBvbmVudC5PbkVudGVyU3RhdGUodWludCB1U3RhdGVJRCwgaW50IGZFbnRlcikNCgkJew0KCQl9DQoNCgkJdm9pZCBJT2xlQ29tcG9uZW50Lk9uTG9zZUFjdGl2YXRpb24oKQ0KCQl7DQoJCX0NCg0KCQl2b2lkIElPbGVDb21wb25lbnQuVGVybWluYXRlKCkNCgkJew0KCQl9DQoNCgkJI2VuZHJlZ2lvbg0KCX0NCn0NCg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>32</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/src/VisualStudio/Package/Templates/VSTemplateInfo.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>37</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/Configuration/mainconfig.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSINCiAgICBHdWlkPSIyM0ZDMjlDOS1GQUZFLTQ3ZjEtQjYzMy1CNTQ4RTc4OEREREEiIA0KICAgIENhcHRpb249IlBhY2thZ2UgQ2FwdGlvbiIgDQogICAgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCgk8UmVjaXBlcz4NCgkJPCEtLSBJbmNsdWRlIHRoZSByZXVzYWJsZSByZWNpcGUgZnJvbSByZWNpcGUueG1sIC0tPg0KICAgIDx4aTppbmNsdWRlIGhyZWY9InJlY2lwZS54bWwiIHhtbG5zOnhpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hJbmNsdWRlIiAvPg0KCQk8UmVjaXBlIE5hbWU9IlRlc3RSZWNpcGVGcm9tQ29uZmlnIj4NCgkJCTxUeXBlcz4NCgkJCQk8VHlwZUFsaWFzIE5hbWU9IkFkZFJlbW90aW5nVG9Qcm9qZWN0IiBUeXBlPSIgYXNzZW1ibHkgKyBjbGFzcyArIHZlcnNpb24gKyAuLi4iLz4NCgkJCQk8VHlwZUFsaWFzIE5hbWU9IkZvbGRlck5hbWVQcm92aWRlciIgVHlwZT0iYXNzZW1ibHkgKyBjbGFzcyArIHZlcnNpb24gKyAuLi4iLz4NCgkJCTwvVHlwZXM+DQoJCQk8Q2FwdGlvbj5UZXN0IFJlY2lwZSBmcm9tIENvbmZpZzwvQ2FwdGlvbj4NCgkJCTxEZXNjcmlwdGlvbj5UaGlzIGlzIGEgcmVjaXBlIGRlZmluZWQgaW4gU2hhZG93RmF4LmNvbmZpZzwvRGVzY3JpcHRpb24+DQoJCQk8QXJndW1lbnRzPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJQcm9qZWN0TmFtZSIgVHlwZT0iRFRFLlByb2plY3QiIC8+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkZvbGRlck5hbWUiIFR5cGU9IkRURS5Gb2xkZXIiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJGb2xkZXJOYW1lUHJvdmlkZXIiIC8+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQm9vbEFyZ3VtZW50MSIgVHlwZT0iQm9vbGVhbiIgLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQm9vbEFyZ3VtZW50MiIgVHlwZT0iQm9vbGVhbiIgLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQm9vbEFyZ3VtZW50MyIgVHlwZT0iQm9vbGVhbiIgLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQ29sb3JBcmd1bWVudDEiIFR5cGU9IlN5c3RlbS5EcmF3aW5nLkNvbG9yIiAvPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJDb2xvckFyZ3VtZW50MiIgVHlwZT0iU3lzdGVtLkRyYXdpbmcuQ29sb3IiIC8+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkNvbG9yQXJndW1lbnQzIiBUeXBlPSJTeXN0ZW0uRHJhd2luZy5Db2xvciIgLz4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJCTxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiANCiAgICAgICAgICAgICAgICBTY2hlbWFWZXJzaW9uPSIxLjAiIA0KICAgICAgICAgICAgICAgIE5hbWU9Ik15V2l6YXJkIj4NCgkJCQkJPCEtLSBJbmNsdWRlIHRoZSBjb21tb24gdHlwZXMgLS0+DQogICAgICAgICAgPHhpOmluY2x1ZGUgaHJlZj0id2l6YXJkdHlwZXMueG1sIiB4bWxuczp4aT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YSW5jbHVkZSIgLz4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2U+DQoJCQkJCQkJPFRpdGxlPk15V2l6YXJkIFRpdGxlPC9UaXRsZT4NCgkJCQkJCQk8TGlua1RpdGxlPk15V2l6YXJkIFN1YnRpdGxlPC9MaW5rVGl0bGU+DQoJCQkJCQkJPEhlbHA+TXlXaXphcmQgSGVscDwvSGVscD4NCgkJCQkJCQk8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IlByb2plY3ROYW1lIiBMYWJlbD0iUHJvamVjdE5hbWUiPiANCiAgICAgICAgICAgICAgICAgIDxUb29sdGlwPiIuLi4iPC9Ub29sdGlwPg0KICAgICAgICAgICAgICAgICAgPCEtLSBJbmNsdWRlIGhlbHAgZnJvbSBleHRlcm5hbCBmaWxlLiAtLT4NCiAgICAgICAgICAgICAgICAgIDx4aTppbmNsdWRlIGhyZWY9ImhlbHAueG1sIiB4bWxuczp4aT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YSW5jbHVkZSIgLz4NCiAgICAgICAgICAgICAgICAgIDxFZGl0b3IgVHlwZT0iUHJvamVjdE5hbWVTZWxlY3RvciIgLz4NCiAgICAgICAgICAgICAgICA8L0ZpZWxkPg0KCQkJCQkJCTwvRmllbGRzPg0KCQkJCQkJPC9QYWdlPg0KCQkJCQk8L1BhZ2VzPg0KCQkJCTwvV2l6YXJkPg0KCQkJPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCTxBY3Rpb25zPg0KCQkJCTxBY3Rpb24gTmFtZT0iTXlBY3Rpb24iIFR5cGU9IkFkZFJlbW90aW5nVG9Qcm9qZWN0Ij4NCgkJCQkJPElucHV0IE5hbWU9IlBhcmFtZXRlcjAxIiBSZWNpcGVBcmd1bWVudD0iUHJvamVjdE5hbWUiIC8+DQoJCQkJPC9BY3Rpb24+DQoJCQkJPEFjdGlvbiBUeXBlPSJEaXNwbGF5TWVzc2FnZSIgTmFtZT0iQW4gb3B0aW9uYWwgZnJpZW5kbHkgTmFtZSBkbyBkaXNwbGF5IGluIHNvbWUgVW5kby9SZWRvIGZhY2lsaXR5Ij4NCgkJCQkJPCEtLSBUaGVyZSBtYXkgYmUgbm8gYXJndW1lbnRzIHdoYXRzb2V2ZXIuIC0tPg0KCQkJCTwvQWN0aW9uPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgkJPFJlY2lwZSBOYW1lPSJUZXN0UmVjaXBlV2l0aEluY2x1ZGVkV2l6YXJkIj4NCgkJCTxUeXBlcz4NCgkJCQk8VHlwZUFsaWFzIE5hbWU9IkFkZFJlbW90aW5nVG9Qcm9qZWN0IiBUeXBlPSIgYXNzZW1ibHkgKyBjbGFzcyArIHZlcnNpb24gKyAuLi4iLz4NCgkJCQk8VHlwZUFsaWFzIE5hbWU9IkZvbGRlck5hbWVQcm92aWRlciIgVHlwZT0iYXNzZW1ibHkgKyBjbGFzcyArIHZlcnNpb24gKyAuLi4iLz4NCgkJCTwvVHlwZXM+DQoJCQk8Q2FwdGlvbj5UZXN0IFJlY2lwZSBmcm9tIENvbmZpZzwvQ2FwdGlvbj4NCgkJCTxEZXNjcmlwdGlvbj5UaGlzIGlzIGEgcmVjaXBlIGRlZmluZWQgaW4gU2hhZG93RmF4LmNvbmZpZzwvRGVzY3JpcHRpb24+DQoJCQk8QXJndW1lbnRzPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJQcm9qZWN0TmFtZSIgVHlwZT0iRFRFLlByb2plY3QiIC8+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkZvbGRlck5hbWUiIFR5cGU9IkRURS5Gb2xkZXIiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJGb2xkZXJOYW1lUHJvdmlkZXIiIC8+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJCTwhLS0gSW5jbHVkZSB0aGUgcmV1c2FibGUgd2l6YXJkIGZyb20gd2l6YXJkLnhtbCAtLT4NCiAgICAgICAgPHhpOmluY2x1ZGUgaHJlZj0id2l6YXJkLnhtbCIgeG1sbnM6eGk9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWEluY2x1ZGUiIC8+DQoJCQk8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBOYW1lPSJNeUFjdGlvbiIgVHlwZT0iSGVsbG9Xb3JsZEFjdGlvbiI+DQoJCQkJPC9BY3Rpb24+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCTwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>21</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/Configuration/smallconfig.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSIgDQogICAgR3VpZD0iMUU0QTFCRUItRkY5Ni00ZmEyLUExODEtNDg5RjYxMUIwMkVDIiANCiAgICBDYXB0aW9uPSJQYWNrYWdlIENhcHRpb24iDQogICAgU2NoZW1hVmVyc2lvbj0iMS4wIiA+DQoJPFJlY2lwZXM+DQoJCTxSZWNpcGUgTmFtZT0iVGVzdFJlY2lwZUZyb21Db25maWciPg0KCQkJPENhcHRpb24+VGVzdCBSZWNpcGUgZnJvbSBDb25maWc8L0NhcHRpb24+DQoJCQk8RGVzY3JpcHRpb24+VGVzdCBEZXNjcmlwdGlvbjwvRGVzY3JpcHRpb24+DQoJCQk8QXJndW1lbnRzPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJYU0QiIFR5cGU9IlN0cmluZyIgLz4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJCTxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiANCiAgICAgICAgICAgICAgICBTY2hlbWFWZXJzaW9uPSIxLjAiIA0KICAgICAgICAgICAgICAgIE5hbWU9Ik15V2l6YXJkIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2U+DQoJCQkJCQkJPFRpdGxlPk15V2l6YXJkIFRpdGxlPC9UaXRsZT4NCgkJCQkJCQk8TGlua1RpdGxlPk15V2l6YXJkIFN1YnRpdGxlPC9MaW5rVGl0bGU+DQoJCQkJCQkJPEhlbHA+TXlXaXphcmQgSGVscDwvSGVscD4NCgkJCQkJCQk8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IlhTRCIgTGFiZWw9IlhTRCI+DQogICAgICAgICAgICAgICAgICA8VG9vbHRpcD4iLi4uIjwvVG9vbHRpcD4NCiAgICAgICAgICAgICAgICAgIDxFZGl0b3IgVHlwZT0iUHJvamVjdE5hbWVTZWxlY3RvciIgLz4NCiAgICAgICAgICAgICAgICA8L0ZpZWxkPg0KCQkJCQkJCTwvRmllbGRzPg0KCQkJCQkJPC9QYWdlPg0KCQkJCQk8L1BhZ2VzPg0KCQkJCTwvV2l6YXJkPg0KCQkJPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCTxBY3Rpb25zPg0KCQkJCTxBY3Rpb24gTmFtZT0iTXlBY3Rpb24iIFR5cGU9IkFkZFhzZFRvUHJvamVjdCI+DQoJCQkJCTxJbnB1dCBOYW1lPSJYc2RGaWxlIiBSZWNpcGVBcmd1bWVudD0iWFNEIiAvPg0KCQkJCTwvQWN0aW9uPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgk8L1JlY2lwZXM+DQo8L0d1aWRhbmNlUGFja2FnZT4=</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>5</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/Library/ExpressionEvaluator.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIEd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFQyIgQ2FwdGlvbj0iVGVzdGluZyBQYWNrYWdlIiBIb3N0PSJWaXN1YWxTdHVkaW8iIFNjaGVtYVZlcnNpb249IjEuMCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlIj4NCiAgPFJlY2lwZXM+DQogICAgPFJlY2lwZSBOYW1lPSJEZWZhdWx0Q29sb3JzIiBSZWN1cnJlbnQ9ImZhbHNlIj4NCiAgICAgIDxDYXB0aW9uPkV4ZWN1dGVzIGFuIGFjdGlvbiBwYXNzaW5nIGRlZmF1bHQgdmFsdWVzIGZyb20gdmFsdWUgcHJvdmlkZXIgZGVmYXVsdCBleHByZXNzaW9uPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkJsdWUiIFR5cGU9IlN5c3RlbS5EcmF3aW5nLkNvbG9yLCBTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj0yLjAuMzYwMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EiPg0KICAgICAgICAgIDxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRXhwcmVzc2lvbkV2YWx1YXRvclZhbHVlUHJvdmlkZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiDQogICAgICAgICAgICAgICAgICAgICAgICAgRXhwcmVzc2lvbj0iQmx1ZSIvPg0KICAgICAgICA8L0FyZ3VtZW50Pg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iR3JlZW4iIFR5cGU9IlN5c3RlbS5EcmF3aW5nLkNvbG9yLCBTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj0yLjAuMzYwMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EiPg0KICAgICAgICAgIDxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRXhwcmVzc2lvbkV2YWx1YXRvclZhbHVlUHJvdmlkZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiDQogICAgICAgICAgICAgICAgICAgICAgICAgRXhwcmVzc2lvbj0iR3JlZW4iLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IlJlZCIgVHlwZT0iU3lzdGVtLkRyYXdpbmcuQ29sb3IsIFN5c3RlbS5EcmF3aW5nLCBWZXJzaW9uPTIuMC4zNjAwLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYSI+DQogICAgICAgICAgPFZhbHVlUHJvdmlkZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5WYWx1ZVByb3ZpZGVycy5FeHByZXNzaW9uRXZhbHVhdG9yVmFsdWVQcm92aWRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSINCiAgICAgICAgICAgICAgICAgICAgICAgICBFeHByZXNzaW9uPSJSZWQiLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iQ2hlY2tDb2xvcnMiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVGVzdC5FeHByZXNzaW9uRXZhbHVhdG9yVGVzdCtDaGVja0NvbG9yc0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0Ij4NCiAgICAgICAgICA8SW5wdXQgTmFtZT0iQmx1ZSIgUmVjaXBlQXJndW1lbnQ9IkJsdWUiLz4NCiAgICAgICAgICA8SW5wdXQgTmFtZT0iR3JlZW4iIFJlY2lwZUFyZ3VtZW50PSJHcmVlbiIvPg0KICAgICAgICAgIDxJbnB1dCBOYW1lPSJSZWQiIFJlY2lwZUFyZ3VtZW50PSJSZWQiLz4NCiAgICAgICAgPC9BY3Rpb24+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJEZWZhdWx0RGF0ZSIgUmVjdXJyZW50PSJmYWxzZSI+DQogICAgICA8Q2FwdGlvbj5FeGVjdXRlcyBhbiBhY3Rpb24gcGFzc2luZyBkZWZhdWx0IHZhbHVlcyBmcm9tIHZhbHVlIHByb3ZpZGVyIGRlZmF1bHQgZXhwcmVzc2lvbjwvQ2FwdGlvbj4NCiAgICAgIDxBcmd1bWVudHM+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJEYXRlIiBUeXBlPSJTeXN0ZW0uRGF0ZVRpbWUiPg0KICAgICAgICAgIDxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRXhwcmVzc2lvbkV2YWx1YXRvclZhbHVlUHJvdmlkZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiDQogICAgICAgICAgICAgICAgICAgICAgICAgRXhwcmVzc2lvbj0iMTUgTm92ZW1iZXIgMjAwNCIvPg0KICAgICAgICA8L0FyZ3VtZW50Pg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJDaGVja0RhdGUiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVGVzdC5FeHByZXNzaW9uRXZhbHVhdG9yVGVzdCtDaGVja0RhdGUsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVGVzdCI+DQogICAgICAgICAgPElucHV0IE5hbWU9IkRhdGUiIFJlY2lwZUFyZ3VtZW50PSJEYXRlIi8+DQogICAgICAgIDwvQWN0aW9uPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iRXhwcmVzc2lvbk1pc3NpbmciPg0KICAgICAgPENhcHRpb24+Q29uZmlnPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkIiPg0KICAgICAgICAgIDxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRXhwcmVzc2lvbkV2YWx1YXRvclZhbHVlUHJvdmlkZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IkV4cHJlc3Npb25WYWx1ZUVkaXRvcjEiPg0KICAgICAgPENhcHRpb24+Q29uZmlnPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkEiPg0KICAgICAgICAgIDxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRXhwcmVzc2lvbkV2YWx1YXRvclZhbHVlUHJvdmlkZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiDQogICAgICAgICAgICAgICAgICAgICAgICAgRXhwcmVzc2lvbj0iQVZhbHVlIi8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJCIj4NCiAgICAgICAgICA8VmFsdWVQcm92aWRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlZhbHVlUHJvdmlkZXJzLkV4cHJlc3Npb25FdmFsdWF0b3JWYWx1ZVByb3ZpZGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ig0KICAgICAgICAgICAgICAgICAgICAgICAgIEV4cHJlc3Npb249IiQoQSlCIi8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0LkVuc3VyZVZhbHVlQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlRlc3QiDQogICAgICAgICAgICAgICAgVmFsdWU9IkFWYWx1ZUIiPg0KICAgICAgICAgIDxJbnB1dCBOYW1lPSJWYWx1ZSIgUmVjaXBlQXJndW1lbnQ9IkIiLz4NCiAgICAgICAgPC9BY3Rpb24+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJFeHByZXNzaW9uVmFsdWVFZGl0b3IyIj4NCiAgICAgIDxDYXB0aW9uPkNvbmZpZzwvQ2FwdGlvbj4NCiAgICAgIDxBcmd1bWVudHM+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJCIj4NCiAgICAgICAgICA8VmFsdWVQcm92aWRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlZhbHVlUHJvdmlkZXJzLkV4cHJlc3Npb25FdmFsdWF0b3JWYWx1ZVByb3ZpZGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ig0KICAgICAgICAgICAgICAgICAgICAgICAgIEV4cHJlc3Npb249IiQoQSktQiI+DQogICAgICAgICAgICA8TW9uaXRvckFyZ3VtZW50IE5hbWU9IkEiIC8+DQogICAgICAgICAgPC9WYWx1ZVByb3ZpZGVyPg0KICAgICAgICA8L0FyZ3VtZW50Pg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQSIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgICA8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgDQogICAgICAgICAgICAgICAgU2NoZW1hVmVyc2lvbj0iMS4wIiANCiAgICAgICAgICAgICAgICBOYW1lPSJDaGFuZ2VNb25pdG9yaW5nV2l6YXJkIj4NCiAgICAgICAgICA8UGFnZXM+DQogICAgICAgICAgICA8UGFnZSBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlRlc3QuRXhwcmVzc2lvbkV2YWx1YXRvclRlc3QrQ2hhbmdlVmFsdWVTdGVwLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlRlc3QiPg0KICAgICAgICAgICAgICA8VGl0bGU+TW9uaXRvciBhbmQgZmluaXNoPC9UaXRsZT4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJBIiBMYWJlbD0iRHVtbXlBIiAvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICA8L1BhZ2VzPg0KICAgICAgICA8L1dpemFyZD4NCiAgICAgIDwvR2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJEb05vdGhpbmciIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVGVzdC5FbnN1cmVWYWx1ZUFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0Ig0KICAgICAgICAgICAgICAgIFZhbHVlPSJBIG5ldyB2YWx1ZS1CIj4NCiAgICAgICAgICA8SW5wdXQgTmFtZT0iVmFsdWUiIFJlY2lwZUFyZ3VtZW50PSJCIi8+DQogICAgICAgIDwvQWN0aW9uPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICA8L1JlY2lwZXM+DQo8L0d1aWRhbmNlUGFja2FnZT4=</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>11</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/Library/LibraryTests.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIEd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFQyIgQ2FwdGlvbj0iVGVzdGluZyBQYWNrYWdlIiBIb3N0PSJWaXN1YWxTdHVkaW8iIFNjaGVtYVZlcnNpb249IjEuMCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlIj4NCiAgPFJlY2lwZXM+DQogICAgPFJlY2lwZSBOYW1lPSJUZXN0SWRlbnRpZmllciI+DQogICAgICA8Q2FwdGlvbj5UZXN0cyBjb2RlIGlkZW50aWZpZXI8L0NhcHRpb24+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iSWRlbnRpZmllciI+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuQ29kZUlkZW50aWZpZXJTdHJpbmdDb252ZXJ0ZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgICA8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCiAgICAgICAgICA8UGFnZXM+DQogICAgICAgICAgICA8UGFnZSBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlRlc3QuTGlicmFyeVRlc3RzK0NvZGVJZGVudGlmaWVyU3RlcCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0Ij4NCiAgICAgICAgICAgICAgPFRpdGxlPlRlc3QgSWRlbnRpZmllcjwvVGl0bGU+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iSWRlbnRpZmllciIgTGFiZWw9IklkZW50aWZpZXIiIEludmFsaWRWYWx1ZU1lc3NhZ2U9IkludmFsaWQgaWRlbnRpZmllciIgLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgPC9QYWdlcz4NCiAgICAgICAgPC9XaXphcmQ+DQogICAgICA8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iTmFtZXNwYWNlQ29udmVydGVyIj4NCiAgICAgIDxDYXB0aW9uPlRlc3RzIC5ORVQgbmFtZXNwYWNlPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9Ik5hbWVzcGFjZSI+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuTmFtZXNwYWNlU3RyaW5nQ29udmVydGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ii8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIFNjaGVtYVZlcnNpb249IjEuMCI+DQogICAgICAgICAgPFBhZ2VzPg0KICAgICAgICAgICAgPFBhZ2UgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0LkxpYnJhcnlUZXN0cytOYW1lc3BhY2VTdGVwLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlRlc3QiPg0KICAgICAgICAgICAgICA8VGl0bGU+VGVzdCBJZGVudGlmaWVyPC9UaXRsZT4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJOYW1lc3BhY2UiIExhYmVsPSJOYW1lc3BhY2UiIEludmFsaWRWYWx1ZU1lc3NhZ2U9IkludmFsaWQgbmFtZXNwYWNlIiAvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICA8L1BhZ2VzPg0KICAgICAgICA8L1dpemFyZD4NCiAgICAgIDwvR2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJSZWdleENvbnZlcnRlckZhaWxlZEd1aWQiPg0KICAgICAgPFR5cGVzPg0KICAgICAgICA8VHlwZUFsaWFzIE5hbWU9IlJlZ2V4IiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuUmVnZXhNYXRjaFN0cmluZ0NvbnZlcnRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgICAgPFR5cGVBbGlhcyBOYW1lPSJFdmFsdWF0b3IiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVmFsdWVQcm92aWRlcnMuRXhwcmVzc2lvbkV2YWx1YXRvclZhbHVlUHJvdmlkZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQogICAgICA8L1R5cGVzPg0KICAgICAgPENhcHRpb24+VGVzdHMgcmVndWxhciBleHByZXNzaW9uIGNvbnZlcnRlcjwvQ2FwdGlvbj4NCiAgICAgIDxBcmd1bWVudHM+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJHVUlEIj4NCiAgICAgICAgICA8Q29udmVydGVyIFR5cGU9IlJlZ2V4IiBFeHByZXNzaW9uPSJeWzAtOWEtZkEtRl17OH0tKFswLTlhLWZBLUZdezR9LSl7M31bMC05YS1mQS1GXXsxMn0kIiAvPg0KICAgICAgICAgIDwhLS0gU2V0cyB0aGUgdmFsdWUgdG8gYW4gaW52YWxpZCBHVUlELiBXaWxsIHRocm93IGFuIGV4Y2VwdGlvbiAtLT4NCiAgICAgICAgICA8VmFsdWVQcm92aWRlciBUeXBlPSJFdmFsdWF0b3IiIEV4cHJlc3Npb249IkFuIGludmFsaWQgZ3VpZCIgLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iRG9Ob3RoaW5nIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuRG9Ob3RoaW5nQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iUmVnZXhDb252ZXJ0ZXJNYWlsIj4NCiAgICAgIDxUeXBlcz4NCiAgICAgICAgPFR5cGVBbGlhcyBOYW1lPSJSZWdleCIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5Db252ZXJ0ZXJzLlJlZ2V4TWF0Y2hTdHJpbmdDb252ZXJ0ZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQogICAgICA8L1R5cGVzPg0KICAgICAgPENhcHRpb24+VGVzdHMgcmVndWxhciBleHByZXNzaW9uIGNvbnZlcnRlcjwvQ2FwdGlvbj4NCiAgICAgIDxBcmd1bWVudHM+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJNYWlsIj4NCiAgICAgICAgICA8IS0tIFNpbXBsZSBleHByZXNzaW9uIGZvciBlbWFpbHMuLi4uIG5vdCBhbiBSRkMgMjgyMiBjb21wbGlhbnQgb25lLiANCiAgICAgICAgICBGb3Igc3VjaCBhIGJlYXN0LCB3ZSdkIGhhdmUgdG8gdXNlIHRoaXM6IGh0dHA6Ly9yZWdleHBsaWIuY29tL1JFRGV0YWlscy5hc3B4P3JlZ2V4cF9pZD03MTEgLS0+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJSZWdleCIgRXhwcmVzc2lvbj0iXlx3Wy0uX1x3XSpcd0Bcd1stLl9cd10qXHdcLlx3ezIsM30kIiAvPg0KICAgICAgICA8L0FyZ3VtZW50Pg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8R2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICAgIDxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVGVzdC5MaWJyYXJ5VGVzdHMrUmVnZXhDb252ZXJ0ZXJNYWlsU3RlcCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0Ij4NCiAgICAgICAgICAgICAgPFRpdGxlPlRlc3QgSWRlbnRpZmllcjwvVGl0bGU+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iTWFpbCIgTGFiZWw9Ik1haWwiIEludmFsaWRWYWx1ZU1lc3NhZ2U9IkludmFsaWQgbWFpbCIgLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgPC9QYWdlcz4NCiAgICAgICAgPC9XaXphcmQ+DQogICAgICA8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iRG9Ob3RoaW5nIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuRG9Ob3RoaW5nQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iT3V0cHV0QXR0cmlidXRlTWlzc2luZyI+DQogICAgICA8Q2FwdGlvbj5UZXN0cyB0aGF0IGFuIG91dHB1dCBhdHRyaWJ1dGUgbXVzdCBiZSBwcmVzZW50IHdoZW4gaXQgaXMgdXNlZCBhcyBhY3Rpb25vdXRwdXQgb2YgYW4gaW5wdXQgYWN0aW9uPC9DYXB0aW9uPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iQ2hlY2tJc01hcmtlZE91dHB1dCIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0LkVuc3VyZVZhbHVlQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LlRlc3QiDQogICAgICAgICAgICAgICAgVmFsdWU9IkhlbGxvIFdvcmxkISI+DQogICAgICAgICAgPElucHV0IE5hbWU9IlZhbHVlIiBBY3Rpb25PdXRwdXQ9IklucHV0VmFsdWUuVmFsdWUiIC8+DQogICAgICAgIDwvQWN0aW9uPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IklucHV0VmFsdWUiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuVGVzdC5FbnN1cmVWYWx1ZUFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5UZXN0Ig0KICAgICAgICAgICAgICAgIFZhbHVlPSJIZWxsbyBXb3JsZCEiPg0KICAgICAgICAgIDxJbnB1dCBOYW1lPSJWYWx1ZSIgLz4NCiAgICAgICAgPC9BY3Rpb24+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogIDwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>9</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/Action-DuplicateParam.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+IA0KPEd1aWRhbmNlUGFja2FnZSAgeG1sbnM9J2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlJw0KCUd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFRCIgDQoJQ2FwdGlvbj0nUGFja2FnZSB0aGF0IHRlc3RzIGFjdGlvbnMgZXhlY3V0aW9uJw0KCVNjaGVtYVZlcnNpb249JzEuMCc+DQogIDxSZWNpcGVzPg0KICAgIDxSZWNpcGUgTmFtZT0nRmFpbEFjdGlvbic+DQogICAgICA8Q2FwdGlvbj5GYWlsQWN0aW9uPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9J0EnIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9J0ZhaWwnIFR5cGU9J01pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkZhaWxBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QnPg0KICAgICAgICAgIDxJbnB1dCBOYW1lPSdBJyBSZWNpcGVBcmd1bWVudD0nQScgLz4NCiAgICAgICAgICA8SW5wdXQgTmFtZT0nQScgUmVjaXBlQXJndW1lbnQ9J0EnLz4NCiAgICAgICAgPC9BY3Rpb24+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogIDwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>9</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/ActionExecutionTests.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+IA0KPEd1aWRhbmNlUGFja2FnZSAgeG1sbnM9J2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlJw0KCUd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFRCIgDQoJQ2FwdGlvbj0nUGFja2FnZSB0aGF0IHRlc3RzIGFjdGlvbnMgZXhlY3V0aW9uJw0KCVNjaGVtYVZlcnNpb249JzEuMCc+DQogIDxSZWNpcGVzPg0KICAgIDxSZWNpcGUgTmFtZT0nU3VjY2Vzc2Z1bGxBY3Rpb24nPg0KICAgICAgPENhcHRpb24+U3VjY2Vzc2Z1bGxBY3Rpb248L0NhcHRpb24+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSdTdWNjZXNzQWN0aW9uJyBUeXBlPSdNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5TdWNjZXNzQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0JyAvPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0nRmFpbEFjdGlvbic+DQogICAgICA8Q2FwdGlvbj5GYWlsQWN0aW9uPC9DYXB0aW9uPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0nRmFpbCcgVHlwZT0nTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuRmFpbEFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCcgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9J1N1Y2Nlc3NBbmRGYWlsQWN0aW9ucyc+DQogICAgICA8Q2FwdGlvbj5TdWNjZXNzQW5kRmFpbEFjdGlvbnM8L0NhcHRpb24+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSdTdWNjZXNzQWN0aW9uJyBUeXBlPSdNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5TdWNjZXNzQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0JyAvPg0KICAgICAgICA8QWN0aW9uIE5hbWU9J0ZhaWxBY3Rpb24nIFR5cGU9J01pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkZhaWxBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QnIC8+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogIDwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>18</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/ManifestInstallerTest.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>5</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/PackageManagementTest.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+IA0KPEd1aWRhbmNlUGFja2FnZSBHdWlkPSIxRTRBMUJFQi1GRjk2LTRmYTItQTE4MS00ODlGNjExQjAyRUQiIEJpbmRpbmdSZWNpcGU9Ikhvc3RCaW5kaW5nIiBDYXB0aW9uPSJUZXN0aW5nIFBhY2thZ2UiIERlc2NyaXB0aW9uPSJTYW1wbGUgcGFja2FnZSBmb3IgbWFuYWdlbWVudCB0ZXN0cyIgSG9zdD0iUGFja2FnZU1hbmFnZW1lbnRIb3N0IiBTY2hlbWFWZXJzaW9uPSIxLjAiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSI+DQoJPFJlY2lwZXM+DQoJCTxSZWNpcGUgTmFtZT0iVmFsaWRhdGVTb2x1dGlvbiI+DQoJCQk8Q2FwdGlvbj5WYWxpZGF0ZSBTb2x1dGlvbiBTdHJ1Y3R1cmU8L0NhcHRpb24+DQoJCQk8RGVzY3JpcHRpb24+VmFsaWRhdGVzIHRoYXQgdGhlIGN1cnJlbnQgc29sdXRpb24gaXMgdmFsaWQgYWNjb3JkaW5nIHRvIGl0cyBraW5kIGFuZCBzb21lIG90aGVyIGFyZ3VtZW50IHZhbHVlcy48L0Rlc2NyaXB0aW9uPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iU29sdXRpb25LaW5kIiBUeXBlPSJTeXN0ZW0uQm9vbGVhbiIgLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iU29tT3RoZXJBcmd1bWVudCIgVHlwZT0iU3lzdGVtLlN0cmluZyIgUmVxdWlyZWQ9ImZhbHNlIiAvPg0KCQkJPC9Bcmd1bWVudHM+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkRvTm90aGluZ0F0VGhpc1RpbWUiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQWN0aW9ucy5Eb05vdGhpbmdBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCQk8UmVjaXBlIE5hbWU9IlB1Ymxpc2hTZXJ2aWNlcyI+DQoJCQk8Q2FwdGlvbj5QdWJsaXNoIENvbmZpZ3VyZWQgU2VydmljZXM8L0NhcHRpb24+DQoJCQk8RGVzY3JpcHRpb24+UHVibGlzaGVzIHRoZSBjb25maWd1cmVkIHNlcnZpY2VzIGluIHRoZSBzb2x1dGlvbiBvbiBhIGNlbnRyYWwgZGVwbG95bWVudCBzZXJ2ZXIuPC9EZXNjcmlwdGlvbj4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IlNlcnZlckxvY2F0aW9uIiBUeXBlPSJTeXN0ZW0uQm9vbGVhbiIgUmVxdWlyZWQ9ImZhbHNlIiAvPg0KCQkJPC9Bcmd1bWVudHM+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkNvcHlUb1NlcnZlciIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuUGFja2FnZU1hbmFnZW1lbnRUZXN0K1Rlc3RBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiIC8+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCQk8UmVjaXBlIE5hbWU9Ikhvc3RCaW5kaW5nIj4NCgkJCTxDYXB0aW9uPlBhY2thZ2UgQmluZGluZyBSZWNpcGU8L0NhcHRpb24+DQoJCQk8RGVzY3JpcHRpb24+Q3JlYXRlcyB0aGUgcmVmZXJlbmNlcyByZXF1aXJlZCBmb3IgdGhpcyBwYWNrYWdlLjwvRGVzY3JpcHRpb24+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkRvQmluZGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuUGFja2FnZU1hbmFnZW1lbnRUZXN0K0JpbmRpbmdBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiIC8+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCTwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>31</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/RecipeManagerTest.cs</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>8</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/RecipeTest-Binding.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIA0KICBHdWlkPSIxRTRBMUJFQi1GRjk2LTRmYTItQTE4MS00ODlGNjExQjAyRUQiIA0KCUhvc3Q9IlRlc3RIb3N0IiANCiAgQ2FwdGlvbj0iVGVzdGluZyBQYWNrYWdlIiANCiAgQmluZGluZ1JlY2lwZT0iQmluZGluZyIgDQogIFNjaGVtYVZlcnNpb249IjEuMCIgDQogIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSI+DQogIDxSZWNpcGVzPg0KICAgIDxSZWNpcGUgTmFtZT0iQmluZGluZyI+DQogICAgICA8Q2FwdGlvbj5DYXB0aW9uPC9DYXB0aW9uPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iRXhlY3V0ZUJpbmRpbmciIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlJlY2lwZVRlc3RzK0V4ZWN1dGVCaW5kaW5nQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0IiAvPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICA8L1JlY2lwZXM+DQo8L0d1aWRhbmNlUGFja2FnZT4=</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>11</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/RecipeTest-BindingInvalid.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIA0KICBHdWlkPSIxRTRBMUJFQi1GRjk2LTRmYTItQTE4MS00ODlGNjExQjAyRUQiIA0KCUhvc3Q9IlRlc3RIb3N0IiANCiAgQ2FwdGlvbj0iVGVzdGluZyBQYWNrYWdlIiANCiAgU2NoZW1hVmVyc2lvbj0iMS4wIiANCiAgQmluZGluZ1JlY2lwZT0ia3p1IiANCiAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlIj4NCiAgPFJlY2lwZXM+DQogICAgPFJlY2lwZSBOYW1lPSJUZXN0UmVjaXBlIj4NCiAgICAgIDxDYXB0aW9uPkRpY3Rpb25hcnkgc2VydmljZSB0ZXN0czwvQ2FwdGlvbj4NCiAgICAgIDxBcmd1bWVudHM+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJBVmFsdWUiIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIA0KICAgICAgICAgICAgICAgIFNjaGVtYVZlcnNpb249IjEuMCIgDQogICAgICAgICAgICAgICAgTmFtZT0iRGljdGlvbmFyeVdpemFyZCI+DQogICAgICAgICAgPFBhZ2VzPg0KICAgICAgICAgICAgPFBhZ2UgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuUmVjaXBlVGVzdFN0ZXAsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiPg0KICAgICAgICAgICAgICA8VGl0bGU+UmVjaXBlIFRlc3Q8L1RpdGxlPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFWYWx1ZSIgTGFiZWw9IkEgdmFsdWUiIC8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgIDwvUGFnZXM+DQogICAgICAgIDwvV2l6YXJkPg0KICAgICAgPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCTxBY3Rpb25zPg0KCQkJCTxBY3Rpb24gTmFtZT0iSGVsbG9Xb3JsZCIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuSGVsbG9Xb3JsZEFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCIgLz4NCgkJCTwvQWN0aW9ucz4NCgkJPC9SZWNpcGU+DQoJPC9SZWNpcGVzPg0KPC9HdWlkYW5jZVBhY2thZ2U+</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>22</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/RecipeTest.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIA0KCUd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFRCIgDQoJQ2FwdGlvbj0iVGVzdGluZyBQYWNrYWdlIiANCglIb3N0PSJUZXN0SG9zdCIgDQoJU2NoZW1hVmVyc2lvbj0iMS4wIiANCgl4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LWNvcmUiPg0KICA8UmVjaXBlcz4NCiAgICA8UmVjaXBlIE5hbWU9IlRlc3RSZWNpcGUiPg0KICAgICAgPENhcHRpb24+RGljdGlvbmFyeSBzZXJ2aWNlIHRlc3RzPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFWYWx1ZSIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgICA8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgDQogICAgICAgICAgICAgICAgU2NoZW1hVmVyc2lvbj0iMS4wIiANCiAgICAgICAgICAgICAgICBOYW1lPSJEaWN0aW9uYXJ5V2l6YXJkIj4NCiAgICAgICAgICA8UGFnZXM+DQogICAgICAgICAgICA8UGFnZSBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5SZWNpcGVUZXN0cytSZWNpcGVUZXN0U3RlcCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCI+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWNpcGUgVGVzdDwvVGl0bGU+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iQVZhbHVlIiBMYWJlbD0iQSB2YWx1ZSIgLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgPC9QYWdlcz4NCiAgICAgICAgPC9XaXphcmQ+DQogICAgICA8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iSGVsbG9Xb3JsZCIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuSGVsbG9Xb3JsZEFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IlR5cGVBbGlhc0FyZ3VtZW50Ij4NCiAgICAgIDxUeXBlcz4NCiAgICAgICAgPFR5cGVBbGlhcyBOYW1lPSJpbnQiIFR5cGU9IlN5c3RlbS5JbnQzMiIvPg0KICAgICAgICA8VHlwZUFsaWFzIE5hbWU9ImludDY0IiBUeXBlPSJTeXN0ZW0uSW50NjQiLz4NCiAgICAgIDwvVHlwZXM+DQogICAgICA8Q2FwdGlvbj5UeXBlcyB3aXRoIGFsaWFzZXM8L0NhcHRpb24+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQW5JbnQiIFR5cGU9ImludCIgLz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFCaWdJbnQiIFR5cGU9ImludDY0IiAvPg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8R2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICAgIDxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiANCiAgICAgICAgICAgICAgICBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlJlY2lwZVRlc3RzK0V4ZWN1dGVSZWNpcGVUeXBlQWxpYXNTdGVwLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0Ij4NCiAgICAgICAgICAgICAgPFRpdGxlPlJlY2lwZSBUZXN0PC9UaXRsZT4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJBbkludCIgTGFiZWw9IkEgdmFsdWUiIC8+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iQUJpZ0ludCIgTGFiZWw9IkEgdmFsdWUiIC8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgIDwvUGFnZXM+DQogICAgICAgIDwvV2l6YXJkPg0KICAgICAgPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9Ik51bGxOb1dpemFyZCI+DQogICAgICA8Q2FwdGlvbj5DYXB0aW9uPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFWYWx1ZSIgVHlwZT0iU3lzdGVtLkJvb2xlYW4iIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9Ikluc3RhbGxFeGVjdXRlQnlOYW1lIj4NCiAgICAgIDxDYXB0aW9uPkNhcHRpb248L0NhcHRpb24+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQVZhbHVlIiBUeXBlPSJTeXN0ZW0uQm9vbGVhbiIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iRXhlY3V0ZWRCeU5hbWUiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlJlY2lwZU1hbmFnZXJUZXN0K0V4ZWN1dGVkQnlOYW1lQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0IiAvPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICA8L1JlY2lwZXM+DQo8L0d1aWRhbmNlUGFja2FnZT4=</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>9</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/SampleManifest.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8UmVjaXBlRnJhbWV3b3JrIFNjaGVtYVZlcnNpb249IjEuMCIgVHJhY2VMZXZlbD0iSW5mbyIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1tYW5pZmVzdCI+DQoJPEhvc3RzPg0KCQk8SG9zdCBOYW1lPSJWaXN1YWxTdHVkaW8iIEluc3RhbGxlclR5cGU9IlRoZVR5cGUsIFRoZUFzc2VtYmx5IiAvPg0KCTwvSG9zdHM+DQoJPEd1aWRhbmNlUGFja2FnZXM+DQogICAgICA8R3VpZGFuY2VQYWNrYWdlDQogICAgICAgIEd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFQyIgDQogICAgICAgIFZlcnNpb249IjEuMCIgDQogICAgICAgIENhcHRpb249IlRoaXMgaXMgYSBzYW1wbGUgbWFuaWZlc3QgZm9yIGEgcGFja2FnZSIgDQogICAgICAgIERlc2NyaXB0aW9uPSJGdWxsIGxlbmd0aCBkZXNjcmlwdGlvbiINCiAgICAgICAgSG9zdD0iVmlzdWFsU3R1ZGlvIg0KICAgICAgICBUaW1lc3RhbXA9IjQzMjI0MzQyMzI0MyIgDQogICAgICAgIENvbmZpZ3VyYXRpb25GaWxlPSJDOlxCbGFoLnhtbCIgLz4NCgk8L0d1aWRhbmNlUGFja2FnZXM+DQo8L1JlY2lwZUZyYW1ld29yaz4=</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>5</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/Services/AssetReferenceServiceTests.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSINCiAgICAgICAgICAgICAgIEd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFRCINCiAgICAgICAgICAgICAgIENhcHRpb249IlRlc3RzIg0KICAgICAgICAgICAgICAgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCiAgPFJlY2lwZXM+DQogICAgPFJlY2lwZSBOYW1lPSJBZGRTZXJ2aWNlIj4NCiAgICAgIDxDYXB0aW9uPkFkZFNlcnZpY2U8L0NhcHRpb24+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iYWFhIiAvPg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJiYmIiIFR5cGU9InR0dCIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IkFkZEJ1c2luZXNzQWN0aW9uIj4NCiAgICAgIDxDYXB0aW9uPkFkZEJ1c2luZXNzQWN0aW9uPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9ImFhYSIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iYmJiIiBUeXBlPSJ0dHQiIC8+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogIDwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>20</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/Services/DictionaryServiceTest.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+IA0KPEd1aWRhbmNlUGFja2FnZSB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LWNvcmUiDQogICAgR3VpZD0iMUU0QTFCRUItRkY5Ni00ZmEyLUExODEtNDg5RjYxMUIwMkVEIiANCiAgICBDYXB0aW9uPSJUZXN0IFBhY2thZ2UgQ2FwdGlvbiINCiAgICBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KCTxSZWNpcGVzPg0KCQk8UmVjaXBlIE5hbWU9IlRlc3REaWN0aW9uYXJ5Ij4NCgkJCTxDYXB0aW9uPkRpY3Rpb25hcnkgc2VydmljZSB0ZXN0czwvQ2FwdGlvbj4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkFDb2xvciIgVHlwZT0iU3lzdGVtLkRyYXdpbmcuQ29sb3IsIFN5c3RlbS5EcmF3aW5nLCBWZXJzaW9uPTIuMC4zNjAwLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYSIgLz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQUJvb2xlYW4iIFR5cGU9IlN5c3RlbS5Cb29sZWFuIiAvPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJBbkVudW0iIFR5cGU9IlN5c3RlbS5QbGF0Zm9ybUlEIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQURhdGUiIFR5cGU9IlN5c3RlbS5EYXRlVGltZSI+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJTeXN0ZW0uQ29tcG9uZW50TW9kZWwuRGF0ZVRpbWVDb252ZXJ0ZXIsIFN5c3RlbSwgVmVyc2lvbj0yLjAuMzYwMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkiIC8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICA8L0FyZ3VtZW50cz4NCgkJCTxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCQk8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgDQogICAgICAgICAgICAgICAgU2NoZW1hVmVyc2lvbj0iMS4wIiANCiAgICAgICAgICAgICAgICBOYW1lPSJEaWN0aW9uYXJ5V2l6YXJkIj4NCgkJCQkJPFBhZ2VzPg0KCQkJCQkJPFBhZ2UgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuU2VydmljZXMuRGljdGlvbmFyeVRlc3RTdGVwLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0Ij4NCgkJCQkJCQk8VGl0bGU+RGljdGlvbmFyeSB0ZXN0IHN0ZXA8L1RpdGxlPg0KCQkJCQkJCTxGaWVsZHM+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IkFDb2xvciIgTGFiZWw9IkEgY29sb3IiIC8+DQoJCQkJCQkJCTxGaWVsZCBWYWx1ZU5hbWU9IkFCb29sZWFuIiBMYWJlbD0iQSBib29sZWFuIiAvPg0KCQkJCQkJCQk8RmllbGQgVmFsdWVOYW1lPSJBbkVudW0iIExhYmVsPSJBbiBlbnVtZXJhdGlvbiIgLz4NCiAgICAgICAgICAgICAgICA8RmllbGQgIFZhbHVlTmFtZT0iQURhdGUiIExhYmVsPSJBIGRhdGUiPg0KICAgICAgICAgICAgICAgICAgPEVkaXRvciBUeXBlPSJTeXN0ZW0uQ29tcG9uZW50TW9kZWwuRGVzaWduLkRhdGVUaW1lRWRpdG9yLCBTeXN0ZW0uRGVzaWduLCBWZXJzaW9uPTIuMC4zNjAwLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYSIgLz4NCiAgICAgICAgICAgICAgICA8L0ZpZWxkPg0KCQkJCQkJCTwvRmllbGRzPg0KCQkJCQkJPC9QYWdlPg0KCQkJCQk8L1BhZ2VzPg0KCQkJCTwvV2l6YXJkPg0KCQkJPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCTxBY3Rpb25zPg0KCQkJCTxBY3Rpb24gTmFtZT0iSGVsbG9Xb3JsZCIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuSGVsbG9Xb3JsZEFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCIgLz4NCgkJCTwvQWN0aW9ucz4NCgkJPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJUZXN0Q29udmVydGVycyI+DQogICAgICA8Q2FwdGlvbj5Db252ZXJ0ZXJzIHRlc3RzPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFDb2xvciIgVHlwZT0iU3lzdGVtLkRyYXdpbmcuQ29sb3IsIFN5c3RlbS5EcmF3aW5nLCBWZXJzaW9uPTIuMC4zNjAwLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYSIgLz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFCb29sZWFuIiBUeXBlPSJTeXN0ZW0uQm9vbGVhbiIgLz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFuRW51bSIgVHlwZT0iU3lzdGVtLlBsYXRmb3JtSUQiIC8+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJBRGF0ZSIgVHlwZT0iU3lzdGVtLkRhdGVUaW1lIj4NCiAgICAgICAgICA8Q29udmVydGVyIFR5cGU9IlN5c3RlbS5Db21wb25lbnRNb2RlbC5EYXRlVGltZUNvbnZlcnRlciwgU3lzdGVtLCBWZXJzaW9uPTIuMC4zNjAwLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSIgLz4NCiAgICAgICAgPC9Bcmd1bWVudD4gDQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkhlbGxvV29ybGQiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkhlbGxvV29ybGRBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiIC8+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogIDwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>14</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/Services/ReadOnlyDictionaryServiceTests.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+IA0KPEd1aWRhbmNlUGFja2FnZSAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlIg0KCUhvc3Q9IlZpc3VhbFN0dWRpbyIgDQogIEd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFRCIgDQoJQ2FwdGlvbj0iVGVzdFBhY2thZ2UgQ2FwdGlvbiINCglTY2hlbWFWZXJzaW9uPSIxLjAiPg0KCTxSZWNpcGVzPg0KCQk8UmVjaXBlIE5hbWU9IlRyeUNoYW5nZVZhbHVlUHJvdmlkZXJCZWZvcmUiPg0KCQkJPENhcHRpb24+VHJ5Q2hhbmdlVmFsdWVQcm92aWRlckJlZm9yZTwvQ2FwdGlvbj4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkEiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5SZWFkT25seURpY3Rpb25hcnlTZXJ2aWNlVGVzdHMrVHJ5Q2hhbmdlRGljdGlvbmFyeVZhbHVlUHJvdmlkZXJCZWZvcmUsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiIC8+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBOYW1lPSJEb05vdGhpbmciIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQWN0aW9ucy5Eb05vdGhpbmdBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCQk8UmVjaXBlIE5hbWU9IlRyeUNoYW5nZVZhbHVlUHJvdmlkZXJBZnRlciI+DQoJCQk8Q2FwdGlvbj5UcnlDaGFuZ2VWYWx1ZVByb3ZpZGVyQWZ0ZXI8L0NhcHRpb24+DQoJCQk8QXJndW1lbnRzPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJBIj4NCgkJCQkJPFZhbHVlUHJvdmlkZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuUmVhZE9ubHlEaWN0aW9uYXJ5U2VydmljZVRlc3RzK1RyeUNoYW5nZURpY3Rpb25hcnlWYWx1ZVByb3ZpZGVyQWZ0ZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiIC8+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJCTxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiANCiAgICAgICAgICAgICAgICBTY2hlbWFWZXJzaW9uPSIxLjAiIA0KICAgICAgICAgICAgICAgIE5hbWU9IkZpbmlzaFdpemFyZCI+DQoJCQkJCTxQYWdlcz4NCgkJCQkJCTxQYWdlIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkZpbmlzaFdpemFyZFN0ZXAsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiPg0KCQkJCQkJCTxUaXRsZT5GaW5pc2ggYXV0b21hdGljYWxseTwvVGl0bGU+DQoJCQkJCQkJPEZpZWxkcz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iQSIgTGFiZWw9IkR1bW15IiAvPg0KCQkJCQkJCTwvRmllbGRzPg0KCQkJCQkJPC9QYWdlPg0KCQkJCQk8L1BhZ2VzPg0KCQkJCTwvV2l6YXJkPg0KCQkJPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCgkJCTxBY3Rpb25zPg0KCQkJCTxBY3Rpb24gTmFtZT0iRG9Ob3RoaW5nIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuRG9Ob3RoaW5nQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgkJPFJlY2lwZSBOYW1lPSJUcnlDaGFuZ2VWYWx1ZVByb3ZpZGVyT25DaGFuZ2UiPg0KCQkJPENhcHRpb24+VHJ5Q2hhbmdlVmFsdWVQcm92aWRlck9uQ2hhbmdlPC9DYXB0aW9uPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQSIgUmVxdWlyZWQ9ImZhbHNlIiAvPg0KCQkJCTxBcmd1bWVudCBOYW1lPSJCIiBSZXF1aXJlZD0iZmFsc2UiID4NCgkJCQkJPFZhbHVlUHJvdmlkZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuUmVhZE9ubHlEaWN0aW9uYXJ5U2VydmljZVRlc3RzK1RyeUNoYW5nZURpY3Rpb25hcnlWYWx1ZVByb3ZpZGVyT25DaGFuZ2UsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiPg0KCQkJCQkJPE1vbml0b3JBcmd1bWVudCBOYW1lPSJBIiAvPgkJCQkJCQ0KCQkJCQk8L1ZhbHVlUHJvdmlkZXI+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KCQkJCTxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiANCiAgICAgICAgICAgICAgICBTY2hlbWFWZXJzaW9uPSIxLjAiIA0KICAgICAgICAgICAgICAgIE5hbWU9IlRyeUNoYW5nZVZhbHVlUHJvdmlkZXJPbkNoYW5nZVdpemFyZCI+DQoJCQkJCTxQYWdlcz4NCgkJCQkJCTxQYWdlIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlJlYWRPbmx5RGljdGlvbmFyeVNlcnZpY2VUZXN0cytDaGFuZ2VWYWx1ZVdpemFyZCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCI+DQoJCQkJCQkJPFRpdGxlPk1vbml0b3IgYW5kIGZpbmlzaDwvVGl0bGU+DQoJCQkJCQkJPEZpZWxkcz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iQSIgTGFiZWw9IkR1bW15QSIgLz4NCgkJCQkJCQkJPEZpZWxkIFZhbHVlTmFtZT0iQiIgTGFiZWw9IkR1bW15QiIgLz4NCgkJCQkJCQk8L0ZpZWxkcz4NCgkJCQkJCTwvUGFnZT4NCgkJCQkJPC9QYWdlcz4NCgkJCQk8L1dpemFyZD4NCgkJCTwvR2F0aGVyaW5nU2VydmljZURhdGE+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCgkJCTwvQWN0aW9ucz4NCgkJPC9SZWNpcGU+DQoJCTxSZWNpcGUgTmFtZT0iVHJ5Q2hhbmdlQWN0aW9uIj4NCgkJCTxDYXB0aW9uPlRyeUNoYW5nZUFjdGlvbjwvQ2FwdGlvbj4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkEiIFJlcXVpcmVkPSJmYWxzZSIgLz4NCgkJCTwvQXJndW1lbnRzPg0KCQkJPEFjdGlvbnM+DQoJCQkJPEFjdGlvbiBOYW1lPSJUcnlDaGFuZ2VBY3Rpb24iIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlJlYWRPbmx5RGljdGlvbmFyeVNlcnZpY2VUZXN0cytDaGFuZ2VBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiIC8+DQoJCQk8L0FjdGlvbnM+DQoJCTwvUmVjaXBlPg0KCTwvUmVjaXBlcz4NCjwvR3VpZGFuY2VQYWNrYWdlPg==</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>7</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/Services/TypeResolutionServiceTests.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+IA0KPEd1aWRhbmNlUGFja2FnZSAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlIg0KCUd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFRCIgDQoJQ2FwdGlvbj0iVGVzdFBhY2thZ2UgQ2FwdGlvbiINCglTY2hlbWFWZXJzaW9uPSIxLjAiPg0KCTxSZWNpcGVzPg0KCQk8UmVjaXBlIE5hbWU9IlJlc29sdmVUeXBlIj4NCgkJCTxDYXB0aW9uPlJlc29sdmUgdHlwZTwvQ2FwdGlvbj4NCgkJCTxBcmd1bWVudHM+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkEiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJNeUNsYXNzLCBNeVRlc3RGaWxlIiAvPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQk8L0FyZ3VtZW50cz4NCgkJCTxBY3Rpb25zPg0KCQkJCTxBY3Rpb24gTmFtZT0iRG9Ob3RoaW5nIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuRG9Ob3RoaW5nQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KCQkJPC9BY3Rpb25zPg0KCQk8L1JlY2lwZT4NCgk8L1JlY2lwZXM+DQo8L0d1aWRhbmNlUGFja2FnZT4=</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>9</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/ValueProviderTests-Circular.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+IA0KPEd1aWRhbmNlUGFja2FnZSAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC1jb3JlIg0KCUd1aWQ9IjFFNEExQkVCLUZGOTYtNGZhMi1BMTgxLTQ4OUY2MTFCMDJFRCIgDQoJQ2FwdGlvbj0iVGVzdFBhY2thZ2UgQ2FwdGlvbiINCglTY2hlbWFWZXJzaW9uPSIxLjAiPg0KCTxSZWNpcGVzPg0KCQk8UmVjaXBlIE5hbWU9IkNpcmN1bGFyRGVwZW5kZW5jaWVzIj4NCgkJCTxDYXB0aW9uPkNpcmN1bGFyRGVwZW5kZW5jaWVzPC9DYXB0aW9uPg0KCQkJPEFyZ3VtZW50cz4NCgkJCQk8QXJndW1lbnQgTmFtZT0iQSI+DQoJCQkJCTxWYWx1ZVByb3ZpZGVyIFR5cGU9IldoYXRldmVyIj4NCgkJCQkJCTxNb25pdG9yQXJndW1lbnQgTmFtZT0iQiIgLz4NCgkJCQkJPC9WYWx1ZVByb3ZpZGVyPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkIiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJXaGF0ZXZlciI+DQoJCQkJCQk8TW9uaXRvckFyZ3VtZW50IE5hbWU9IkMiIC8+DQoJCQkJCQk8TW9uaXRvckFyZ3VtZW50IE5hbWU9IkQiIC8+DQoJCQkJCTwvVmFsdWVQcm92aWRlcj4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJCTxBcmd1bWVudCBOYW1lPSJDIj4NCgkJCQkJPFZhbHVlUHJvdmlkZXIgVHlwZT0iV2hhdGV2ZXIiPg0KCQkJCQkJPE1vbml0b3JBcmd1bWVudCBOYW1lPSJFIiAvPg0KCQkJCQk8L1ZhbHVlUHJvdmlkZXI+DQoJCQkJPC9Bcmd1bWVudD4NCgkJCQk8QXJndW1lbnQgTmFtZT0iRCI+DQoJCQkJCTxWYWx1ZVByb3ZpZGVyIFR5cGU9IldoYXRldmVyIj4NCgkJCQkJCTxNb25pdG9yQXJndW1lbnQgTmFtZT0iQSIgLz4NCgkJCQkJCTxNb25pdG9yQXJndW1lbnQgTmFtZT0iQiIgLz4NCgkJCQkJPC9WYWx1ZVByb3ZpZGVyPg0KCQkJCTwvQXJndW1lbnQ+DQoJCQkJPEFyZ3VtZW50IE5hbWU9IkUiPg0KCQkJCQk8VmFsdWVQcm92aWRlciBUeXBlPSJXaGF0ZXZlciI+DQoJCQkJCQk8TW9uaXRvckFyZ3VtZW50IE5hbWU9IkMiIC8+DQoJCQkJCTwvVmFsdWVQcm92aWRlcj4NCgkJCQk8L0FyZ3VtZW50Pg0KCQkJPC9Bcmd1bWVudHM+DQoJCQk8QWN0aW9ucz4NCgkJCQk8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCgkJCTwvQWN0aW9ucz4NCgkJPC9SZWNpcGU+DQoJPC9SZWNpcGVzPg0KPC9HdWlkYW5jZVBhY2thZ2U+</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>20</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/RecipeFramework/ValueProviderTests.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlICB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LWNvcmUiDQoJR3VpZD0iMUU0QTFCRUItRkY5Ni00ZmEyLUExODEtNDg5RjYxMUIwMkVEIiANCglDYXB0aW9uPSJUZXN0UGFja2FnZSBDYXB0aW9uIg0KCVNjaGVtYVZlcnNpb249IjEuMCI+DQogIDxSZWNpcGVzPg0KICAgIDxSZWNpcGUgTmFtZT0iVGVzdExpZmVDeWNsZSI+DQogICAgICA8Q2FwdGlvbj5Qcm92aWRlcnM8L0NhcHRpb24+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iRm9yRmluaXNoV2l6YXJkIiBSZXF1aXJlZD0iZmFsc2UiIC8+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJGaXJzdCI+DQogICAgICAgICAgPFZhbHVlUHJvdmlkZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmFsdWVQcm92aWRlclRlc3RzK0xpZmVDeWNsZVByb3ZpZGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0IiAvPg0KICAgICAgICA8L0FyZ3VtZW50Pg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8R2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICAgIDxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiANCiAgICAgICAgICAgICAgICBTY2hlbWFWZXJzaW9uPSIxLjAiIA0KICAgICAgICAgICAgICAgIE5hbWU9IkZpbmlzaFdpemFyZCI+DQogICAgICAgICAgPFBhZ2VzPg0KICAgICAgICAgICAgPFBhZ2UgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuRmluaXNoV2l6YXJkU3RlcCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCI+DQogICAgICAgICAgICAgIDxUaXRsZT5GaW5pc2ggYXV0b21hdGljYWxseTwvVGl0bGU+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iRm9yRmluaXNoV2l6YXJkIiBMYWJlbD0iRHVtbXkiIC8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgIDwvUGFnZXM+DQogICAgICAgIDwvV2l6YXJkPg0KICAgICAgPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IlZhbHVlRWRpdG9yQ2hhbmdlTW9uaXRvcmluZyI+DQogICAgICA8Q2FwdGlvbj5DaGFuZ2U8L0NhcHRpb24+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQSI+DQogICAgICAgICAgPFZhbHVlUHJvdmlkZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmFsdWVQcm92aWRlclRlc3RzK0ZpcnN0VmFsdWVQcm92aWRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCIgLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkIiPg0KICAgICAgICAgIDxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZhbHVlUHJvdmlkZXJUZXN0cytDb25jYXRWYWx1ZVByb3ZpZGVyLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5UZXN0Ij4NCiAgICAgICAgICAgIDxNb25pdG9yQXJndW1lbnQgTmFtZT0iQSIgLz4NCiAgICAgICAgICA8L1ZhbHVlUHJvdmlkZXI+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICAgIDwhLS0gQSBudWxsIGFyZ3VtZW50IHNvIHRoZSB3aXphcmQgc2hvd3MgdXAuIC0tPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQU51bGwiIFJlcXVpcmVkPSJmYWxzZSIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgICA8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgDQogICAgICAgICAgICAgICAgU2NoZW1hVmVyc2lvbj0iMS4wIiANCiAgICAgICAgICAgICAgICBOYW1lPSJWYWx1ZUVkaXRvckNoYW5nZU1vbml0b3JpbmdXaXphcmQiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZhbHVlUHJvdmlkZXJUZXN0cytWYWx1ZUVkaXRvckNoYW5nZU1vbml0b3JpbmdXaXphcmQsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlRlc3QiPg0KICAgICAgICAgICAgICA8VGl0bGU+TW9uaXRvciBhbmQgZmluaXNoPC9UaXRsZT4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJBIiBMYWJlbD0iRHVtbXlBIiAvPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkIiIExhYmVsPSJEdW1teUIiIC8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgIDwvUGFnZXM+DQogICAgICAgIDwvV2l6YXJkPg0KICAgICAgPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IlRlc3RDaGFuZ2VOb3RpZmljYXRpb24iPg0KICAgICAgPENhcHRpb24+Q2hhbmdlPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkEiIC8+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJCIiAvPg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8R2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICAgIDxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiANCiAgICAgICAgICAgICAgICBTY2hlbWFWZXJzaW9uPSIxLjAiIA0KICAgICAgICAgICAgICAgIE5hbWU9IkNoYW5nZU1vbml0b3JpbmdXaXphcmQiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZhbHVlUHJvdmlkZXJUZXN0cytDaGFuZ2VNb25pdG9yaW5nU3RlcCwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCI+DQogICAgICAgICAgICAgIDxUaXRsZT5Nb25pdG9yIGFuZCBmaW5pc2g8L1RpdGxlPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkEiIExhYmVsPSJEdW1teUEiIC8+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iQiIgTGFiZWw9IkR1bW15QiIgLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgPC9QYWdlcz4NCiAgICAgICAgPC9XaXphcmQ+DQogICAgICA8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgPEFjdGlvbnM+DQogICAgICAgIDxBY3Rpb24gTmFtZT0iRG9Ob3RoaW5nIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuRG9Ob3RoaW5nQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iVmFsdWVFZGl0b3JDb25maWciPg0KICAgICAgPENhcHRpb24+Q29uZmlnPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkEiPg0KICAgICAgICAgIDxWYWx1ZVByb3ZpZGVyIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZhbHVlUHJvdmlkZXJUZXN0cytWYWx1ZUVkaXRvckNvbmZpZ3VyYWJsZSwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVGVzdCINCiAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZTE9IlRoZVZhbHVlIi8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkRvTm90aGluZyIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkRvTm90aGluZ0FjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgPC9SZWNpcGVzPg0KPC9HdWlkYW5jZVBhY2thZ2U+</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>14</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/VisualStudio/CTC/CTC.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>22</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/VisualStudio/CTC/ExpectedFromConfig.ctc</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>43</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/RecipeFramework/VisualStudio/Microsoft.Practices.RecipeFramework.VisualStudio.Test.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+DQo8R3VpZGFuY2VQYWNrYWdlIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtY29yZSIgDQogICAgQ2FwdGlvbj0iVGVzdCBTYW1wbGUgUGFja2FnZSINCiAgICBEZXNjcmlwdGlvbj0iVGhlIERlc2NyaXB0aW9uIGZvciB0aGUgU2FtcGxlIFBhY2thZ2UiDQoJICBHdWlkPSIxRTRBMUJFQi1GRjk2LTRmYTItQTE4MS00ODlGNjExQjAyRUMiIA0KCSAgQmluZGluZ1JlY2lwZT0iQmluZGluZ1JlY2lwZSINCiAgICBTY2hlbWFWZXJzaW9uPSIxLjAiDQogICAgVHJhY2VMZXZlbD0iV2FybmluZyI+DQogIDxSZWNpcGVzPg0KICAgIDxSZWNpcGUgTmFtZT0iU2ltcGxlUmVjaXBlIj4NCiAgICAgIDxDYXB0aW9uPlRoaXMgaXMgYSBzaW1wbGUgcmVjaXBlPC9DYXB0aW9uPg0KICAgICAgPERlc2NyaXB0aW9uPlRoaXMgaXMgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBzaW1wbGUgcmVjaXBlLjwvRGVzY3JpcHRpb24+DQogICAgICA8SG9zdERhdGE+DQogICAgICAgIDxJY29uIElEPSIzNDYiLz4NCiAgICAgICAgPENvbW1hbmRCYXIgTmFtZT0iU29sdXRpb24iLz4NCiAgICAgIDwvSG9zdERhdGE+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iTmFtZSIgVHlwZT0iU3lzdGVtLlN0cmluZyIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgICA8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgTmFtZT0iU2ltcGxlV2l6YXJkIiBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlPg0KICAgICAgICAgICAgICA8VGl0bGU+VGhpcyB0aXRsZSBzaG93cyBhIHNpbXBsZSB3aXphcmQ8L1RpdGxlPg0KICAgICAgICAgICAgICA8TGlua1RpdGxlPlRoaXMgc2ltcGxlIHdpemFyZCBkZXNjcmlwdGlvbiB3aWxsIGNvbGxlY3QgYW4gYXJndW1lbnQuPC9MaW5rVGl0bGU+DQogICAgICAgICAgICAgIDxIZWxwPllvdSBzaG91bGRuJ3QgbmVlZCBhIGxvdCBvZiBoZWxwITwvSGVscD4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJOYW1lIiBMYWJlbD0iTmFtZSB0byBzYWx1dGUiIC8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgIDwvUGFnZXM+DQogICAgICAgIDwvV2l6YXJkPg0KICAgICAgPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgIDwhLS0NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkhlbGxvV29ybGQiIFR5cGU9IkhlbGxvV29ybGRBY3Rpb24iPg0KICAgICAgICAgIDxJbnB1dCBOYW1lPSJTYXlOYW1lIiBSZWNpcGVBcmd1bWVudD0iTmFtZSIgLz4NCiAgICAgICAgPC9BY3Rpb24+DQogICAgICA8L0FjdGlvbnM+DQogICAgICAtLT4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IlVuYm91bmRTaW1wbGVSZWNpcGUiIEJvdW5kPSJmYWxzZSIgUmVjdXJyZW50PSJ0cnVlIj4NCiAgICAgIDxDYXB0aW9uPlRoaXMgaXMgYSBzaW1wbGUgcmVjaXBlPC9DYXB0aW9uPg0KICAgICAgPERlc2NyaXB0aW9uPlRoaXMgaXMgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBzaW1wbGUgcmVjaXBlLjwvRGVzY3JpcHRpb24+DQogICAgICA8SG9zdERhdGE+DQogICAgICAgIDxJY29uIElEPSIzNDYiLz4NCiAgICAgICAgPENvbW1hbmRCYXIgTmFtZT0iU29sdXRpb24iLz4NCiAgICAgIDwvSG9zdERhdGE+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iTmFtZSIgVHlwZT0iU3lzdGVtLlN0cmluZyIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgICAgPEdhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgICAgICA8V2l6YXJkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3BhZy9nYXgtd2l6YXJkcyIgTmFtZT0iU2ltcGxlV2l6YXJkIiBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlPg0KICAgICAgICAgICAgICA8VGl0bGU+VGhpcyB0aXRsZSBzaG93cyBhIHNpbXBsZSB3aXphcmQ8L1RpdGxlPg0KICAgICAgICAgICAgICA8TGlua1RpdGxlPlRoaXMgc2ltcGxlIHdpemFyZCBkZXNjcmlwdGlvbiB3aWxsIGNvbGxlY3QgYW4gYXJndW1lbnQuPC9MaW5rVGl0bGU+DQogICAgICAgICAgICAgIDxIZWxwPllvdSBzaG91bGRuJ3QgbmVlZCBhIGxvdCBvZiBoZWxwITwvSGVscD4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJOYW1lIiBMYWJlbD0iTmFtZSB0byBzYWx1dGUiIC8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgIDwvUGFnZXM+DQogICAgICAgIDwvV2l6YXJkPg0KICAgICAgPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIA0KICAgICAgICAgIE5hbWU9IkVuc3VyZUMjIg0KICAgICAgICAgIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZXN0LkVuc3VyZUNTaGFycEFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLlRlc3QiIC8+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJVbmJvdW5kU2ltcGxlUmVjaXBlMiIgQm91bmQ9ImZhbHNlIiBSZWN1cnJlbnQ9InRydWUiPg0KICAgICAgPENhcHRpb24+VGhpcyBpcyBhIHNpbXBsZSByZWNpcGUyPC9DYXB0aW9uPg0KICAgICAgPERlc2NyaXB0aW9uPlRoaXMgaXMgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBzaW1wbGUgcmVjaXBlMi48L0Rlc2NyaXB0aW9uPg0KICAgICAgPEhvc3REYXRhPg0KICAgICAgICA8SWNvbiBJRD0iMzQ2Ii8+DQogICAgICAgIDxDb21tYW5kQmFyIE5hbWU9IlNvbHV0aW9uIi8+DQogICAgICA8L0hvc3REYXRhPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9Ik5hbWUiIFR5cGU9IlN5c3RlbS5TdHJpbmciIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIE5hbWU9IlNpbXBsZVdpemFyZCIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCiAgICAgICAgICA8UGFnZXM+DQogICAgICAgICAgICA8UGFnZT4NCiAgICAgICAgICAgICAgPFRpdGxlPlRoaXMgdGl0bGUgc2hvd3MgYSBzaW1wbGUgd2l6YXJkPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5UaGlzIHNpbXBsZSB3aXphcmQgZGVzY3JpcHRpb24gd2lsbCBjb2xsZWN0IGFuIGFyZ3VtZW50LjwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5Zb3Ugc2hvdWxkbid0IG5lZWQgYSBsb3Qgb2YgaGVscCE8L0hlbHA+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iTmFtZSIgTGFiZWw9Ik5hbWUgdG8gc2FsdXRlIiAvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICA8L1BhZ2VzPg0KICAgICAgICA8L1dpemFyZD4NCiAgICAgIDwvR2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJIZWxsb1dvcmxkIiBUeXBlPSJIZWxsb1dvcmxkQWN0aW9uIj4NCiAgICAgICAgICA8SW5wdXQgTmFtZT0iU2F5TmFtZSIgUmVjaXBlQXJndW1lbnQ9Ik5hbWUiIC8+DQogICAgICAgIDwvQWN0aW9uPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iQUNsYXNzUmVjaXBlIj4NCiAgICAgIDxDYXB0aW9uPk1ha2Ugc2VyaWFsaXphYmxlPC9DYXB0aW9uPg0KICAgICAgPERlc2NyaXB0aW9uPlRoaXMgaXMgYW4gb21uaXByZXNlbnQgcmVjaXBlLjwvRGVzY3JpcHRpb24+DQogICAgICA8SG9zdERhdGE+DQogICAgICAgIDxJY29uIElEPSIxMDMyIi8+DQogICAgICAgIDxDb21tYW5kQmFyIE5hbWU9Ikl0ZW0iLz4NCiAgICAgIDwvSG9zdERhdGE+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZSA9IkFyZ3VtZW50MSIgVHlwZSA9IlN5c3RlbS5TdHJpbmciIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIE5hbWU9IlNpbXBsZVdpemFyZCIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCiAgICAgICAgICA8UGFnZXM+DQogICAgICAgICAgICA8UGFnZT4NCiAgICAgICAgICAgICAgPFRpdGxlPlRoaXMgdGl0bGUgc2hvd3MgYSBzaW1wbGUgd2l6YXJkPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5UaGlzIHNpbXBsZSB3aXphcmQgZGVzY3JpcHRpb24gd2lsbCBjb2xsZWN0IGFuIGFyZ3VtZW50LjwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5Zb3Ugc2hvdWxkbid0IG5lZWQgYSBsb3Qgb2YgaGVscCE8L0hlbHA+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iTmFtZSIgTGFiZWw9Ik5hbWUgdG8gc2FsdXRlIiAvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICA8L1BhZ2VzPg0KICAgICAgICA8L1dpemFyZD4NCiAgICAgIDwvR2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJIZWxsb1dvcmxkIiBUeXBlPSJIZWxsb1dvcmxkQWN0aW9uIj4NCiAgICAgICAgICA8SW5wdXQgTmFtZT0iU2F5TmFtZSIgUmVjaXBlQXJndW1lbnQ9IkFyZ3VtZW50MSIgLz4NCiAgICAgICAgPC9BY3Rpb24+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJUZXN0UmVjaXBlQmFzaWNEYXRhVHlwZXMiIFJlY3VycmVudD0idHJ1ZSI+DQogICAgICA8Q2FwdGlvbj5UZXN0IFJlY2lwZSBmb3IgQmFzaWMgRGF0YSBUeXBlczwvQ2FwdGlvbj4NCiAgICAgIDxEZXNjcmlwdGlvbj5UaGlzIGlzIGEgcmVjaXBlIGRlZmluZWQgaW4gU2hhZG93RmF4LmNvbmZpZzwvRGVzY3JpcHRpb24+DQogICAgICA8SG9zdERhdGEgPg0KICAgICAgICA8SWNvbiBJRD0iMzQ2Ii8+DQogICAgICAgIDxDb21tYW5kQmFyIE5hbWU9IlNvbHV0aW9uIi8+DQogICAgICA8L0hvc3REYXRhPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFyZ1dpdGhXcm9uZ1R5cGUiIFR5cGU9IlN5c3RlbS5TdHJpbmciIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIE5hbWU9Ik15V2l6YXJkIiBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlPg0KICAgICAgICAgICAgICA8VGl0bGU+TXlXaXphcmQgVGl0bGU8L1RpdGxlPg0KICAgICAgICAgICAgICA8TGlua1RpdGxlPk15V2l6YXJkIHRpdGxlPC9MaW5rVGl0bGU+DQogICAgICAgICAgICAgIDxIZWxwPk15V2l6YXJkIEhlbHA8L0hlbHA+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iQXJnV2l0aFdyb25nVHlwZSIgTGFiZWw9IkFyZ3VtZW50IHdpdGggV3JvbmcgVHlwZSIvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICA8L1BhZ2VzPg0KICAgICAgICA8L1dpemFyZD4NCiAgICAgIDwvR2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJBZGRSZW1vdGluZyIgVHlwZT0iQWRkUmVtb3RpbmdUb1Byb2plY3QiPg0KICAgICAgICAgIDxJbnB1dCBOYW1lPSJQYXJhbWV0ZXIwOCIgUmVjaXBlQXJndW1lbnQ9IkFyZ1dpdGhXcm9uZ1R5cGUiIC8+DQogICAgICAgIDwvQWN0aW9uPg0KICAgICAgPC9BY3Rpb25zPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iUmVjaXBlV2l0aEh1Z2VUaXRsZXMiIFJlY3VycmVudD0idHJ1ZSI+DQogICAgICA8Q2FwdGlvbj5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9DYXB0aW9uPg0KICAgICAgPERlc2NyaXB0aW9uPlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGRlc2NyaXRwaW9uPC9EZXNjcmlwdGlvbj4NCiAgICAgIDxIb3N0RGF0YSA+DQogICAgICAgIDxJY29uIElEPSIzNDYiLz4NCiAgICAgICAgPENvbW1hbmRCYXIgTmFtZT0iU29sdXRpb24iLz4NCiAgICAgIDwvSG9zdERhdGE+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQxIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQyIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQzIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQ0IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQ1IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQ2IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQ3IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQ4IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQ5IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQxMCIgVHlwZT0iU3lzdGVtLlN0cmluZyIgLz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFyZ3VtZW50MTEiIFR5cGU9IlN5c3RlbS5TdHJpbmciIC8+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJBcmd1bWVudDEyIiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQxMyIgVHlwZT0iU3lzdGVtLlN0cmluZyIgLz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFyZ3VtZW50MTQiIFR5cGU9IlN5c3RlbS5TdHJpbmciIC8+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJBcmd1bWVudDE1IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQxNiIgVHlwZT0iU3lzdGVtLlN0cmluZyIgLz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFyZ3VtZW50MTciIFR5cGU9IlN5c3RlbS5TdHJpbmciIC8+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJBcmd1bWVudDE4IiBUeXBlPSJTeXN0ZW0uU3RyaW5nIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQXJndW1lbnQxOSIgVHlwZT0iU3lzdGVtLlN0cmluZyIgLz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkFyZ3VtZW50MjAiIFR5cGU9IlN5c3RlbS5TdHJpbmciIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIE5hbWU9Ik15V2l6YXJkIiBTY2hlbWFWZXJzaW9uPSIxLjAiPg0KICAgICAgICAgIDxQYWdlcz4NCiAgICAgICAgICAgIDxQYWdlPg0KICAgICAgICAgICAgICA8VGl0bGU+UmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHlyZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5cmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseXJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MSIgTGFiZWw9IlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgbGFiZWwiLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgICA8UGFnZT4NCiAgICAgICAgICAgICAgPFRpdGxlPlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgdGl0bGU8L1RpdGxlPg0KICAgICAgICAgICAgICA8TGlua1RpdGxlPlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgbGlua3RpdGxlPC9MaW5rVGl0bGU+DQogICAgICAgICAgICAgIDxIZWxwPk15V2l6YXJkIEhlbHA8L0hlbHA+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iQXJndW1lbnQyIiBMYWJlbD0iUmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBsYWJlbCIvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICAgIDxQYWdlPg0KICAgICAgICAgICAgICA8VGl0bGU+UmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyB0aXRsZTwvVGl0bGU+DQogICAgICAgICAgICAgIDxMaW5rVGl0bGU+UmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBsaW5rdGl0bGU8L0xpbmtUaXRsZT4NCiAgICAgICAgICAgICAgPEhlbHA+TXlXaXphcmQgSGVscDwvSGVscD4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJBcmd1bWVudDMiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50NCIgTGFiZWw9IlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgbGFiZWwiLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgICA8UGFnZT4NCiAgICAgICAgICAgICAgPFRpdGxlPlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgdGl0bGU8L1RpdGxlPg0KICAgICAgICAgICAgICA8TGlua1RpdGxlPlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgbGlua3RpdGxlPC9MaW5rVGl0bGU+DQogICAgICAgICAgICAgIDxIZWxwPk15V2l6YXJkIEhlbHA8L0hlbHA+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iQXJndW1lbnQ1IiBMYWJlbD0iUmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBsYWJlbCIvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICAgIDxQYWdlPg0KICAgICAgICAgICAgICA8VGl0bGU+UmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyB0aXRsZTwvVGl0bGU+DQogICAgICAgICAgICAgIDxMaW5rVGl0bGU+UmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBsaW5rdGl0bGU8L0xpbmtUaXRsZT4NCiAgICAgICAgICAgICAgPEhlbHA+TXlXaXphcmQgSGVscDwvSGVscD4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJBcmd1bWVudDYiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50NyIgTGFiZWw9IlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgbGFiZWwiLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgICA8UGFnZT4NCiAgICAgICAgICAgICAgPFRpdGxlPlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgdGl0bGU8L1RpdGxlPg0KICAgICAgICAgICAgICA8TGlua1RpdGxlPlJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IGxvbmcgbGlua3RpdGxlPC9MaW5rVGl0bGU+DQogICAgICAgICAgICAgIDxIZWxwPk15V2l6YXJkIEhlbHA8L0hlbHA+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iQXJndW1lbnQ4IiBMYWJlbD0iUmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBsYWJlbCIvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICAgIDxQYWdlPg0KICAgICAgICAgICAgICA8VGl0bGU+UmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyB0aXRsZTwvVGl0bGU+DQogICAgICAgICAgICAgIDxMaW5rVGl0bGU+UmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgbG9uZyBsaW5rdGl0bGU8L0xpbmtUaXRsZT4NCiAgICAgICAgICAgICAgPEhlbHA+TXlXaXphcmQgSGVscDwvSGVscD4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJBcmd1bWVudDkiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTAiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTEiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTIiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTMiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTQiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTUiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTYiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTciIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTgiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MTkiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIHRpdGxlPC9UaXRsZT4NCiAgICAgICAgICAgICAgPExpbmtUaXRsZT5SZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxpbmt0aXRsZTwvTGlua1RpdGxlPg0KICAgICAgICAgICAgICA8SGVscD5NeVdpemFyZCBIZWxwPC9IZWxwPg0KICAgICAgICAgICAgICA8RmllbGRzPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IkFyZ3VtZW50MjAiIExhYmVsPSJSZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSByZWFsbHkgcmVhbGx5IHJlYWxseSBsb25nIGxhYmVsIi8+DQogICAgICAgICAgICAgIDwvRmllbGRzPg0KICAgICAgICAgICAgPC9QYWdlPg0KICAgICAgICAgIDwvUGFnZXM+DQogICAgICAgIDwvV2l6YXJkPg0KICAgICAgPC9HYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkFkZFJlbW90aW5nIiBUeXBlPSJBZGRSZW1vdGluZ1RvUHJvamVjdCI+DQogICAgICAgICAgPElucHV0IE5hbWU9IlBhcmFtZXRlcjAxIiBSZWNpcGVBcmd1bWVudD0iQXJndW1lbnQxIiAvPg0KICAgICAgICA8L0FjdGlvbj4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IlNvbHV0aW9uUGlja2VyVGVzdCIgQm91bmQ9ImZhbHNlIj4NCiAgICAgIDxDYXB0aW9uPlNob3cgd2l6YXJkIHdpdGggU29sdXRpb24gUGlja2VyPC9DYXB0aW9uPg0KICAgICAgPEhvc3REYXRhPg0KICAgICAgICA8SWNvbiBJRD0iNDgwIi8+DQogICAgICAgIDxDb21tYW5kQmFyIE5hbWU9Ikl0ZW0iIC8+DQogICAgICA8L0hvc3REYXRhPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IlByb2plY3QiIFR5cGU9IkVudkRURS5Qcm9qZWN0LCBFbnZEVEUiPg0KICAgICAgICAgIDxDb252ZXJ0ZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5Db252ZXJ0ZXJzLkR0ZUVsZW1lbnRDb252ZXJ0ZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJQcm9qZWN0MiIgVHlwZT0iRW52RFRFLlByb2plY3QsIEVudkRURSI+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuRHRlRWxlbWVudENvbnZlcnRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IlByb2plY3RJdGVtIiBUeXBlPSJFbnZEVEUuUHJvamVjdEl0ZW0sIEVudkRURSI+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuRHRlRWxlbWVudENvbnZlcnRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IlNvbHV0aW9uRm9sZGVyIiBUeXBlPSJFbnZEVEU4MC5Tb2x1dGlvbkZvbGRlciwgRW52RFRFODAiPg0KICAgICAgICAgIDxDb252ZXJ0ZXIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5Db252ZXJ0ZXJzLkR0ZUVsZW1lbnRDb252ZXJ0ZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJTb2x1dGlvbkZvbGRlcjIiIFR5cGU9IkVudkRURTgwLlNvbHV0aW9uRm9sZGVyLCBFbnZEVEU4MCI+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkNvbnZlcnRlcnMuRHRlRWxlbWVudENvbnZlcnRlciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgICAgPC9Bcmd1bWVudD4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IlNhbXBsZUFyZ3VtZW50IiAvPg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8R2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICAgIDxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiBOYW1lPSJTaW1wbGVXaXphcmQiIFNjaGVtYVZlcnNpb249IjEuMCI+DQogICAgICAgICAgPFBhZ2VzPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5TZWxlY3QgdGFyZ2V0PC9UaXRsZT4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJQcm9qZWN0IiBMYWJlbD0iVGFyZ2V0IFByb2plY3QiPg0KICAgICAgICAgICAgICAgICAgPEVkaXRvciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkVkaXRvcnMuU29sdXRpb25QaWNrZXJFZGl0b3IsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIA0KICAgICAgICAgICAgICAgICAgICAgICAgICBVbmJvdW5kUmVmZXJlbmNlVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLlRlc3QuTXlQcm9qZWN0UmVmZXJlbmNlLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdCIvPg0KICAgICAgICAgICAgICAgIDwvRmllbGQ+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iUHJvamVjdDIiIExhYmVsPSJUYXJnZXQgUHJvamVjdCAobm8gcmVmKSI+DQogICAgICAgICAgICAgICAgICA8RWRpdG9yIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuRWRpdG9ycy5Tb2x1dGlvblBpY2tlckVkaXRvciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgLz4NCiAgICAgICAgICAgICAgICA8L0ZpZWxkPg0KICAgICAgICAgICAgICAgIDxGaWVsZCBWYWx1ZU5hbWU9IlByb2plY3RJdGVtIiBMYWJlbD0iVGFyZ2V0IFByb2plY3RJdGVtIj4NCiAgICAgICAgICAgICAgICAgIDxFZGl0b3IgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5FZGl0b3JzLlNvbHV0aW9uUGlja2VyRWRpdG9yLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgVW5ib3VuZFJlZmVyZW5jZVR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZXN0Lk15UHJvamVjdEl0ZW1SZWZlcmVuY2UsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZXN0Ii8+DQogICAgICAgICAgICAgICAgPC9GaWVsZD4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJTb2x1dGlvbkZvbGRlciIgTGFiZWw9IlRhcmdldCBTb2x1dGlvbkZvbGRlciI+DQogICAgICAgICAgICAgICAgICA8RWRpdG9yIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuRWRpdG9ycy5Tb2x1dGlvblBpY2tlckVkaXRvciwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSIgDQogICAgICAgICAgICAgICAgICAgICAgICAgIFVuYm91bmRSZWZlcmVuY2VUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdC5NeVNvbHV0aW9uRm9sZGVyUmVmZXJlbmNlLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdCIvPg0KICAgICAgICAgICAgICAgIDwvRmllbGQ+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iU29sdXRpb25Gb2xkZXIyIiBMYWJlbD0iVGFyZ2V0IFNvbHV0aW9uRm9sZGVyIChubyByZWYpIj4NCiAgICAgICAgICAgICAgICAgIDxFZGl0b3IgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5FZGl0b3JzLlNvbHV0aW9uUGlja2VyRWRpdG9yLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5IiAvPg0KICAgICAgICAgICAgICAgIDwvRmllbGQ+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iU2FtcGxlQXJndW1lbnQiIExhYmVsPSJTYW1wbGUgRWRpdG9yIj4NCiAgICAgICAgICAgICAgICAgIDxFZGl0b3IgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLlRlc3QuU2FtcGxlRWRpdG9yLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdCIgLz4NCiAgICAgICAgICAgICAgICA8L0ZpZWxkPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICA8L1BhZ2VzPg0KICAgICAgICA8L1dpemFyZD4NCiAgICAgIDwvR2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJNaXNjZWxhbmVvdXNUZXN0cyIgQm91bmQ9ImZhbHNlIj4NCiAgICAgIDxDYXB0aW9uPlNob3djYXNlcyBtaXNjZWxhbmVvdXMgZmVhdHVyZXM8L0NhcHRpb24+DQogICAgICA8SG9zdERhdGE+DQogICAgICAgIDxJY29uIElEPSI3MjAiLz4NCiAgICAgICAgPENvbW1hbmRCYXIgTmFtZT0iSXRlbSIgLz4NCiAgICAgIDwvSG9zdERhdGE+DQogICAgICA8QXJndW1lbnRzPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iRGF0ZSIgVHlwZT0iU3lzdGVtLkRhdGVUaW1lIiAvPg0KICAgICAgPC9Bcmd1bWVudHM+DQogICAgICA8R2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICAgIDxXaXphcmQgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcGFnL2dheC13aXphcmRzIiBOYW1lPSJTaW1wbGVXaXphcmQiIFNjaGVtYVZlcnNpb249IjEuMCI+DQogICAgICAgICAgPFBhZ2VzPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5TZWxlY3QgdGFyZ2V0PC9UaXRsZT4NCiAgICAgICAgICAgICAgPEZpZWxkcz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJEYXRlIiBMYWJlbD0iQSBkYXRlIj4NCiAgICAgICAgICAgICAgICAgIDxFZGl0b3IgVHlwZT0iU3lzdGVtLkNvbXBvbmVudE1vZGVsLkRlc2lnbi5EYXRlVGltZUVkaXRvciwgU3lzdGVtLkRlc2lnbiwgVmVyc2lvbj0yLjAuMzYwMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EiIC8+DQogICAgICAgICAgICAgICAgPC9GaWVsZD4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgPC9QYWdlcz4NCiAgICAgICAgPC9XaXphcmQ+DQogICAgICA8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iTm9uUmVjdXJyZW50VGVzdCIgUmVjdXJyZW50PSJmYWxzZSI+DQogICAgICA8Q2FwdGlvbj5UZXN0cyBub24tcmVjdXJyZW50IHJlY2lwZSBiZWhhdmlvcjwvQ2FwdGlvbj4NCiAgICAgIDxIb3N0RGF0YT4NCiAgICAgICAgPEljb24gSUQ9IjkzOCIvPg0KICAgICAgICA8Q29tbWFuZEJhciBOYW1lPSJTb2x1dGlvbiIvPg0KICAgICAgPC9Ib3N0RGF0YT4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIE5hbWU9Ik5vdGhpbmciIA0KICAgICAgICAgICAgICAgIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQWN0aW9ucy5Eb05vdGhpbmdBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiIC8+DQogICAgICA8L0FjdGlvbnM+DQogICAgPC9SZWNpcGU+DQogICAgPFJlY2lwZSBOYW1lPSJFeGVjdXRlUmVjaXBlIj4NCiAgICAgIDxDYXB0aW9uPkV4ZWN1dGUgYSBSZWNpcGU8L0NhcHRpb24+DQogICAgICA8SG9zdERhdGE+DQogICAgICAgIDxJY29uIElEPSIzNDYiLz4NCiAgICAgICAgPENvbW1hbmRCYXIgTmFtZT0iU29sdXRpb24iIC8+DQogICAgICA8L0hvc3REYXRhPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IlJlY2lwZSI+DQogICAgICAgICAgPENvbnZlcnRlciBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdC5SZWNpcGVDb252ZXJ0ZXIsIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZXN0Ii8+DQogICAgICAgIDwvQXJndW1lbnQ+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIE5hbWU9IlNpbXBsZVdpemFyZCIgU2NoZW1hVmVyc2lvbj0iMS4wIj4NCiAgICAgICAgICA8UGFnZXM+DQogICAgICAgICAgICA8UGFnZT4NCiAgICAgICAgICAgICAgPFRpdGxlPlNlbGVjdCByZWNpcGUgdG8gZXhlY3V0ZTwvVGl0bGU+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iUmVjaXBlIiBMYWJlbD0iUmVjaXBlIiAvPg0KICAgICAgICAgICAgICA8L0ZpZWxkcz4NCiAgICAgICAgICAgIDwvUGFnZT4NCiAgICAgICAgICA8L1BhZ2VzPg0KICAgICAgICA8L1dpemFyZD4NCiAgICAgIDwvR2F0aGVyaW5nU2VydmljZURhdGE+DQogICAgICA8QWN0aW9ucz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJFeGVjdXRlUmVjaXBlIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdC5FeGVjdXRlUmVjaXBlQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdCI+DQogICAgICAgICAgPElucHV0IE5hbWU9IlJlY2lwZSIgUmVjaXBlQXJndW1lbnQ9IlJlY2lwZSIvPg0KICAgICAgICA8L0FjdGlvbj4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IlZhbHVlVHlwZU9wdGlvbmFsIj4NCiAgICAgIDxDYXB0aW9uPlZhbHVlIHR5cGVzIHRoYXQgYXJlIG9wdGlvbmFsPC9DYXB0aW9uPg0KICAgICAgPEFyZ3VtZW50cz4NCiAgICAgICAgPEFyZ3VtZW50IE5hbWU9IkRhdGUiIFR5cGU9IlN5c3RlbS5EYXRlVGltZSIgUmVxdWlyZWQ9ImZhbHNlIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iQm9vbCIgVHlwZT0iU3lzdGVtLkJvb2xlYW4iIFJlcXVpcmVkPSJmYWxzZSIgLz4NCiAgICAgIDwvQXJndW1lbnRzPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iVmFsdWVUeXBlT3B0aW9uYWxOdWxsYWJsZSI+DQogICAgICA8Q2FwdGlvbj5WYWx1ZSB0eXBlcyB0aGF0IGFyZSBvcHRpb25hbDwvQ2FwdGlvbj4NCiAgICAgIDxBcmd1bWVudHM+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJCb29sIiBUeXBlPSJTeXN0ZW0uTnVsbGFibGVgMVtbU3lzdGVtLkJvb2xlYW5dXSIgUmVxdWlyZWQ9ImZhbHNlIiAvPg0KICAgICAgICA8QXJndW1lbnQgTmFtZT0iRGF0ZSIgVHlwZT0iU3lzdGVtLk51bGxhYmxlYDFbW1N5c3RlbS5EYXRlVGltZV1dIiBSZXF1aXJlZD0iZmFsc2UiIC8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICA8L1JlY2lwZT4NCiAgICA8UmVjaXBlIE5hbWU9IkluaXRpYWxTdGF0ZVRlc3QiIFJlY3VycmVudD0idHJ1ZSI+DQogICAgICA8Q2FwdGlvbj5UZXN0cyBpbml0aWFsIHN0YXRlPC9DYXB0aW9uPg0KICAgICAgPEhvc3REYXRhPg0KICAgICAgICA8SWNvbiBJRD0iMTE1MCIvPg0KICAgICAgICA8Q29tbWFuZEJhciBOYW1lPSJTb2x1dGlvbiIvPg0KICAgICAgPC9Ib3N0RGF0YT4NCiAgICAgIDxBcmd1bWVudHM+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJJbml0aWFsVmFsdWUiIC8+DQogICAgICAgIDxBcmd1bWVudCBOYW1lPSJOb1ZhbHVlIi8+DQogICAgICA8L0FyZ3VtZW50cz4NCiAgICAgIDxHYXRoZXJpbmdTZXJ2aWNlRGF0YT4NCiAgICAgICAgPFdpemFyZCB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9wYWcvZ2F4LXdpemFyZHMiIFNjaGVtYVZlcnNpb249IjEuMCI+DQogICAgICAgICAgPFBhZ2VzPg0KICAgICAgICAgICAgPFBhZ2U+DQogICAgICAgICAgICAgIDxUaXRsZT5FZGl0IHZhbHVlczwvVGl0bGU+DQogICAgICAgICAgICAgIDxGaWVsZHM+DQogICAgICAgICAgICAgICAgPEZpZWxkIFZhbHVlTmFtZT0iSW5pdGlhbFZhbHVlIiBMYWJlbD0iVmFsdWUgd2l0aCBzdGF0ZSIgLz4NCiAgICAgICAgICAgICAgICA8RmllbGQgVmFsdWVOYW1lPSJOb1ZhbHVlIiBMYWJlbD0iVmFsdWUgd2l0aCBubyBzdGF0ZSIgLz4NCiAgICAgICAgICAgICAgPC9GaWVsZHM+DQogICAgICAgICAgICA8L1BhZ2U+DQogICAgICAgICAgPC9QYWdlcz4NCiAgICAgICAgPC9XaXphcmQ+DQogICAgICA8L0dhdGhlcmluZ1NlcnZpY2VEYXRhPg0KICAgIDwvUmVjaXBlPg0KICAgIDxSZWNpcGUgTmFtZT0iQmluZGluZ1JlY2lwZSI+DQogICAgICA8Q2FwdGlvbj5CaW5kaW5nIFJlY2lwZTwvQ2FwdGlvbj4NCiAgICAgIDxBY3Rpb25zPg0KICAgICAgICA8QWN0aW9uIA0KICAgICAgICAgIE5hbWU9IkxvZ1Rlc3QiIA0KICAgICAgICAgIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZXN0LkxvZ2dpbmdUZXN0QWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdCIgLz4NCiAgICAgICAgPEFjdGlvbiANCiAgICAgICAgICBOYW1lPSJCaW5kIiANCiAgICAgICAgICBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdC5CaW5kQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdCIgLz4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJCaW5kUmVjaXBlIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuQmluZFJlY2lwZUFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSI+DQogICAgICAgICAgPCEtLQ0KICAgICAgICAgIDxJbnB1dCBOYW1lPSJSZWNpcGUiIFJlY2lwZUFyZ3VtZW50PSJSZWNpcGUiLz4NCiAgICAgICAgICA8SW5wdXQgTmFtZT0iVGFyZ2V0IiBSZWNpcGVBcmd1bWVudD0iVGFyZ2V0Ii8+DQogICAgICAgICAgLS0+DQogICAgICAgIDwvQWN0aW9uPg0KICAgICAgICA8QWN0aW9uIE5hbWU9IkNyZWF0ZVNvbFBpY2tlclJlZiIgVHlwZT0iTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeS5BY3Rpb25zLkNyZWF0ZVVuYm91bmRSZWZlcmVuY2VBY3Rpb24sIE1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkiDQogICAgICAgICAgICAgICAgQXNzZXROYW1lPSJTb2x1dGlvblBpY2tlclRlc3QiIFJlZmVyZW5jZVR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZXN0Lk15VW5ib3VuZFJlZmVyZW5jZSwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLlRlc3QiPg0KICAgICAgICA8L0FjdGlvbj4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJDcmVhdGVNaXNjZWxhbmVvdXNSZWYiIFR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLkxpYnJhcnkuQWN0aW9ucy5DcmVhdGVVbmJvdW5kUmVmZXJlbmNlQWN0aW9uLCBNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5Ig0KICAgICAgICAgICAgICAgIEFzc2V0TmFtZT0iTWlzY2VsYW5lb3VzVGVzdHMiIFJlZmVyZW5jZVR5cGU9Ik1pY3Jvc29mdC5QcmFjdGljZXMuUmVjaXBlRnJhbWV3b3JrLlZpc3VhbFN0dWRpby5UZXN0Lk15VW5ib3VuZFJlZmVyZW5jZSwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLlRlc3QiPg0KICAgICAgICA8L0FjdGlvbj4NCiAgICAgICAgPEFjdGlvbiBOYW1lPSJDcmVhdGVNaXNjZWxhbmVvdXNSZWYyIiBUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5MaWJyYXJ5LkFjdGlvbnMuQ3JlYXRlVW5ib3VuZFJlZmVyZW5jZUFjdGlvbiwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuTGlicmFyeSINCiAgICAgICAgICAgICAgICBBc3NldE5hbWU9Ik1pc2NlbGFuZW91c1Rlc3RzIiBSZWZlcmVuY2VUeXBlPSJNaWNyb3NvZnQuUHJhY3RpY2VzLlJlY2lwZUZyYW1ld29yay5WaXN1YWxTdHVkaW8uVGVzdC5UaHJvd2luZ1JlZmVyZW5jZSwgTWljcm9zb2Z0LlByYWN0aWNlcy5SZWNpcGVGcmFtZXdvcmsuVmlzdWFsU3R1ZGlvLlRlc3QiPg0KICAgICAgICA8L0FjdGlvbj4NCiAgICAgIDwvQWN0aW9ucz4NCiAgICA8L1JlY2lwZT4NCiAgPC9SZWNpcGVzPg0KPC9HdWlkYW5jZVBhY2thZ2U+</FileContents>
        </FILE>
        <FILE>
          <NameValueCollection>
            <change>default</change>
            <rev>26</rev>
            <type>text</type>
            <depotFile>//depot/Microsoft/IPG/suites/src/WizardFramework/Wizards.xml</depotFile>
            <action>edit</action>
          </NameValueCollection>
          <FileContents encoding="base64"></FileContents>
        </FILE>
      </Files>
    </CHANGE>
  </CHANGES>
  <SDCLIENT>v-oscca-vpc</SDCLIENT>
  <SDUSER>REDMOND\v-oscca</SDUSER>
</jjpack>