//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by the Mvp.Xml.XGen tool.
//     Tool Version:    1.1.1.0
//     Runtime Version: 2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

#pragma warning disable 0642, 0219
namespace Microsoft.Practices.WizardFramework.Configuration
{
    using System.Xml.Serialization;
    using System;
    
    
    /// /// <summary>Custom reader for Wizard instances.</summary>
    internal class WizardReader : WizardSerializer.BaseReader
    {
        

		/// <remarks/>
		protected override global::Microsoft.Practices.WizardFramework.Configuration.Wizard Read6_Wizard(bool isNullable, bool checkType)
		{
			global::Microsoft.Practices.WizardFramework.Configuration.Wizard obj = base.Read6_Wizard(isNullable, checkType);
			WizardDeserializedHandler handler = WizardDeserialized;
			if (handler != null)
				handler(obj);

			return obj;
		}

		/// <remarks/>
		protected override global::Microsoft.Practices.WizardFramework.Configuration.Page Read5_Page(bool isNullable, bool checkType)
		{
			global::Microsoft.Practices.WizardFramework.Configuration.Page obj = base.Read5_Page(isNullable, checkType);
			PageDeserializedHandler handler = PageDeserialized;
			if (handler != null)
				handler(obj);

			return obj;
		}

		/// <remarks/>
		protected override global::Microsoft.Practices.WizardFramework.Configuration.Field Read4_Field(bool isNullable, bool checkType)
		{
			global::Microsoft.Practices.WizardFramework.Configuration.Field obj = base.Read4_Field(isNullable, checkType);
			FieldDeserializedHandler handler = FieldDeserialized;
			if (handler != null)
				handler(obj);

			return obj;
		}

		/// <remarks/>
		protected override global::Microsoft.Practices.WizardFramework.Configuration.Editor Read3_Editor(bool isNullable, bool checkType)
		{
			global::Microsoft.Practices.WizardFramework.Configuration.Editor obj = base.Read3_Editor(isNullable, checkType);
			EditorDeserializedHandler handler = EditorDeserialized;
			if (handler != null)
				handler(obj);

			return obj;
		}

		/// <remarks/>
		protected override global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias Read2_TypeAlias(bool isNullable, bool checkType)
		{
			global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias obj = base.Read2_TypeAlias(isNullable, checkType);
			TypeAliasDeserializedHandler handler = TypeAliasDeserialized;
			if (handler != null)
				handler(obj);

			return obj;
		}

		/// <summary>Reads an object of type Microsoft.Practices.WizardFramework.Configuration.Wizard.</summary>
		internal Microsoft.Practices.WizardFramework.Configuration.Wizard Read()
		{
			return (Microsoft.Practices.WizardFramework.Configuration.Wizard) Read7_Wizard();
		}
        
        /// /// <remarks/>
        public event WizardDeserializedHandler WizardDeserialized;
        
        /// /// <remarks/>
        public event PageDeserializedHandler PageDeserialized;
        
        /// /// <remarks/>
        public event FieldDeserializedHandler FieldDeserialized;
        
        /// /// <remarks/>
        public event EditorDeserializedHandler EditorDeserialized;
        
        /// /// <remarks/>
        public event TypeAliasDeserializedHandler TypeAliasDeserialized;
    }
    
    /// /// <remarks/>
    public delegate void WizardDeserializedHandler(global::Microsoft.Practices.WizardFramework.Configuration.Wizard wizard);
    
    /// /// <remarks/>
    public delegate void PageDeserializedHandler(global::Microsoft.Practices.WizardFramework.Configuration.Page page);
    
    /// /// <remarks/>
    public delegate void FieldDeserializedHandler(global::Microsoft.Practices.WizardFramework.Configuration.Field field);
    
    /// /// <remarks/>
    public delegate void EditorDeserializedHandler(global::Microsoft.Practices.WizardFramework.Configuration.Editor editor);
    
    /// /// <remarks/>
    public delegate void TypeAliasDeserializedHandler(global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias typeAlias);
    
    /// /// <summary>Custom writer for Wizard instances.</summary>
    internal class WizardWriter : WizardSerializer.BaseWriter
    {
        

		/// <summary>Writes an object of type Microsoft.Practices.WizardFramework.Configuration.Wizard.</summary>
		internal void Write(Microsoft.Practices.WizardFramework.Configuration.Wizard value)
		{
			Write7_Wizard(value);
		}
    }
}
#if _DYNAMIC_XMLSERIALIZER_COMPILATION
[assembly:System.Security.AllowPartiallyTrustedCallers()]
[assembly:System.Security.SecurityTransparent()]
#endif

namespace Microsoft.Practices.WizardFramework.Configuration {

    internal partial class WizardSerializer {
	internal class BaseWriter : System.Xml.Serialization.XmlSerializationWriter {

        protected internal void Write7_Wizard(object o) {
            WriteStartDocument();
            if (o == null) {
                WriteEmptyTag(@"Wizard", @"http://schemas.microsoft.com/pag/gax-wizards");
                return;
            }
            TopLevelElement();
            Write6_Wizard(@"Wizard", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::Microsoft.Practices.WizardFramework.Configuration.Wizard)o), false, false);
        }

        void Write6_Wizard(string n, string ns, global::Microsoft.Practices.WizardFramework.Configuration.Wizard o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::Microsoft.Practices.WizardFramework.Configuration.Wizard)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/pag/gax-wizards");
            WriteAttribute(@"Name", @"", ((global::System.String)o.@Name));
            WriteAttribute(@"SchemaVersion", @"", ((global::System.String)o.@SchemaVersion));
            WriteAttribute(@"Help", @"", ((global::System.String)o.@Help));
            {
                global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias[] a = (global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias[])((global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias[])o.@Types);
                if (a != null){
                    WriteStartElement(@"Types", @"http://schemas.microsoft.com/pag/gax-wizards", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write2_TypeAlias(@"TypeAlias", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            {
                global::Microsoft.Practices.WizardFramework.Configuration.Page[] a = (global::Microsoft.Practices.WizardFramework.Configuration.Page[])((global::Microsoft.Practices.WizardFramework.Configuration.Page[])o.@Pages);
                if (a != null){
                    WriteStartElement(@"Pages", @"http://schemas.microsoft.com/pag/gax-wizards", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write5_Page(@"Page", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::Microsoft.Practices.WizardFramework.Configuration.Page)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            WriteEndElement(o);
        }

        void Write5_Page(string n, string ns, global::Microsoft.Practices.WizardFramework.Configuration.Page o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::Microsoft.Practices.WizardFramework.Configuration.Page)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/pag/gax-wizards");
            WriteAttribute(@"Type", @"", ((global::System.String)o.@Type));
            if (o.@WidthSpecified) {
                WriteAttribute(@"Width", @"", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@Width)));
            }
            if (o.@HeightSpecified) {
                WriteAttribute(@"Height", @"", System.Xml.XmlConvert.ToString((global::System.Int32)((global::System.Int32)o.@Height)));
            }
            WriteElementString(@"Title", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::System.String)o.@Title));
            WriteElementString(@"LinkTitle", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::System.String)o.@LinkTitle));
            WriteElementString(@"Help", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::System.String)o.@Help));
            {
                global::Microsoft.Practices.WizardFramework.Configuration.Field[] a = (global::Microsoft.Practices.WizardFramework.Configuration.Field[])((global::Microsoft.Practices.WizardFramework.Configuration.Field[])o.@Fields);
                if (a != null){
                    WriteStartElement(@"Fields", @"http://schemas.microsoft.com/pag/gax-wizards", null, false);
                    for (int ia = 0; ia < a.Length; ia++) {
                        Write4_Field(@"Field", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::Microsoft.Practices.WizardFramework.Configuration.Field)a[ia]), false, false);
                    }
                    WriteEndElement();
                }
            }
            if (o.@WidthSpecified) {
            }
            if (o.@HeightSpecified) {
            }
            WriteEndElement(o);
        }

        void Write4_Field(string n, string ns, global::Microsoft.Practices.WizardFramework.Configuration.Field o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::Microsoft.Practices.WizardFramework.Configuration.Field)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/pag/gax-wizards");
            WriteAttribute(@"ValueName", @"", ((global::System.String)o.@ValueName));
            WriteAttribute(@"Label", @"", ((global::System.String)o.@Label));
            if (o.@ReadOnlySpecified) {
                WriteAttribute(@"ReadOnly", @"", System.Xml.XmlConvert.ToString((global::System.Boolean)((global::System.Boolean)o.@ReadOnly)));
            }
            WriteAttribute(@"InvalidValueMessage", @"", ((global::System.String)o.@InvalidValueMessage));
            WriteAttribute(@"PanelType", @"", ((global::System.String)o.@PanelType));
            WriteElementString(@"Tooltip", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::System.String)o.@Tooltip));
            WriteElementString(@"Help", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::System.String)o.@Help));
            Write3_Editor(@"Editor", @"http://schemas.microsoft.com/pag/gax-wizards", ((global::Microsoft.Practices.WizardFramework.Configuration.Editor)o.@Editor), false, false);
            if (o.@ReadOnlySpecified) {
            }
            WriteEndElement(o);
        }

        void Write3_Editor(string n, string ns, global::Microsoft.Practices.WizardFramework.Configuration.Editor o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::Microsoft.Practices.WizardFramework.Configuration.Editor)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/pag/gax-wizards");
            WriteAttribute(@"Type", @"", ((global::System.String)o.@Type));
            {
                global::System.Xml.XmlAttribute[] a = (global::System.Xml.XmlAttribute[])o.@AnyAttr;
                if (a != null) {
                    for (int i = 0; i < a.Length; i++) {
                        global::System.Xml.XmlAttribute ai = (global::System.Xml.XmlAttribute)a[i];
                        WriteXmlAttribute(ai, o);
                    }
                }
            }
            WriteEndElement(o);
        }

        void Write2_TypeAlias(string n, string ns, global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias o, bool isNullable, bool needType) {
            if ((object)o == null) {
                if (isNullable) WriteNullTagLiteral(n, ns);
                return;
            }
            if (!needType) {
                System.Type t = o.GetType();
                if (t == typeof(global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias)) {
                }
                else {
                    throw CreateUnknownTypeException(o);
                }
            }
            WriteStartElement(n, ns, o, false, null);
            if (needType) WriteXsiType(null, @"http://schemas.microsoft.com/pag/gax-wizards");
            WriteAttribute(@"Name", @"", ((global::System.String)o.@Name));
            WriteAttribute(@"Type", @"", ((global::System.String)o.@Type));
            WriteEndElement(o);
        }

        protected override void InitCallbacks() {
        }
    }
	}

    internal partial class WizardSerializer {
	internal class BaseReader : System.Xml.Serialization.XmlSerializationReader {

        protected internal object Read7_Wizard() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id1_Wizard && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read6_Wizard(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/pag/gax-wizards:Wizard");
            }
            return (object)o;
        }

        /// <remarks/>
        protected virtual global::Microsoft.Practices.WizardFramework.Configuration.Wizard Read6_Wizard(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.Practices.WizardFramework.Configuration.Wizard o;
            o = new global::Microsoft.Practices.WizardFramework.Configuration.Wizard();
            global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias[] a_0 = null;
            int ca_0 = 0;
            global::Microsoft.Practices.WizardFramework.Configuration.Page[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[5];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[2] && ((object) Reader.LocalName == (object)id4_Name && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Name = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id5_SchemaVersion && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@SchemaVersion = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id6_Help && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Help = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Name, :SchemaVersion, :Help");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations0 = 0;
            int readerCount0 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id7_Types && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias[] a_0_0 = null;
                            int ca_0_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations1 = 0;
                                int readerCount1 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id8_TypeAlias && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_0_0 = (global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias));a_0_0[ca_0_0++] = Read2_TypeAlias(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/pag/gax-wizards:TypeAlias");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/pag/gax-wizards:TypeAlias");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations1, ref readerCount1);
                                }
                            ReadEndElement();
                            }
                            o.@Types = (global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias[])ShrinkArray(a_0_0, ca_0_0, typeof(global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias), false);
                        }
                    }
                    else if (((object) Reader.LocalName == (object)id9_Pages && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::Microsoft.Practices.WizardFramework.Configuration.Page[] a_1_0 = null;
                            int ca_1_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations2 = 0;
                                int readerCount2 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id10_Page && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_1_0 = (global::Microsoft.Practices.WizardFramework.Configuration.Page[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::Microsoft.Practices.WizardFramework.Configuration.Page));a_1_0[ca_1_0++] = Read5_Page(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/pag/gax-wizards:Page");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/pag/gax-wizards:Page");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations2, ref readerCount2);
                                }
                            ReadEndElement();
                            }
                            o.@Pages = (global::Microsoft.Practices.WizardFramework.Configuration.Page[])ShrinkArray(a_1_0, ca_1_0, typeof(global::Microsoft.Practices.WizardFramework.Configuration.Page), false);
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/pag/gax-wizards:Types, http://schemas.microsoft.com/pag/gax-wizards:Pages");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/pag/gax-wizards:Types, http://schemas.microsoft.com/pag/gax-wizards:Pages");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations0, ref readerCount0);
            }
            ReadEndElement();
            return o;
        }

        /// <remarks/>
        protected virtual global::Microsoft.Practices.WizardFramework.Configuration.Page Read5_Page(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.Practices.WizardFramework.Configuration.Page o;
            o = new global::Microsoft.Practices.WizardFramework.Configuration.Page();
            global::Microsoft.Practices.WizardFramework.Configuration.Field[] a_3 = null;
            int ca_3 = 0;
            bool[] paramsRead = new bool[7];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[4] && ((object) Reader.LocalName == (object)id11_Type && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Type = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id12_Width && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Width = System.Xml.XmlConvert.ToInt32(Reader.Value);
                    o.@WidthSpecified = true;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id13_Height && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Height = System.Xml.XmlConvert.ToInt32(Reader.Value);
                    o.@HeightSpecified = true;
                    paramsRead[6] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Type, :Width, :Height");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations3 = 0;
            int readerCount3 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id14_Title && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@Title = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id15_LinkTitle && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@LinkTitle = Reader.ReadElementString();
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id6_Help && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@Help = Reader.ReadElementString();
                        }
                        paramsRead[2] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id16_Fields && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::Microsoft.Practices.WizardFramework.Configuration.Field[] a_3_0 = null;
                            int ca_3_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations4 = 0;
                                int readerCount4 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id17_Field && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            a_3_0 = (global::Microsoft.Practices.WizardFramework.Configuration.Field[])EnsureArrayIndex(a_3_0, ca_3_0, typeof(global::Microsoft.Practices.WizardFramework.Configuration.Field));a_3_0[ca_3_0++] = Read4_Field(false, true);
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/pag/gax-wizards:Field");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/pag/gax-wizards:Field");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations4, ref readerCount4);
                                }
                            ReadEndElement();
                            }
                            o.@Fields = (global::Microsoft.Practices.WizardFramework.Configuration.Field[])ShrinkArray(a_3_0, ca_3_0, typeof(global::Microsoft.Practices.WizardFramework.Configuration.Field), false);
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/pag/gax-wizards:Title, http://schemas.microsoft.com/pag/gax-wizards:LinkTitle, http://schemas.microsoft.com/pag/gax-wizards:Help, http://schemas.microsoft.com/pag/gax-wizards:Fields");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/pag/gax-wizards:Title, http://schemas.microsoft.com/pag/gax-wizards:LinkTitle, http://schemas.microsoft.com/pag/gax-wizards:Help, http://schemas.microsoft.com/pag/gax-wizards:Fields");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations3, ref readerCount3);
            }
            ReadEndElement();
            return o;
        }

        /// <remarks/>
        protected virtual global::Microsoft.Practices.WizardFramework.Configuration.Field Read4_Field(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.Practices.WizardFramework.Configuration.Field o;
            o = new global::Microsoft.Practices.WizardFramework.Configuration.Field();
            bool[] paramsRead = new bool[8];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[3] && ((object) Reader.LocalName == (object)id18_ValueName && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@ValueName = Reader.Value;
                    paramsRead[3] = true;
                }
                else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id19_Label && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Label = Reader.Value;
                    paramsRead[4] = true;
                }
                else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id20_ReadOnly && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@ReadOnly = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@ReadOnlySpecified = true;
                    paramsRead[5] = true;
                }
                else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id21_InvalidValueMessage && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@InvalidValueMessage = Reader.Value;
                    paramsRead[6] = true;
                }
                else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id22_PanelType && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@PanelType = Reader.Value;
                    paramsRead[7] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":ValueName, :Label, :ReadOnly, :InvalidValueMessage, :PanelType");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations5 = 0;
            int readerCount5 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id23_Tooltip && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@Tooltip = Reader.ReadElementString();
                        }
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id6_Help && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        {
                            o.@Help = Reader.ReadElementString();
                        }
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id24_Editor && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@Editor = Read3_Editor(false, true);
                        paramsRead[2] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/pag/gax-wizards:Tooltip, http://schemas.microsoft.com/pag/gax-wizards:Help, http://schemas.microsoft.com/pag/gax-wizards:Editor");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/pag/gax-wizards:Tooltip, http://schemas.microsoft.com/pag/gax-wizards:Help, http://schemas.microsoft.com/pag/gax-wizards:Editor");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations5, ref readerCount5);
            }
            ReadEndElement();
            return o;
        }

        /// <remarks/>
        protected virtual global::Microsoft.Practices.WizardFramework.Configuration.Editor Read3_Editor(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.Practices.WizardFramework.Configuration.Editor o;
            o = new global::Microsoft.Practices.WizardFramework.Configuration.Editor();
            global::System.Xml.XmlAttribute[] a_1 = null;
            int ca_1 = 0;
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id11_Type && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Type = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    System.Xml.XmlAttribute attr = (System.Xml.XmlAttribute) Document.ReadNode(Reader);
                    ParseWsdlArrayType(attr);
                    a_1 = (global::System.Xml.XmlAttribute[])EnsureArrayIndex(a_1, ca_1, typeof(global::System.Xml.XmlAttribute));a_1[ca_1++] = attr;
                }
            }
            o.@AnyAttr = (global::System.Xml.XmlAttribute[])ShrinkArray(a_1, ca_1, typeof(global::System.Xml.XmlAttribute), true);
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@AnyAttr = (global::System.Xml.XmlAttribute[])ShrinkArray(a_1, ca_1, typeof(global::System.Xml.XmlAttribute), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations6 = 0;
            int readerCount6 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations6, ref readerCount6);
            }
            o.@AnyAttr = (global::System.Xml.XmlAttribute[])ShrinkArray(a_1, ca_1, typeof(global::System.Xml.XmlAttribute), true);
            ReadEndElement();
            return o;
        }

        /// <remarks/>
        protected virtual global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias Read2_TypeAlias(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias o;
            o = new global::Microsoft.Practices.WizardFramework.Configuration.TypeAlias();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id4_Name && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id11_Type && (object) Reader.NamespaceURI == (object)id3_Item)) {
                    o.@Type = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Name, :Type");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations7 = 0;
            int readerCount7 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations7, ref readerCount7);
            }
            ReadEndElement();
            return o;
        }

        protected override void InitCallbacks() {
        }

        string id16_Fields;
        string id23_Tooltip;
        string id13_Height;
        string id21_InvalidValueMessage;
        string id20_ReadOnly;
        string id7_Types;
        string id19_Label;
        string id24_Editor;
        string id12_Width;
        string id11_Type;
        string id15_LinkTitle;
        string id3_Item;
        string id2_Item;
        string id4_Name;
        string id1_Wizard;
        string id22_PanelType;
        string id14_Title;
        string id17_Field;
        string id5_SchemaVersion;
        string id18_ValueName;
        string id9_Pages;
        string id6_Help;
        string id10_Page;
        string id8_TypeAlias;

        protected override void InitIDs() {
            id16_Fields = Reader.NameTable.Add(@"Fields");
            id23_Tooltip = Reader.NameTable.Add(@"Tooltip");
            id13_Height = Reader.NameTable.Add(@"Height");
            id21_InvalidValueMessage = Reader.NameTable.Add(@"InvalidValueMessage");
            id20_ReadOnly = Reader.NameTable.Add(@"ReadOnly");
            id7_Types = Reader.NameTable.Add(@"Types");
            id19_Label = Reader.NameTable.Add(@"Label");
            id24_Editor = Reader.NameTable.Add(@"Editor");
            id12_Width = Reader.NameTable.Add(@"Width");
            id11_Type = Reader.NameTable.Add(@"Type");
            id15_LinkTitle = Reader.NameTable.Add(@"LinkTitle");
            id3_Item = Reader.NameTable.Add(@"");
            id2_Item = Reader.NameTable.Add(@"http://schemas.microsoft.com/pag/gax-wizards");
            id4_Name = Reader.NameTable.Add(@"Name");
            id1_Wizard = Reader.NameTable.Add(@"Wizard");
            id22_PanelType = Reader.NameTable.Add(@"PanelType");
            id14_Title = Reader.NameTable.Add(@"Title");
            id17_Field = Reader.NameTable.Add(@"Field");
            id5_SchemaVersion = Reader.NameTable.Add(@"SchemaVersion");
            id18_ValueName = Reader.NameTable.Add(@"ValueName");
            id9_Pages = Reader.NameTable.Add(@"Pages");
            id6_Help = Reader.NameTable.Add(@"Help");
            id10_Page = Reader.NameTable.Add(@"Page");
            id8_TypeAlias = Reader.NameTable.Add(@"TypeAlias");
        }
    }
	}

    internal abstract class WizardSerializerBase : System.Xml.Serialization.XmlSerializer {
        protected override System.Xml.Serialization.XmlSerializationReader CreateReader() {
            return new WizardSerializer.BaseReader();
        }
        protected override System.Xml.Serialization.XmlSerializationWriter CreateWriter() {
            return new WizardSerializer.BaseWriter();
        }
    }

    internal sealed partial class WizardSerializer : WizardSerializerBase {

		WizardReader _reader;
		WizardWriter _writer;

		/// <summary>Constructs the serializer.</summary>
		public WizardSerializer()
		{
		}

		/// <summary>Constructs the serializer with a pre-built reader.</summary>
		public WizardSerializer(WizardReader reader)
		{
			_reader = reader;
		}

		/// <summary>Constructs the serializer with a pre-built writer.</summary>
		public WizardSerializer(WizardWriter writer)
		{
			_writer = writer;
		}

		/// <summary>Constructs the serializer with pre-built reader and writer.</summary>
		public WizardSerializer(WizardReader reader, WizardWriter writer)
		{
			_reader = reader;
			_writer = writer;
		}

		/// <remarks/>
		protected override System.Xml.Serialization.XmlSerializationReader CreateReader()
		{
			if (_reader != null) return _reader;
			
			return base.CreateReader();
		}

		/// <remarks/>
		protected override System.Xml.Serialization.XmlSerializationWriter CreateWriter()
		{
			if (_writer != null) return _writer;
			
			return base.CreateWriter();
		}

        public override System.Boolean CanDeserialize(System.Xml.XmlReader xmlReader) {
            return xmlReader.IsStartElement(@"Wizard", @"http://schemas.microsoft.com/pag/gax-wizards");
        }

        protected override void Serialize(object objectToSerialize, System.Xml.Serialization.XmlSerializationWriter writer) {
            ((BaseWriter)writer).Write7_Wizard(objectToSerialize);
        }

        protected override object Deserialize(System.Xml.Serialization.XmlSerializationReader reader) {
            return ((BaseReader)reader).Read7_Wizard();
        }
    }

    internal partial class WizardSerializer {
	internal class XmlSerializerContract : global::System.Xml.Serialization.XmlSerializerImplementation {
        public override global::System.Xml.Serialization.XmlSerializationReader Reader { get { return new WizardSerializer.BaseReader(); } }
        public override global::System.Xml.Serialization.XmlSerializationWriter Writer { get { return new WizardSerializer.BaseWriter(); } }
        System.Collections.Hashtable readMethods = null;
        public override System.Collections.Hashtable ReadMethods {
            get {
                if (readMethods == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp[@"Microsoft.Practices.WizardFramework.Configuration.Wizard:http://schemas.microsoft.com/pag/gax-wizards::False:"] = @"Read7_Wizard";
                    if (readMethods == null) readMethods = _tmp;
                }
                return readMethods;
            }
        }
        System.Collections.Hashtable writeMethods = null;
        public override System.Collections.Hashtable WriteMethods {
            get {
                if (writeMethods == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp[@"Microsoft.Practices.WizardFramework.Configuration.Wizard:http://schemas.microsoft.com/pag/gax-wizards::False:"] = @"Write7_Wizard";
                    if (writeMethods == null) writeMethods = _tmp;
                }
                return writeMethods;
            }
        }
        System.Collections.Hashtable typedSerializers = null;
        public override System.Collections.Hashtable TypedSerializers {
            get {
                if (typedSerializers == null) {
                    System.Collections.Hashtable _tmp = new System.Collections.Hashtable();
                    _tmp.Add(@"Microsoft.Practices.WizardFramework.Configuration.Wizard:http://schemas.microsoft.com/pag/gax-wizards::False:", new WizardSerializer());
                    if (typedSerializers == null) typedSerializers = _tmp;
                }
                return typedSerializers;
            }
        }
        public override System.Boolean CanSerialize(System.Type type) {
            if (type == typeof(global::Microsoft.Practices.WizardFramework.Configuration.Wizard)) return true;
            return false;
        }
        public override System.Xml.Serialization.XmlSerializer GetSerializer(System.Type type) {
            if (type == typeof(global::Microsoft.Practices.WizardFramework.Configuration.Wizard)) return new WizardSerializer();
            return null;
        }
    }
	}
}


#pragma warning restore 0642, 0219
